{"version":3,"file":"js/324.031e950f.js","mappings":"ozDAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MACtE,EACIE,EAAkB,G,6BCFlBC,GAAeC,EACfC,EAAS,mBACb,SAASC,EAAUC,EAAWC,GAC1B,IAAID,EAAJ,CAGA,GAAIJ,EACA,MAAM,IAAIM,MAAMJ,GAEpB,IAAIK,EAA8B,oBAAZF,EAAyBA,IAAYA,EACvDG,EAAQD,EAAW,GAAGE,OAAOP,EAAQ,MAAMO,OAAOF,GAAYL,EAClE,MAAM,IAAII,MAAME,EANhB,CAOJ,C,ICZYE,E,ilBAAZ,SAAYA,GACVA,EAAAA,EAAA,wBACAA,EAAAA,EAAA,sBACAA,EAAAA,EAAA,+BACAA,EAAAA,EAAA,2BACAA,EAAAA,EAAA,0CACAA,EAAAA,EAAA,sCACAA,EAAAA,EAAA,6CACAA,EAAAA,EAAA,0BACAA,EAAAA,EAAA,0CACAA,EAAAA,EAAA,sBACAA,EAAAA,EAAA,0CACAA,EAAAA,EAAA,wBACAA,EAAAA,EAAA,6BACAA,EAAAA,EAAA,iBACAA,EAAAA,EAAA,gCACAA,EAAAA,EAAA,oCACAA,EAAAA,EAAA,oBAjBF,GAAYA,IAAAA,EAAO,K,IAuCPC,E,YAnBCC,EAAmB,CAC9BF,EAAQG,QACRH,EAAQI,SACRJ,EAAQK,gBACRL,EAAQM,aACRN,EAAQO,gBACRP,EAAQQ,QACRR,EAAQS,eACRT,EAAQU,OACRV,EAAQW,QACRX,EAAQY,eACRZ,EAAQa,KACRb,EAAQc,IACRd,EAAQe,UACRf,EAAQgB,KACRhB,EAAQiB,cAIV,SAAYhB,GAEVA,EAAA,eACAA,EAAA,iBACAA,EAAA,eACAA,EAAA,iBACAA,EAAA,mBACAA,EAAA,aACAA,EAAA,cARF,GAAYA,IAAAA,EAAkB,KCxB9B,IAAMiB,EAAmB,CAAClB,EAAQG,QAASH,EAAQU,QAEnD,SAASS,EAAwBC,EAAiBC,GAChD,YADgD,IAAAA,IAAAA,EAAgC,IACzEH,EAAiBnB,OAAOsB,GAAoBC,QAAmB,SAACC,EAAMC,GAE3E,OADAD,EAAKC,GAAWJ,EACTG,CACR,GAAE,CAAC,EACL,CAED,ICnBYE,EAKAC,EDcCC,EAA4BR,EAAwB,6CAA8C,CAC7GnB,EAAQI,SACRJ,EAAQM,aACRN,EAAQQ,QACRR,EAAQS,eACRT,EAAQW,UAGGiB,EAAoC,6CAEpCC,EAAqB,6CACrBC,EAAmCX,EAAwBU,GAC3DE,EAAoB,6CACpBC,EAAkCb,EAAwBY,GAGjEE,EAAoC,CACxCC,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,8CAE/BC,EAAiBC,EAAA,GAClBP,EADkB,CAErBQ,0BAA2B,+CAEvBC,EAAgBF,EAAA,GACjBP,EADiB,CAEpBQ,0BAA2B,+CAGvBE,EAAqCV,EACrCW,EAAsBJ,EAAA,GACvBP,EADuB,CAE1BE,iBAAkB,6CAClBU,gBAAiB,+CAEbC,EAAoCb,EAGpCc,EAAiC,CACrCb,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCO,gBAAiB,8CAIbG,EAAgC,CACpCd,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCO,gBAAiB,6CACjBI,oBAAqB,8CAIjBC,EAA4C,CAChDhB,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCO,gBAAiB,8CAIbM,EAA4C,CAChDjB,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCO,gBAAiB,8CAIbO,EAAoC,CACxClB,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCO,gBAAiB,8CAIbQ,EAAsC,CAC1CnB,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCO,gBAAiB,6CACjBI,oBAAqB,8CAGjBK,EAAiC,CACrCpB,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCO,gBAAiB,6CACjBI,oBAAqB,8CAIjBM,GAAwC,CAC5CrB,qBAAsB,6CACtBC,iBAAkB,6CAClBC,cAAe,6CACfC,kBAAmB,6CACnBC,kCAAmC,6CACnCO,gBAAiB,6CACjBI,oBAAqB,8CAGVO,IAAsBC,EAAA,GAAAA,EAChCzD,EAAQG,SAAUoC,EADckB,EAEhCzD,EAAQI,UAAWuC,EAFac,EAGhCzD,EAAQM,cAAesC,EAHSa,EAIhCzD,EAAQQ,SAAUsC,EAJcW,EAKhCzD,EAAQS,gBAAiBqC,EALOW,EAMhCzD,EAAQU,QAASgC,EANee,EAOhCzD,EAAQa,MAAOkC,EAPiBU,EAQhCzD,EAAQY,gBAAiBmC,EAROU,EAShCzD,EAAQc,KAAMkC,EATkBS,EAUhCzD,EAAQK,iBAAkB6C,EAVMO,EAWhCzD,EAAQO,iBAAkB4C,EAXMM,EAYhCzD,EAAQW,SAAUyC,EAZcK,EAahCzD,EAAQe,WAAYsC,EAbYI,EAchCzD,EAAQgB,MAAOsC,EAdiBG,EAehCzD,EAAQiB,aAAcsC,GAfUE,GAmBtBC,GAAyBlB,EAAA,GACjCtC,EAAiBoB,QAAmB,SAACC,EAAMC,GAE5C,OADAD,EAAKC,GAAWgC,GAAuBhC,GAASU,qBACzCX,CACR,GAAE,CAAC,IAGOoC,GAAqBnB,EAAA,GAC7BtC,EAAiBoB,QAAmB,SAACC,EAAMC,GAC5C,IAAMa,EAAoBmB,GAAuBhC,GAASa,kBAI1D,OAHIA,IACFd,EAAKC,GAAWa,GAEXd,CACR,GAAE,CAAC,IAGOqC,GAAmBpB,EAAA,GAC3BtC,EAAiBoB,QAAmB,SAACC,EAAMC,GAE5C,OADAD,EAAKC,GAAWgC,GAAuBhC,GAASW,iBACzCZ,CACR,GAAE,CAAC,IAMOsC,GAA4C1C,EACvD,8CAKW2C,IAA6BC,EAAA,GAAAA,EACvC/D,EAAQG,SAAU,6CADqB4D,GAM7BC,IAA0BC,EAAA,GAAAA,EACpCjE,EAAQG,SAAU,6CADkB8D,GAI1BC,GAAiC/C,EAAwB,8CAEzDgD,IAA0BC,EAAA,GAAAA,EACpCpE,EAAQG,SAAU,6CADkBiE,GAI1BC,IAA8BC,EAAA,GAAAA,EACxCtE,EAAQG,SAAU,6CADsBmE,GAI9BC,GAAgB/B,EAAA,GACxBtC,EAAiBoB,QAAmB,SAACC,EAAMC,GAE5C,OADAD,EAAKC,GAAWgC,GAAuBhC,GAASY,cACzCb,CACR,GAAE,CAAC,IAGOiD,GAAsChC,EAAA,GAC9CtC,EAAiBoB,QAAmB,SAACC,EAAMC,GAC5C,IAAMc,EAAoCkB,GAAuBhC,GAASc,kCAI1E,OAHIA,IACFf,EAAKC,GAAWc,GAEXf,CACR,GAAE,CAAC,IAGOkD,GAAuBjC,EAAA,GAC/BrB,EAAwB,+CAGhBuD,IAA0BC,EAAA,GAAAA,EACpC3E,EAAQG,SAAU,6CADkBwE,GAI1BC,GAAmBpC,EAAA,GAC3BtC,EAAiBoB,QAAmB,SAACC,EAAMC,GAC5C,IAAMqB,EAAkBW,GAAuBhC,GAASqB,gBAIxD,OAHIA,IACFtB,EAAKC,GAAWqB,GAEXtB,CACR,GAAE,CAAC,IAGOsD,GAA8C3E,EAAiBoB,QAAmB,SAACC,EAAMC,GACpG,IAAMiB,EAA4Be,GAAuBhC,GAASiB,0BAIlE,OAHIA,IACFlB,EAAKC,GAAWiB,GAEXlB,CACR,GAAE,CAAC,GAESuD,GAA2B,SAACtD,GACvC,OAAIA,GAAWxB,EAAQc,IACd0C,GAAuBhC,GAASyB,oBAElC,4CACR,GCtQD,SAAYxB,GACVA,EAAAA,EAAA,gCACAA,EAAAA,EAAA,iCAFF,GAAYA,IAAAA,EAAS,KAKrB,SAAYC,GACVA,EAAAA,EAAA,8BACAA,EAAAA,EAAA,oCACAA,EAAAA,EAAA,yBAHF,EAAYA,IAAAA,EAAQ,KAMpB,I,MAAaqD,GAAaC,IAAAA,OAAY,sECRhCC,GAAUC,IAASC,KACnBC,GAAMF,IAASG,KAEfC,IAAqBC,GAAG,CAAC,EAAJA,GACxB7D,EAAS8D,YAAaP,GAAQO,WADND,GAExB7D,EAAS+D,eAAgBR,GAAQQ,cAFTF,GAGxB7D,EAASgE,UAAWT,GAAQS,SAHJH,IAMrBI,IAAeC,GAAG,CAAC,EAAJA,GAClBlE,EAAS8D,YADS,EAAAI,GAElBlE,EAAS+D,eAFS,EAAAG,GAGlBlE,EAASgE,UAHS,EAAAE,IAMRC,GAAb,WAIE,SAAAA,EAAmBC,EAAsBC,QAAA,IAAAA,IAAAA,EAAyBf,IAAAA,OAAY,IAC5E9F,KAAK4G,UAAYd,IAAAA,OAAYc,GAC7B5G,KAAK6G,YAAcf,IAAAA,OAAYe,EAChC,CAPHF,EASiBG,iBAAP,SAAwBC,GAC9B,GAAIA,aAAuBjB,KAA+B,kBAAhBiB,GAAmD,kBAAhBA,EAC3E,OAAO,IAAIJ,EAASI,GAEtB,GAAI,cAAeA,GAAe,gBAAiBA,EAAa,OAAOA,EACvE,MAAM,IAAIrG,MAAM,2BACjB,EAfH,IAAAsG,EAAAL,EAAAM,UAAA,OAAAD,EA2BSE,OAAA,WACL,OAAO,IAAIP,EAAS3G,KAAK6G,YAAa7G,KAAK4G,UAC5C,EA7BHI,EA+BSG,IAAA,SAAIC,GACT,IAAMC,EAAcV,EAASG,iBAAiBM,GAC9C,OAAItB,IAAAA,MAAW9F,KAAK6G,YAAaQ,EAAYR,aACpC,IAAIF,EAASb,IAAAA,IAAS9F,KAAK4G,UAAWS,EAAYT,WAAY5G,KAAK6G,aAErE,IAAIF,EACTb,IAAAA,IACEA,IAAAA,SAAc9F,KAAK4G,UAAWS,EAAYR,aAC1Cf,IAAAA,SAAcuB,EAAYT,UAAW5G,KAAK6G,cAE5Cf,IAAAA,SAAc9F,KAAK6G,YAAaQ,EAAYR,aAE/C,EA3CHG,EA6CSM,SAAA,SAASF,GACd,IAAMC,EAAcV,EAASG,iBAAiBM,GAC9C,OAAItB,IAAAA,MAAW9F,KAAK6G,YAAaQ,EAAYR,aACpC,IAAIF,EAASb,IAAAA,SAAc9F,KAAK4G,UAAWS,EAAYT,WAAY5G,KAAK6G,aAE1E,IAAIF,EACTb,IAAAA,SACEA,IAAAA,SAAc9F,KAAK4G,UAAWS,EAAYR,aAC1Cf,IAAAA,SAAcuB,EAAYT,UAAW5G,KAAK6G,cAE5Cf,IAAAA,SAAc9F,KAAK6G,YAAaQ,EAAYR,aAE/C,EAzDHG,EA2DSO,SAAA,SAASH,GACd,IAAMC,EAAcV,EAASG,iBAAiBM,GAC9C,OAAOtB,IAAAA,SACLA,IAAAA,SAAc9F,KAAK4G,UAAWS,EAAYR,aAC1Cf,IAAAA,SAAcuB,EAAYT,UAAW5G,KAAK6G,aAE7C,EAjEHG,EAmESQ,QAAA,SAAQJ,GACb,IAAMC,EAAcV,EAASG,iBAAiBM,GAC9C,OAAOtB,IAAAA,MACLA,IAAAA,SAAc9F,KAAK4G,UAAWS,EAAYR,aAC1Cf,IAAAA,SAAcuB,EAAYT,UAAW5G,KAAK6G,aAE7C,EAzEHG,EA2ESS,YAAA,SAAYL,GACjB,IAAMC,EAAcV,EAASG,iBAAiBM,GAC9C,OAAOtB,IAAAA,YACLA,IAAAA,SAAc9F,KAAK4G,UAAWS,EAAYR,aAC1Cf,IAAAA,SAAcuB,EAAYT,UAAW5G,KAAK6G,aAE7C,EAjFHG,EAmFSU,SAAA,SAASN,GACd,IAAMC,EAAcV,EAASG,iBAAiBM,GAC9C,OAAO,IAAIT,EACTb,IAAAA,SAAc9F,KAAK4G,UAAWS,EAAYT,WAC1Cd,IAAAA,SAAc9F,KAAK6G,YAAaQ,EAAYR,aAE/C,EAzFHG,EA2FSW,OAAA,SAAOP,GACZ,IAAMC,EAAcV,EAASG,iBAAiBM,GAC9C,OAAO,IAAIT,EACTb,IAAAA,SAAc9F,KAAK4G,UAAWS,EAAYR,aAC1Cf,IAAAA,SAAc9F,KAAK6G,YAAaQ,EAAYT,WAE/C,EAjGHI,EAmGSY,cAAA,SACLC,EACAC,EACAC,QADA,IAAAD,IAAAA,EAAiB,CAAEE,eAAgB,UACnC,IAAAD,IAAAA,EAAqBvF,EAAS+D,eAEpB0B,OAAOC,UAAUL,IAA3BtH,GAAU,GACAsH,EAAoB,GAA9BtH,GAAU,GAEVwF,GAAQoC,IAAI,CAAEC,UAAWP,EAAoB,EAAGE,SAAU3B,GAAsB2B,KAChF,IAAMM,EAAW,IAAItC,GAAQ/F,KAAK4G,UAAU0B,YACzCC,IAAIvI,KAAK6G,YAAYyB,YACrBE,oBAAoBX,GACvB,OAAOQ,EAASrC,SAASqC,EAASI,gBAAiBX,EACpD,EAhHHd,EAkHS0B,QAAA,SACLD,EACAX,EACAC,GAOA,YARA,IAAAD,IAAAA,EAAiB,CAAEE,eAAgB,UACnC,IAAAD,IAAAA,EAAqBvF,EAAS+D,eAEpB0B,OAAOC,UAAUO,IAA3BlI,GAAU,GACAkI,GAAiB,GAA3BlI,GAAU,GAEV2F,GAAIyC,GAAKF,EACTvC,GAAI0C,GAAKnC,GAAgBsB,GAClB,IAAI7B,GAAIlG,KAAK4G,UAAU0B,YAAYC,IAAIvI,KAAK6G,YAAYyB,YAAYtC,SAASyC,EAAeX,EACpG,EA7HHe,EAAAlC,EAAA,EAAAmC,IAAA,WAAAC,IAAA,WAmBI,OAAOjD,IAAAA,OAAY9F,KAAK4G,UAAW5G,KAAK6G,YACzC,GApBH,CAAAiC,IAAA,YAAAC,IAAA,WAwBI,OAAO,IAAIpC,EAASb,IAAAA,UAAe9F,KAAK4G,UAAW5G,KAAK6G,aAAc7G,KAAK6G,YAC5E,GAzBH,CAAAiC,IAAA,aAAAC,IAAA,WAmII,OAAO,IAAIpC,EAAS3G,KAAK4G,UAAW5G,KAAK6G,YAC1C,KApIHF,CAAA,ICbMqC,GAAMhD,IAASG,KAER8C,GAAb,SAAAC,GA2BE,SAAAD,EAAsBE,EAAavC,EAAsBC,G,aACvDuC,EAAAF,EAAAG,KAAA,KAAMzC,EAAWC,IAAjB,KACUf,IAAAA,gBAAqBsD,EAAKf,SAAUxC,KAA9CtF,GAAU,GACV6I,EAAKD,SAAWA,EAChBC,EAAKE,aAAexD,IAAAA,aAAkBA,IAAAA,OAAY,IAAKA,IAAAA,OAAYqD,EAASI,W,CAC7E,CAhCHC,EAAAP,EAAAC,GAAAD,EASgBQ,cAAP,SAAyCN,EAAaO,GAC3D,OAAO,IAAIT,EAAeE,EAAUO,EACrC,EAXHT,EAmBgBU,qBAAP,SACLR,EACAvC,EACAC,GAEA,OAAO,IAAIoC,EAAeE,EAAUvC,EAAWC,EAChD,EAzBH,IAAAG,EAAAiC,EAAAhC,UAAA,OAAAD,EAkCSG,IAAA,SAAIC,GACCpH,KAAKmJ,SAASS,OAAOxC,EAAM+B,WAArC5I,GAAU,GACV,IAAMsJ,EAAKX,EAAAjC,UAASE,IAATkC,KAAA,KAAajC,GACxB,OAAO6B,EAAeU,qBAAqB3J,KAAKmJ,SAAUU,EAAMjD,UAAWiD,EAAMhD,YAClF,EAtCHG,EAwCSM,SAAA,SAASF,GACJpH,KAAKmJ,SAASS,OAAOxC,EAAM+B,WAArC5I,GAAU,GACV,IAAMuJ,EAAUZ,EAAAjC,UAASK,SAAT+B,KAAA,KAAkBjC,GAClC,OAAO6B,EAAeU,qBAAqB3J,KAAKmJ,SAAUW,EAAWlD,UAAWkD,EAAWjD,YAC5F,EA5CHG,EA8CSU,SAAA,SAASN,GACd,IAAM2C,EAAUb,EAAAjC,UAASS,SAAT2B,KAAA,KAAkBjC,GAClC,OAAO6B,EAAeU,qBAAqB3J,KAAKmJ,SAAUY,EAAWnD,UAAWmD,EAAWlD,YAC5F,EAjDHG,EAmDSW,OAAA,SAAOP,GACZ,IAAM4C,EAAOd,EAAAjC,UAASU,OAAT0B,KAAA,KAAgBjC,GAC7B,OAAO6B,EAAeU,qBAAqB3J,KAAKmJ,SAAUa,EAAQpD,UAAWoD,EAAQnD,YACtF,EAtDHG,EAwDSY,cAAA,SACLC,EACAC,EACAC,GAEA,YAJA,IAAAF,IAAAA,EAA4B,QAE5B,IAAAE,IAAAA,EAAqBvF,EAAS8D,YAEvB4C,EAAAjC,UAAMU,OAAN0B,KAAA,KAAarJ,KAAKsJ,cAAc1B,cAAcC,EAAmBC,EAAQC,EACjF,EA9DHf,EAgES0B,QAAA,SACLD,EACAX,EACAC,GAGA,YALA,IAAAU,IAAAA,EAAwBzI,KAAKmJ,SAASI,eAEtC,IAAAxB,IAAAA,EAAqBvF,EAAS8D,YAEpBmC,GAAiBzI,KAAKmJ,SAASI,UAAzChJ,GAAU,GACH2I,EAAAjC,UAAMU,OAAN0B,KAAA,KAAarJ,KAAKsJ,cAAcZ,QAAQD,EAAeX,EAAQC,EACvE,EAvEHf,EAyESiD,QAAA,SAAQnC,GAEb,YAFa,IAAAA,IAAAA,EAAiB,CAAEE,eAAgB,KAChDgB,GAAIL,GAAK3I,KAAKmJ,SAASI,SAChB,IAAIP,GAAIhJ,KAAKqI,SAASC,YAAYC,IAAIvI,KAAKsJ,aAAahB,YAAYtC,SAAS8B,EACrF,EA5EHe,EAAAI,EAAA,EAAAH,IAAA,UAAAC,IAAA,WA+EI,OAAI/I,KAAKmJ,SAASe,QAAgBlK,KAC3BiJ,EAAeU,qBAAqB3J,KAAKmJ,SAASgB,QAASnK,KAAK4G,UAAW5G,KAAK6G,YACxF,KAjFHoC,CAAA,EAAwDtC,ICRlDyD,GAAc,IAAIzD,GAASb,IAAAA,OAAY,MAM7C,SAASuE,GAAUC,GACjB,OAAO,IAAIC,GAAQD,EAAS1D,UAAW0D,EAASzD,YACjD,CAED,IAAa0D,GAAb,SAAArB,GAAA,SAAAqB,I,6CAIkBnB,EAAAoB,WAAkB,E,CAyBnC,CA7BDhB,EAAAe,EAAArB,GAAA,IAAAlC,EAAAuD,EAAAtD,UAAA,OAAAD,EAMEG,IAAA,SAAIC,GACF,OAAOiD,GAASnB,EAAAjC,UAAOE,IAAPkC,KAAC,KAAUjC,GAC5B,EARHJ,EAUEM,SAAA,SAASF,GACP,OAAOiD,GAASnB,EAAAjC,UAAOK,SAAP+B,KAAC,KAAejC,GACjC,EAZHJ,EAcEU,SAAA,SAASN,GACP,OAAOiD,GAASnB,EAAAjC,UAAOS,SAAP2B,KAAC,KAAejC,GACjC,EAhBHJ,EAkBEW,OAAA,SAAOP,GACL,OAAOiD,GAASnB,EAAAjC,UAAOU,OAAP0B,KAAC,KAAajC,GAC/B,EApBHJ,EAsBSY,cAAA,SAAcC,EAA+BC,EAAiBC,GACnE,YADmB,IAAAF,IAAAA,EAA4B,GACxCqB,EAAAjC,UAAMS,SAAN2B,KAAA,KAAee,IAAaxC,cAAcC,EAAmBC,EAAQC,EAC7E,EAxBHf,EA0BS0B,QAAA,SAAQD,EAA2BX,EAAiBC,GACzD,YADa,IAAAU,IAAAA,EAAwB,GAC9BS,EAAAjC,UAAMS,SAAN2B,KAAA,KAAee,IAAa1B,QAAQD,EAAeX,EAAQC,EACnE,EA5BHwC,CAAA,EAA6B5D,ICNhB8D,GAAb,SAAAvB,GASE,SAAAuB,I,UAKMC,EAAqBC,EAAuB9D,EAAwBD,E,mBAJrEgE,EAAA,IAAAC,MAAAC,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAH,EAAAG,GAAAC,UAAAD,GAMH,GAAoB,IAAhBH,EAAKK,OACLP,EAAuDE,EADpC,GACLD,EAAyCC,EADpC,GACU/D,EAA0B+D,EADpC,GACuBhE,EAAagE,EADpC,OAEhB,CACL,IAAMM,EAASN,EAAK,GAAGO,YAAYxD,OAAOiD,EAAK,GAAGQ,YAD7CC,EAEoD,CACvDT,EAAK,GAAGQ,WAAWjC,SACnByB,EAAK,GAAGO,YAAYhC,SACpB+B,EAAOrE,YACPqE,EAAOtE,WAJP8D,EAFGW,EAAA,GAEWV,EAFXU,EAAA,GAE0BxE,EAF1BwE,EAAA,GAEuCzE,EAFvCyE,EAAA,EAQN,C,OACDjC,EAAAF,EAAAG,KAAA,KAAMzC,EAAWC,IAAjB,KAEAuC,EAAKsB,aAAeA,EACpBtB,EAAKuB,cAAgBA,EACrBvB,EAAKkC,OAAS,IAAI3E,GAChBb,IAAAA,aAAkBA,IAAAA,OAAY,IAAKA,IAAAA,OAAY4E,EAAanB,WAC5DzD,IAAAA,aAAkBA,IAAAA,OAAY,IAAKA,IAAAA,OAAY6E,EAAcpB,Y,CAEhE,CAnCHC,EAAAiB,EAAAvB,GAAA,IAAAlC,EAAAyD,EAAAxD,UAAA,OAAAD,EAwCSE,OAAA,WACL,OAAO,IAAIuD,EAAMzK,KAAK2K,cAAe3K,KAAK0K,aAAc1K,KAAK4G,UAAW5G,KAAK6G,YAC9E,EA1CHG,EAgDSU,SAAA,SAAuCN,GAClCpH,KAAK2K,cAAcf,OAAOxC,EAAMsD,eAA1CnK,GAAU,GACV,IAAM+J,EAAQpB,EAAAjC,UAASS,SAAT2B,KAAA,KAAkBjC,GAChC,OAAO,IAAIqD,EAAMzK,KAAK0K,aAActD,EAAMuD,cAAeL,EAASzD,YAAayD,EAAS1D,UACzF,EApDHI,EA0DSuE,MAAA,SAAMC,GACDA,EAAerC,SAASS,OAAO5J,KAAK0K,eAA9CnK,GAAU,GACV,IAAM2K,EAAMhC,EAAAjC,UAASS,SAAT2B,KAAA,KAAkBmC,GAC9B,OAAOvC,GAAeU,qBAAqB3J,KAAK2K,cAAeO,EAAOtE,UAAWsE,EAAOrE,YACzF,EA9DHG,EAwESY,cAAA,SAAcC,EAA+BC,EAAiBC,GACnE,YADmB,IAAAF,IAAAA,EAA4B,GACxC7H,KAAKyL,oBAAoB7D,cAAcC,EAAmBC,EAAQC,EAC1E,EA1EHf,EA4ES0B,QAAA,SAAQD,EAA2BX,EAAiBC,GACzD,YADa,IAAAU,IAAAA,EAAwB,GAC9BzI,KAAKyL,oBAAoB/C,QAAQD,EAAeX,EAAQC,EAChE,EA9EHc,EAAA4B,EAAA,EAAA3B,IAAA,sBAAAC,IAAA,WAqEI,OAAAG,EAAAjC,UAAaS,SAAb2B,KAAA,KAAsBrJ,KAAKsL,OAC5B,KAtEHb,CAAA,EAA4E9D,ICDtD+E,GAkCpB,SAAsBpJ,EAAiBiH,EAAkBoC,EAAiBC,GAC9D3D,OAAO4D,cAAcvJ,IAA/B/B,GAAU,GACAgJ,GAAY,GAAKA,EAAW,KAAOtB,OAAOC,UAAUqB,IAA9DhJ,GAAU,GAEVP,KAAKsC,QAAUA,EACftC,KAAKuJ,SAAWA,EAChBvJ,KAAK2L,OAASA,EACd3L,KAAK4L,KAAOA,CACb,EC5CmBE,GAAtB,SAAAC,GAAA,SAAAD,I,6CACkB1C,EAAA4C,UAAiB,EACjB5C,EAAAc,SAAiB,E,CAClC,CAHD,OAAAV,EAAAsC,EAAAC,GAAAD,CAAA,EAA6CJ,ICC7C,SAAgBO,GAAwB/J,GACtC,IACE,OAAOgK,EAAAA,EAAAA,IAAWhK,EACnB,CAAC,MAAOiK,GACP,MAAM,IAAIzL,MAASwB,EAAb,2BACP,CACF,CAGD,IAAMkK,GAA4B,sBAMlC,SAAgBC,GAAkBnK,GAChC,GAAIkK,GAA0BE,KAAKpK,GACjC,OAAOA,EAGT,MAAM,IAAIxB,MAASwB,EAAb,2BACP,CCnBD,I,GAAaqK,GAAb,SAAAR,GAkBE,SAAAQ,EACEjK,EACAJ,EACAqH,EACAoC,EACAC,EACAY,G,aAEApD,EAAA2C,EAAA1C,KAAA,KAAM/G,EAASiH,EAAUoC,EAAQC,IAAjC,KAzBcxC,EAAA4C,UAAkB,EAClB5C,EAAAc,SAAgB,EA0B5Bd,EAAKlH,QADHsK,EACaH,GAAkBnK,GAElB+J,GAAwB/J,G,CAE1C,CAhCHsH,EAAA+C,EAAAR,GAAA,IAAA/E,EAAAuF,EAAAtF,UAAA,OAAAD,EAsCS4C,OAAA,SAAOxC,GACZ,OAAOA,EAAM8C,SAAWlK,KAAKsC,UAAY8E,EAAM9E,SAAWtC,KAAKkC,QAAQuK,gBAAkBrF,EAAMlF,QAAQuK,aACxG,EAxCHzF,EAgDS0F,YAAA,SAAYtF,GAGjB,OAFUpH,KAAKsC,UAAY8E,EAAM9E,SAAjC/B,GAAU,GACAP,KAAKkC,QAAQuK,gBAAkBrF,EAAMlF,QAAQuK,eAAvDlM,GAAU,GACHP,KAAKkC,QAAQuK,cAAgBrF,EAAMlF,QAAQuK,aACnD,EApDH5D,EAAA0D,EAAA,EAAAzD,IAAA,UAAAC,IAAA,WA0DI,OAAO/I,IACR,KA3DHuM,CAAA,EAA2Bb,ICHdiB,IAAKC,GAAA,GAAAA,GACf,GAAI,IAAIL,GAAM,EAAG,6CAA8C,GAAI,OAAQ,iBAD5DK,GAEf,GAAI,IAAIL,GAAM,EAAG,6CAA8C,GAAI,OAAQ,iBAF5DK,GAGf,GAAI,IAAIL,GAAM,EAAG,6CAA8C,GAAI,OAAQ,iBAH5DK,GAIf,GAAI,IAAIL,GAAM,EAAG,6CAA8C,GAAI,OAAQ,iBAJ5DK,GAKf,IAAK,IAAIL,GAAM,GAAI,6CAA8C,GAAI,OAAQ,iBAL9DK,GAOf,IAAK,IAAIL,GAAM,GAAI,6CAA8C,GAAI,OAAQ,iBAP9DK,GAQf,IAAK,IAAIL,GAAM,GAAI,6CAA8C,GAAI,OAAQ,iBAR9DK,GAUf,OAAQ,IAAIL,GAAM,MAAO,6CAA8C,GAAI,OAAQ,iBAVpEK,GAWf,QAAS,IAAIL,GAAM,OAAQ,6CAA8C,GAAI,OAAQ,iBAXtEK,ICILC,GAAb,SAAAC,GACE,SAAAD,EAAsBvK,G,OACpBwK,EAAAzD,KAAA,KAAM/G,EAAS,GAAI,MAAO,UAA1B,IACD,CAHHkH,EAAAqD,EAAAC,GAAAD,EAagBE,QAAP,SAAezK,G,MACpB,cAAA0K,EAAOhN,KAAKiN,YAAY3K,IAAxB0K,EAAqChN,KAAKiN,YAAY3K,GAAW,IAAIuK,EAAMvK,EAC5E,EAfH,IAAA0E,EAAA6F,EAAA5F,UAAA,OAAAD,EAiBS4C,OAAA,SAAOxC,GACZ,OAAOA,EAAM4E,UAAY5E,EAAM9E,UAAYtC,KAAKsC,OACjD,EAnBHuG,EAAAgE,EAAA,EAAA/D,IAAA,UAAAC,IAAA,WAMI,IAAMmE,EAAQP,GAAM3M,KAAKsC,SAEzB,OADY4K,GAAZ3M,GAAU,GACH2M,CACR,KATHL,CAAA,EAA2Bf,ICD3B,SAAgBqB,GACdC,EACAC,EACAC,GAEA,IAAMC,EAAqBH,EAAS7B,MAAM8B,GAEpCG,EAAcD,EAAmBjG,SAASgG,GAAc3F,OAAO4F,GACrE,OAAO,IAAIhD,GAAQiD,EAAY5G,UAAW4G,EAAY3G,YACvD,CCbD,SAAgB4G,GAAgBC,EAAYvG,EAAQwG,EAAiBC,GAMnE,GALUD,EAAU,GAApBpN,GAAU,GAEAmN,EAAMzC,QAAU0C,GAA1BpN,GAAU,GAGW,IAAjBmN,EAAMzC,OAER,OADAyC,EAAMG,KAAK1G,GACJ,KAEP,IAAM2G,EAASJ,EAAMzC,SAAW0C,EAEhC,GAAIG,GAAUF,EAAWF,EAAMA,EAAMzC,OAAS,GAAI9D,IAAQ,EACxD,OAAOA,EAGT,IAAI4G,EAAK,EACPC,EAAKN,EAAMzC,OAEb,MAAO8C,EAAKC,EAAI,CACd,IAAMC,EAAOF,EAAKC,IAAQ,EACtBJ,EAAWF,EAAMO,GAAM9G,IAAQ,EACjC4G,EAAKE,EAAM,EAEXD,EAAKC,CAER,CAED,OADAP,EAAMQ,OAAOH,EAAI,EAAG5G,GACb2G,EAASJ,EAAMS,MAAS,IAElC,CFdgBtB,GAAAI,YAA4C,CAAC,EGjBvD,IAAMmB,GAAmBtI,IAAAA,OAAYmC,OAAOmG,kBAE7CC,GAAOvI,IAAAA,OAAY,GACnBwI,GAAMxI,IAAAA,OAAY,GAClByI,GAAMzI,IAAAA,OAAY,GAMxB,SAAgB0I,GAAK5N,GAInB,GAHUkF,IAAAA,mBAAwBlF,EAAOyN,KAAzC9N,GAAU,GAGNuF,IAAAA,SAAclF,EAAOwN,IACvB,OAAOtI,IAAAA,OAAY2I,KAAKC,MAAMD,KAAKD,KAAK1I,IAAAA,SAAclF,MAGxD,IAAI+N,EACAC,EACJD,EAAI/N,EACJgO,EAAI9I,IAAAA,IAASA,IAAAA,OAAYlF,EAAO2N,IAAMD,IACtC,MAAOxI,IAAAA,SAAc8I,EAAGD,GACtBA,EAAIC,EACJA,EAAI9I,IAAAA,OAAYA,IAAAA,IAASA,IAAAA,OAAYlF,EAAOgO,GAAIA,GAAIL,IAEtD,OAAOI,CACR,C,2DC3BK,SAAUE,GAAGC,GACf,OAAOC,EAAAA,GAAAA,IAAUC,EAAAA,GAAAA,IAAYF,GACjC,C,gDCUA,MAAMG,GAAS,IAAIC,GAAAA,GAAOC,GAAAA,GAIpB,MAAOC,WAAuBC,GAAAA,IAQ9B,MAAOC,WAA+BD,GAAAA,IAStC,MAAOE,WAAyBF,GAAAA,IAQhC,MAAOG,WAAgBH,GAAAA,GAIzB,gBAAOI,CAAU7O,GACb,SAAUA,IAASA,EAAM8O,WAC7B,EAGJ,MAAMC,GAA8G,CAChH,aAAc,CAAEC,UAAW,gBAAiBhE,KAAM,QAASiE,OAAQ,CAAE,UAAYC,QAAQ,GACzF,aAAc,CAAEF,UAAW,iBAAkBhE,KAAM,QAASiE,OAAQ,CAAE,aAG1E,SAASE,GAAgBC,EAAkB7D,GACvC,MAAM8D,EAAO,IAAIvP,MAAM,0DAA2DsP,KAElF,OADMC,EAAM9D,MAAQA,EACb8D,CACX,CAeM,MAAOC,GAcTC,WAAAA,CAAYC,GACR,IAAIC,EAAuD,GAEvDA,EADsB,kBAAfD,EACDE,KAAKC,MAAMH,GAEXA,GAGVI,EAAAA,GAAAA,IAAe,KAAM,YAAaH,EAAII,KAAKC,GAChCC,GAAAA,GAASC,KAAKF,KACtBG,QAAQH,GAA0B,MAAZA,MAEzBF,EAAAA,GAAAA,IAAe,KAAM,aAAaM,EAAAA,GAAAA,eAAsC,cAAtCA,KAElCN,EAAAA,GAAAA,IAAe,KAAM,YAAa,KAClCA,EAAAA,GAAAA,IAAe,KAAM,SAAU,KAC/BA,EAAAA,GAAAA,IAAe,KAAM,SAAU,KAC/BA,EAAAA,GAAAA,IAAe,KAAM,UAAW,IAGhC,KAAKJ,UAAUW,SAASL,IACpB,IAAIM,EAAyC,KAC7C,OAAQN,EAASO,MACb,IAAK,cACD,OAAI,KAAKC,YACLjC,GAAOkC,KAAK,2CAIhBX,EAAAA,GAAAA,IAAe,KAAM,SAA+BE,GAExD,IAAK,WAGDM,EAAS,KAAKI,UACd,MACJ,IAAK,QAEDJ,EAAS,KAAKK,OACd,MACJ,IAAK,QACDL,EAAS,KAAKM,OACd,MACJ,QACI,OAGR,IAAI1B,EAAYc,EAAS5I,SACrBkJ,EAAOpB,GACPX,GAAOkC,KAAK,0BAA4BvB,GAI5CoB,EAAOpB,GAAac,CAAQ,IAI3B,KAAKQ,SACNV,EAAAA,GAAAA,IAAe,KAAM,SAAUe,GAAAA,GAAoBX,KAAK,CACpDY,SAAS,EACTP,KAAM,kBAIdT,EAAAA,GAAAA,IAAe,KAAM,gBAAgB,EACzC,CAEA1I,MAAAA,CAAOA,GACEA,IAAUA,EAAS2J,GAAAA,GAAYC,MAChC5J,IAAW2J,GAAAA,GAAYE,SACvB1C,GAAO2C,mBAAmB,gDAAiD,SAAU9J,GAGzF,MAAMuI,EAAM,KAAKD,UAAUK,KAAKC,GAAaA,EAAS5I,OAAOA,KAG7D,OAAIA,IAAW2J,GAAAA,GAAYI,KACfvB,KAAKwB,UAAUzB,EAAII,KAAKsB,GAAMzB,KAAKC,MAAMwB,MAG9C1B,CACX,CAGA,kBAAO2B,GACH,OAAOC,GAAAA,CACX,CAEA,iBAAO/F,CAAWhK,GACd,OAAOgK,EAAAA,EAAAA,IAAWhK,EACtB,CAEA,iBAAOgQ,CAAWxB,GACd,OAAOyB,EAAAA,GAAAA,IAAatD,GAAG6B,EAAS5I,UAAW,EAAG,EAClD,CAEA,oBAAOsK,CAAcC,GACjB,OAAOxD,GAAGwD,EAAcvK,SAC5B,CAGAwK,WAAAA,CAAYC,GACR,IAAIC,EAAAA,GAAAA,IAAYD,GAA2B,CACvC,IAAK,MAAM3G,KAAQ,KAAKwF,UACpB,GAAImB,IAA6B,KAAKL,WAAWtG,GAC7C,OAAO,KAAKwF,UAAUxF,GAG9BqD,GAAO2C,mBAAmB,uBAAwB,UAAWW,E,CAIjE,IAA+C,IAA3CA,EAAyBE,QAAQ,KAAa,CAC9C,MAAM7G,EAAO2G,EAAyBG,OAChCC,EAAWC,OAAOC,KAAK,KAAKzB,WAAWP,QAAQiC,GAAOA,EAAEC,MAAM,KAAgB,KAAOnH,IAO3F,OANwB,IAApB+G,EAAS1H,OACTgE,GAAO2C,mBAAmB,uBAAwB,OAAQhG,GACnD+G,EAAS1H,OAAS,GACzBgE,GAAO2C,mBAAmB,8BAA+B,OAAQhG,GAG9D,KAAKwF,UAAUuB,EAAS,G,CAInC,MAAMzH,EAAS,KAAKkG,UAAU4B,GAAAA,GAAiBC,WAAWV,GAA0BzK,UAIpF,OAHKoD,GACD+D,GAAO2C,mBAAmB,uBAAwB,YAAaW,GAE5DrH,CACX,CAGAgI,QAAAA,CAASC,GACL,IAAIX,EAAAA,GAAAA,IAAYW,GAAyB,CACrC,MAAMC,EAAYD,EAAuB1G,cACzC,IAAK,MAAMb,KAAQ,KAAKyF,OACpB,GAAI+B,IAAc,KAAKhB,cAAcxG,GACjC,OAAO,KAAKyF,OAAOzF,GAG3BqD,GAAO2C,mBAAmB,oBAAqB,YAAawB,E,CAIhE,IAA6C,IAAzCD,EAAuBV,QAAQ,KAAa,CAC5C,MAAM7G,EAAOuH,EAAuBT,OAC9BC,EAAWC,OAAOC,KAAK,KAAKxB,QAAQR,QAAQiC,GAAOA,EAAEC,MAAM,KAAgB,KAAOnH,IAOxF,OANwB,IAApB+G,EAAS1H,OACTgE,GAAO2C,mBAAmB,oBAAqB,OAAQhG,GAChD+G,EAAS1H,OAAS,GACzBgE,GAAO2C,mBAAmB,2BAA4B,OAAQhG,GAG3D,KAAKyF,OAAOsB,EAAS,G,CAIhC,MAAMzH,EAAS,KAAKmG,OAAOgC,GAAAA,GAAcJ,WAAWE,GAAwBrL,UAI5E,OAHKoD,GACD+D,GAAO2C,mBAAmB,oBAAqB,YAAauB,GAEzDjI,CACX,CAGAoI,QAAAA,CAASf,GACL,IAAIC,EAAAA,GAAAA,IAAYD,GAA2B,CACvC,MAAML,GAAapB,EAAAA,GAAAA,IAA2D,KAAKX,YAAa,cAChG,IAAK,MAAMvE,KAAQ,KAAK0F,OAAQ,CAC5B,MAAMnF,EAAQ,KAAKmF,OAAO1F,GAC1B,GAAI2G,IAA6BL,EAAW/F,GACxC,OAAO,KAAKmF,OAAO1F,E,CAG3BqD,GAAO2C,mBAAmB,oBAAqB,UAAWW,E,CAI9D,IAA+C,IAA3CA,EAAyBE,QAAQ,KAAa,CAC9C,MAAM7G,EAAO2G,EAAyBG,OAChCC,EAAWC,OAAOC,KAAK,KAAKvB,QAAQT,QAAQiC,GAAOA,EAAEC,MAAM,KAAgB,KAAOnH,IAOxF,OANwB,IAApB+G,EAAS1H,OACTgE,GAAO2C,mBAAmB,oBAAqB,OAAQhG,GAChD+G,EAAS1H,OAAS,GACzBgE,GAAO2C,mBAAmB,2BAA4B,OAAQhG,GAG3D,KAAK0F,OAAOqB,EAAS,G,CAIhC,MAAMzH,EAAS,KAAKoG,OAAO0B,GAAAA,GAAiBC,WAAWV,GAA0BzK,UAIjF,OAHKoD,GACD+D,GAAO2C,mBAAmB,oBAAqB,YAAaW,GAEzDrH,CACX,CAGAgH,UAAAA,CAAWxB,GACP,GAAyB,kBAAdA,EACP,IACIA,EAAW,KAAK4B,YAAY5B,E,CAC9B,MAAOvE,GACL,IACIuE,EAAW,KAAK4C,SAAiB5C,E,CACnC,MAAO6C,GACL,MAAMpH,C,EAKlB,OAAO2E,EAAAA,GAAAA,IAA2D,KAAKX,YAAa,aAA7EW,CAA2FJ,EACtG,CAGA0B,aAAAA,CAAcC,GAKV,MAJ8B,kBAAnBA,IACPA,EAAgB,KAAKa,SAASb,KAG3BvB,EAAAA,GAAAA,IAAwC,KAAKX,YAAa,gBAA1DW,CAA2EuB,EACtF,CAGAmB,aAAAA,CAAcC,EAAkCC,GAC5C,OAAO,KAAKC,UAAUC,OAAOH,EAAQC,EACzC,CAEAG,aAAAA,CAAcJ,EAAkCK,GAC5C,OAAO,KAAKH,UAAUI,OAAON,EAAQK,EACzC,CAEAE,YAAAA,CAAaF,GACT,OAAO,KAAKD,cAAc,KAAK3C,OAAOrB,OAAQiE,GAAU,GAC5D,CAEAG,iBAAAA,CAAkBvD,EAAkCgD,GACvB,kBAAdhD,IACPA,EAAW,KAAK4C,SAAS5C,IAG7B,MAAMwD,GAAQC,EAAAA,GAAAA,IAAST,GAMvB,OAJIU,EAAAA,GAAAA,IAAQF,EAAMG,MAAM,EAAG,MAAQ,KAAKnC,WAAWxB,IAC/CzB,GAAO2C,mBAAmB,uCAAwClB,EAAS9E,QAAU,QAAQwI,EAAAA,GAAAA,IAAQF,IAGlG,KAAKV,cAAc9C,EAASb,OAAQqE,EAAMG,MAAM,GAC3D,CAEAC,iBAAAA,CAAkB5D,EAAkCoD,GAKhD,MAJyB,kBAAdpD,IACPA,EAAW,KAAK4C,SAAS5C,KAGtB0D,EAAAA,GAAAA,KAAQvT,EAAAA,GAAAA,IAAO,CAClB,KAAKqR,WAAWxB,GAChB,KAAKmD,cAAcnD,EAASb,OAAQiE,GAAU,MAEtD,CAGAS,kBAAAA,CAAmBC,EAA6Cd,GAC3B,kBAAtBc,IACPA,EAAmB,KAAKlC,YAAYkC,IAGxC,MAAMN,GAAQC,EAAAA,GAAAA,IAAST,GAMvB,OAJIU,EAAAA,GAAAA,IAAQF,EAAMG,MAAM,EAAG,MAAQ,KAAKnC,WAAWsC,IAC/CvF,GAAO2C,mBAAmB,0CAA2C4C,EAAiB5I,QAAU,QAAQwI,EAAAA,GAAAA,IAAQF,IAG7G,KAAKV,cAAcgB,EAAiB3E,OAAQqE,EAAMG,MAAM,GACnE,CAGAI,kBAAAA,CAAmBD,EAA6CV,GAK5D,MAJiC,kBAAtBU,IACPA,EAAmB,KAAKlC,YAAYkC,KAGjCJ,EAAAA,GAAAA,KAAQvT,EAAAA,GAAAA,IAAO,CAClB,KAAKqR,WAAWsC,GAChB,KAAKX,cAAcW,EAAiB3E,OAAQiE,GAAU,MAE9D,CAGAY,oBAAAA,CAAqBF,EAA6Cd,GAC7B,kBAAtBc,IACPA,EAAmB,KAAKlC,YAAYkC,IAGxC,IAAIN,GAAQC,EAAAA,GAAAA,IAAST,GAEjB5D,EAAiB,KACjBrP,EAAU,GACVkU,EAAoB,KACpBC,EAAoB,KACpBC,EAAyB,KAC7B,OAAQX,EAAMjJ,OAAS,KAAK0I,UAAUmB,gBAClC,KAAK,EACD,IACI,OAAO,KAAKnB,UAAUC,OAAOY,EAAiBO,QAASb,E,CACzD,MAAO/H,GAAO,CAChB,MAEJ,KAAK,EAAG,CACJ,MAAM6I,GAAWZ,EAAAA,GAAAA,IAAQF,EAAMG,MAAM,EAAG,IAClCY,EAAUtF,GAAcqF,GAC9B,GAAIC,EACAN,EAAY,KAAKhB,UAAUC,OAAOqB,EAAQpF,OAAQqE,EAAMG,MAAM,IAC9DO,EAAYK,EAAQrJ,KACpBiJ,EAAiBI,EAAQrF,UACrBqF,EAAQnF,SAAUA,EAAS6E,EAAU,IACvB,UAAdC,EACAnU,EAAU,4EAA6E6P,KAAKwB,UAAU6C,EAAU,MAC3F,UAAdC,IACPnU,EAAU,yEAA0EkU,EAAU,WAGlG,IACI,MAAMxI,EAAQ,KAAKmH,SAAS0B,GAC5BL,EAAY,KAAKhB,UAAUC,OAAOzH,EAAM0D,OAAQqE,EAAMG,MAAM,IAC5DO,EAAYzI,EAAMP,KAClBiJ,EAAiB1I,EAAMrE,Q,CACzB,MAAOqE,GAAO,CAEpB,K,EAIR,OAAO8C,GAAOiG,WAAW,wBAA0BzU,EAASyO,GAAAA,GAAOoC,OAAO6D,eAAgB,CACtFC,OAAQZ,EAAiB1M,SACzB4L,MAAMU,EAAAA,GAAAA,IAAQV,GAAOiB,YAAWC,YAAWC,iBAAgB/E,UAEnE,CAGAuF,oBAAAA,CAAqBb,EAA6CV,GAK9D,MAJiC,kBAAtBU,IACPA,EAAmB,KAAKlC,YAAYkC,KAGjCJ,EAAAA,GAAAA,IAAQ,KAAKT,UAAUI,OAAOS,EAAiBO,QAASjB,GAAU,IAC7E,CAGAwB,kBAAAA,CAAmBjD,EAAuCyB,GACxB,kBAAnBzB,IACPA,EAAgB,KAAKa,SAASb,IAG9ByB,EAAO7I,OAASoH,EAAcxC,OAAO5E,QACrCgE,GAAOiG,WAAW,0BAA4B7C,EAAcvK,SAAUoH,GAAAA,GAAOoC,OAAOiE,oBAAqB,CACrGC,SAAU,SACV5U,MAAOkT,IAIf,IAAI2B,EAAwC,GACvCpD,EAAcqD,WAAaD,EAAO5H,KAAK,KAAKuE,cAAcC,IAE/D,MAAMsD,EAAcA,CAACC,EAAkBhV,IAChB,WAAfgV,EAAM3E,KACEpC,GAAGjO,GACW,UAAfgV,EAAM3E,MACLlC,EAAAA,GAAAA,IAAUqF,EAAAA,GAAAA,IAAQxT,KAGX,SAAfgV,EAAM3E,MAAqC,mBAAXrQ,IAChCA,EAASA,EAAQ,OAAQ,QAGzBgV,EAAM3E,KAAK4E,MAAM,YACjBjV,EAAQkV,GAAAA,GAAUlF,KAAKhQ,GAAOmV,eAIf,YAAfH,EAAM3E,MAAsB,KAAK0C,UAAUI,OAAQ,CAAE,WAAa,CAAEnT,KACjEoV,EAAAA,GAAAA,KAAW5B,EAAAA,GAAAA,IAAQxT,GAAQ,KAGtCkT,EAAO/C,SAAQ,CAACnQ,EAAOqV,KAEnB,IAAIL,EAAwBvD,EAAexC,OAAOoG,GAE7CL,EAAMM,QAOE,MAATtV,EACA6U,EAAO5H,KAAK,MACc,UAAnB+H,EAAMO,UAA2C,UAAnBP,EAAMO,SAC3ClH,GAAO2C,mBAAmB,gDAAkD,YAAcgE,EAAMhK,KAAOhL,GAChGiK,MAAMuL,QAAQxV,GACrB6U,EAAO5H,KAAKjN,EAAM6P,KAAK7P,GAAU+U,EAAYC,EAAOhV,MAEpD6U,EAAO5H,KAAK8H,EAAYC,EAAOhV,IAblB,MAATA,GACAqO,GAAO2C,mBAAmB,qDAAuD,YAAcgE,EAAMhK,KAAOhL,E,IAiBxH,MAAO6U,EAAOxK,QAAwC,OAA9BwK,EAAOA,EAAOxK,OAAS,GAC3CwK,EAAOtH,MAGX,OAAOsH,CACX,CAEAY,cAAAA,CAAehE,EAAuCyB,GACpB,kBAAnBzB,IACPA,EAAgB,KAAKa,SAASb,IAGlC,MAAMoD,EAAwB,GAExBa,EAA8B,GAC9BC,EAA4B,GA6BlC,OA3BKlE,EAAcqD,WACfD,EAAO5H,KAAK,KAAKuE,cAAcC,IAG/ByB,EAAO7I,SAAWoH,EAAcxC,OAAO5E,QACvCgE,GAAO2C,mBAAmB,kCAAmC,SAAUkC,GAG3EzB,EAAcxC,OAAOkB,SAAQ,CAAC6E,EAAOK,KACjC,MAAMrV,EAAQkT,EAAOmC,GACrB,GAAIL,EAAMM,QACN,GAAmB,WAAfN,EAAM3E,KACNwE,EAAO5H,KAAKgB,GAAGjO,SACZ,GAAmB,UAAfgV,EAAM3E,KACbwE,EAAO5H,MAAKkB,EAAAA,GAAAA,GAAUnO,QACnB,IAAuB,UAAnBgV,EAAMO,UAA2C,UAAnBP,EAAMO,SAE3C,MAAM,IAAIzV,MAAM,mBAEhB+U,EAAO5H,KAAK,KAAK8F,UAAUI,OAAO,CAAE6B,EAAM3E,MAAQ,CAAErQ,I,MAGxD0V,EAAUzI,KAAK+H,GACfW,EAAW1I,KAAKjN,E,IAIjB,CACH8S,KAAM,KAAKC,UAAUI,OAAOuC,EAAYC,GACxCd,OAAQA,EAEhB,CAGAe,cAAAA,CAAenE,EAAuCqB,EAAiB+B,GAKnE,GAJ8B,kBAAnBpD,IACPA,EAAgB,KAAKa,SAASb,IAGpB,MAAVoD,IAAmBpD,EAAcqD,UAAW,CAC5C,IAAIe,EAAY,KAAKrE,cAAcC,IAC9BG,EAAAA,GAAAA,IAAYiD,EAAO,GAAI,KAAOA,EAAO,GAAGhJ,gBAAkBgK,GAC3DxH,GAAOiG,WAAW,0BAA2BhG,GAAAA,GAAOoC,OAAOoF,iBAAkB,CAAElB,SAAU,YAAamB,SAAUF,EAAW7V,MAAO6U,EAAO,KAE7IA,EAASA,EAAOpB,MAAM,E,CAG1B,IAAI6B,EAA4B,GAC5BU,EAA+B,GAC/BC,EAA0B,GAE9BxE,EAAcxC,OAAOkB,SAAQ,CAAC6E,EAAOK,KAC7BL,EAAMM,QACa,WAAfN,EAAM3E,MAAoC,UAAf2E,EAAM3E,MAAuC,UAAnB2E,EAAMO,UAA2C,UAAnBP,EAAMO,UACzFD,EAAQrI,KAAKiJ,GAAAA,GAAUC,WAAW,CAAE9F,KAAM,UAAWrF,KAAMgK,EAAMhK,QACjEiL,EAAQhJ,MAAK,KAEbqI,EAAQrI,KAAK+H,GACbiB,EAAQhJ,MAAK,KAGjB+I,EAAW/I,KAAK+H,GAChBiB,EAAQhJ,MAAK,G,IAIrB,IAAImJ,EAA2B,MAAVvB,EAAkB,KAAK9B,UAAUC,OAAOsC,GAASrV,EAAAA,GAAAA,IAAO4U,IAAU,KACnFwB,EAAmB,KAAKtD,UAAUC,OAAOgD,EAAYlD,GAAM,GAE3DxI,EAAkD,GAClDgM,EAAkB,EAAGC,EAAe,EACxC9E,EAAcxC,OAAOkB,SAAQ,CAAC6E,EAAOK,KACjC,GAAIL,EAAMM,QACN,GAAqB,MAAjBc,EACA9L,EAAO+K,GAAS,IAAIzG,GAAQ,CAAEE,YAAY,EAAM0H,KAAM,YAEnD,GAAIP,EAAQZ,GACf/K,EAAO+K,GAAS,IAAIzG,GAAQ,CAAEE,YAAY,EAAM0H,KAAMJ,EAAcG,YAGpE,IACIjM,EAAO+K,GAASe,EAAcG,I,CAChC,MAAOhL,GACLjB,EAAO+K,GAAS9J,C,MAIxB,IACIjB,EAAO+K,GAASgB,EAAiBC,I,CACnC,MAAO/K,GACLjB,EAAO+K,GAAS9J,C,CAKxB,GAAIyJ,EAAMhK,MAA8B,MAAtBV,EAAO0K,EAAMhK,MAAe,CAC1C,MAAMhL,EAAQsK,EAAO+K,GAGjBrV,aAAiBF,MACjBkS,OAAOyE,eAAenM,EAAQ0K,EAAMhK,KAAM,CACtC0L,YAAY,EACZvO,IAAKA,KAAQ,MAAMgH,GAAgB,YAAaO,KAAKwB,UAAU8D,EAAMhK,QAAUhL,EAAM,IAGzFsK,EAAO0K,EAAMhK,MAAQhL,C,KAMjC,IAAK,IAAI2W,EAAI,EAAGA,EAAIrM,EAAOD,OAAQsM,IAAK,CACpC,MAAM3W,EAAQsK,EAAOqM,GACjB3W,aAAiBF,OACjBkS,OAAOyE,eAAenM,EAAQqM,EAAG,CAC7BD,YAAY,EACZvO,IAAKA,KAAQ,MAAMgH,GAAgB,SAAUwH,IAAM3W,EAAM,G,CAKrE,OAAOgS,OAAO4E,OAAOtM,EACzB,CAIAuM,gBAAAA,CAAiBC,GACb,IAAIhH,EAAW,KAAK4B,YAAYoF,EAAGhE,KAAKiE,UAAU,EAAG,IAAIlL,eAEzD,OAAKiE,EAEE,IAAIpB,GAAuB,CAC9B1E,KAAM,KAAK+I,UAAUC,OAAOlD,EAASb,OAAQ,KAAO6H,EAAGhE,KAAKiE,UAAU,KACtEnD,iBAAkB9D,EAClB9E,KAAM8E,EAAS9E,KACfgE,UAAWc,EAAS5I,SACpB6J,QAAS,KAAKO,WAAWxB,GACzB9P,MAAOkV,GAAAA,GAAUlF,KAAK8G,EAAG9W,OAAS,OARd,IAU5B,CAOAgX,QAAAA,CAASC,GACL,IAAInH,EAAW,KAAKwC,SAAS2E,EAAIpC,OAAO,IAExC,OAAK/E,GAAYA,EAASgF,UAAoB,KAOxC,IAAItG,GAAe,CACrBiD,cAAe3B,EACf9E,KAAM8E,EAAS9E,KACfgE,UAAWc,EAAS5I,SACpBgQ,MAAO,KAAK1F,cAAc1B,GAC1B9F,KAAM,KAAK4L,eAAe9F,EAAUmH,EAAInE,KAAMmE,EAAIpC,SAE1D,CAEAsC,UAAAA,CAAWrE,GACP,MAAMsE,GAAU5D,EAAAA,GAAAA,IAAQV,GACxB,IAAIhD,EAAW,KAAK4C,SAAS0E,EAAQL,UAAU,EAAG,IAAIlL,eAEtD,OAAKiE,EAEE,IAAInB,GAAiB,CACxB3E,KAAM,KAAK+I,UAAUC,OAAOlD,EAASb,OAAQ,KAAOmI,EAAQL,UAAU,KACtEM,cAAevH,EACf9E,KAAM8E,EAAS9E,KACfgE,UAAWc,EAAS5I,SACpB6J,QAAS,KAAKO,WAAWxB,KAPL,IAS5B,CAeA,kBAAOwH,CAAYtX,GACf,SAAUA,IAASA,EAAMuX,aAC7B,ECxsBG,MAAMhJ,GAAU,iBCQjBiJ,GAAa,IAAIC,OAAO,mBACxBC,GAAc,IAAID,OAAO,qBACzBE,GAAa,IAAIF,OAAO,wBAExBG,GAAQ,mEAIRvJ,GAAS,IAAIC,GAAAA,GAAOC,IAG1B,SAASsJ,GAAMxH,EAAcrQ,EAAYwV,GACrC,OAAOnF,GACH,IAAK,UACD,OAAImF,GAAkBsC,EAAAA,GAAAA,IAAQ9X,EAAO,KAC9BuT,EAAAA,GAAAA,IAASvT,GACpB,IAAK,SACD,OAAOoO,EAAAA,GAAAA,IAAYpO,GACvB,IAAK,QACD,OAAOuT,EAAAA,GAAAA,IAASvT,GACpB,IAAK,OAED,OADAA,EAASA,EAAQ,OAAQ,OACrBwV,GAAkBsC,EAAAA,GAAAA,IAAQ9X,EAAO,KAC9BuT,EAAAA,GAAAA,IAASvT,GAGxB,IAAIiV,EAAS5E,EAAK4E,MAAMyC,IACxB,GAAIzC,EAAO,CAEP,IAAI8C,EAAOC,SAAS/C,EAAM,IAAM,OAUhC,OARKA,EAAM,IAAMgD,OAAOF,KAAU9C,EAAM,IAAQ8C,EAAO,IAAM,GAAe,IAATA,GAAcA,EAAO,MACpF1J,GAAO2C,mBAAmB,sBAAuB,OAAQX,GAGzDmF,IAAWuC,EAAO,KAEtB/X,EAAQkV,GAAAA,GAAUlF,KAAKhQ,GAAOkY,OAAOH,IAE9BD,EAAAA,GAAAA,IAAQ9X,EAAO+X,EAAO,E,CAIjC,GADA9C,EAAQ5E,EAAK4E,MAAMuC,IACfvC,EAAO,CACP,MAAM8C,EAAOC,SAAS/C,EAAM,IAQ5B,OANIgD,OAAOF,KAAU9C,EAAM,IAAe,IAAT8C,GAAcA,EAAO,KAClD1J,GAAO2C,mBAAmB,qBAAsB,OAAQX,IAExDkD,EAAAA,GAAAA,IAASvT,GAAOmY,aAAeJ,GAC/B1J,GAAO2C,mBAAmB,qBAAsBX,IAAS,QAASrQ,GAElEwV,GAAkBjC,EAAAA,GAAAA,KAAUvT,EAAQ4X,IAAOb,UAAU,EAAG,KACrD/W,C,CAIX,GADAiV,EAAQ5E,EAAK4E,MAAM0C,IACf1C,GAAShL,MAAMuL,QAAQxV,GAAQ,CAC/B,MAAMuV,EAAWN,EAAM,GACjBmD,EAAQJ,SAAS/C,EAAM,IAAMgD,OAAOjY,EAAMqK,SAC5C+N,GAASpY,EAAMqK,QACfgE,GAAO2C,mBAAmB,4BAA6BX,IAAS,QAASrQ,GAE7E,MAAMsK,EAA4B,GAIlC,OAHAtK,EAAMmQ,SAAQ,SAASnQ,GACnBsK,EAAO2C,KAAK4K,GAAMtC,EAAUvV,GAAO,GACvC,KACOC,EAAAA,GAAAA,IAAOqK,E,CAGlB,OAAO+D,GAAO2C,mBAAmB,eAAgB,OAAQX,EAC7D,CAIM,SAAUgI,GAAKC,EAA8BpF,GAC3CoF,EAAMjO,QAAU6I,EAAO7I,QACvBgE,GAAO2C,mBAAmB,qDAAsD,SAAUkC,GAE9F,MAAMqF,EAA2B,GAIjC,OAHAD,EAAMnI,SAAQ,SAASE,EAAMgF,GACzBkD,EAAMtL,KAAK4K,GAAMxH,EAAM6C,EAAOmC,IAClC,KACO7B,EAAAA,GAAAA,KAAQvT,EAAAA,GAAAA,IAAOsY,GAC1B,CAEM,SAAUpK,GAAUmK,EAA8BpF,GACpD,OAAOsF,EAAAA,GAAAA,GAAcH,GAAKC,EAAOpF,GACrC,C,sjwCjBvFYuF,G,mBkBFZ,IAAIC,EAAW,SAAUC,GAGvB,IAEIC,EAFAC,EAAK7G,OAAO3L,UACZyS,EAASD,EAAGE,eAEZC,EAA4B,oBAAXC,OAAwBA,OAAS,CAAC,EACnDC,EAAiBF,EAAQG,UAAY,aACrCC,EAAsBJ,EAAQK,eAAiB,kBAC/CC,EAAoBN,EAAQO,aAAe,gBAE/C,SAASC,EAAOC,EAAKvR,EAAKlI,GAOxB,OANAgS,OAAOyE,eAAegD,EAAKvR,EAAK,CAC9BlI,MAAOA,EACP0W,YAAY,EACZgD,cAAc,EACdC,UAAU,IAELF,EAAIvR,EACf,CACE,IAEEsR,EAAO,CAAC,EAAG,GACf,CAAI,MAAOI,GACPJ,EAAS,SAASC,EAAKvR,EAAKlI,GAC1B,OAAOyZ,EAAIvR,GAAOlI,CACxB,CACA,CAEE,SAASqP,EAAKwK,EAASC,EAASC,EAAMC,GAEpC,IAAIC,EAAiBH,GAAWA,EAAQzT,qBAAqB6T,EAAYJ,EAAUI,EAC/EC,EAAYnI,OAAOoI,OAAOH,EAAe5T,WACzCgU,EAAU,IAAIC,EAAQN,GAAe,IAMzC,OAFAG,EAAUI,QAAUC,EAAiBX,EAASE,EAAMM,GAE7CF,CACX,CAaE,SAASM,EAASC,EAAIjB,EAAKkB,GACzB,IACE,MAAO,CAAEtK,KAAM,SAAUsK,IAAKD,EAAGjS,KAAKgR,EAAKkB,GACjD,CAAM,MAAOf,GACP,MAAO,CAAEvJ,KAAM,QAASsK,IAAKf,EACnC,CACA,CAlBEjB,EAAQtJ,KAAOA,EAoBf,IAAIuL,EAAyB,iBACzBC,EAAyB,iBACzBC,EAAoB,YACpBC,EAAoB,YAIpBC,EAAmB,CAAC,EAMxB,SAASd,IAAa,CACtB,SAASe,IAAqB,CAC9B,SAASC,IAA8B,CAIvC,IAAIC,EAAoB,CAAC,EACzBA,EAAkBjC,GAAkB,WAClC,OAAO9Z,IACX,EAEE,IAAIgc,EAAWpJ,OAAOqJ,eAClBC,EAA0BF,GAAYA,EAASA,EAASlI,EAAO,MAC/DoI,GACAA,IAA4BzC,GAC5BC,EAAOrQ,KAAK6S,EAAyBpC,KAGvCiC,EAAoBG,GAGtB,IAAIC,EAAKL,EAA2B7U,UAClC6T,EAAU7T,UAAY2L,OAAOoI,OAAOe,GAWtC,SAASK,EAAsBnV,GAC7B,CAAC,OAAQ,QAAS,UAAU8J,SAAQ,SAASqE,GAC3CgF,EAAOnT,EAAWmO,GAAQ,SAASmG,GACjC,OAAOvb,KAAKmb,QAAQ/F,EAAQmG,EACpC,GACA,GACA,CA+BE,SAASc,EAActB,EAAWuB,GAChC,SAASC,EAAOnH,EAAQmG,EAAKiB,EAASC,GACpC,IAAIC,EAASrB,EAASN,EAAU3F,GAAS2F,EAAWQ,GACpD,GAAoB,UAAhBmB,EAAOzL,KAEJ,CACL,IAAI/F,EAASwR,EAAOnB,IAChB3a,EAAQsK,EAAOtK,MACnB,OAAIA,GACiB,kBAAVA,GACP8Y,EAAOrQ,KAAKzI,EAAO,WACd0b,EAAYE,QAAQ5b,EAAM+b,SAASC,MAAK,SAAShc,GACtD2b,EAAO,OAAQ3b,EAAO4b,EAASC,EAC3C,IAAa,SAASjC,GACV+B,EAAO,QAAS/B,EAAKgC,EAASC,EAC1C,IAGeH,EAAYE,QAAQ5b,GAAOgc,MAAK,SAASC,GAI9C3R,EAAOtK,MAAQic,EACfL,EAAQtR,EAClB,IAAW,SAASiB,GAGV,OAAOoQ,EAAO,QAASpQ,EAAOqQ,EAASC,EACjD,GACA,CAzBQA,EAAOC,EAAOnB,IA0BtB,CAEI,IAAIuB,EAEJ,SAASC,EAAQ3H,EAAQmG,GACvB,SAASyB,IACP,OAAO,IAAIV,GAAY,SAASE,EAASC,GACvCF,EAAOnH,EAAQmG,EAAKiB,EAASC,EACvC,GACA,CAEM,OAAOK,EAaLA,EAAkBA,EAAgBF,KAChCI,EAGAA,GACEA,GACZ,CAIIhd,KAAKmb,QAAU4B,CACnB,CA0BE,SAAS3B,EAAiBX,EAASE,EAAMM,GACvC,IAAIgC,EAAQzB,EAEZ,OAAO,SAAgBpG,EAAQmG,GAC7B,GAAI0B,IAAUvB,EACZ,MAAM,IAAIhb,MAAM,gCAGlB,GAAIuc,IAAUtB,EAAmB,CAC/B,GAAe,UAAXvG,EACF,MAAMmG,EAKR,OAAO2B,GACf,CAEMjC,EAAQ7F,OAASA,EACjB6F,EAAQM,IAAMA,EAEd,MAAO,EAAM,CACX,IAAI4B,EAAWlC,EAAQkC,SACvB,GAAIA,EAAU,CACZ,IAAIC,EAAiBC,EAAoBF,EAAUlC,GACnD,GAAImC,EAAgB,CAClB,GAAIA,IAAmBxB,EAAkB,SACzC,OAAOwB,CACnB,CACA,CAEQ,GAAuB,SAAnBnC,EAAQ7F,OAGV6F,EAAQqC,KAAOrC,EAAQsC,MAAQtC,EAAQM,SAElC,GAAuB,UAAnBN,EAAQ7F,OAAoB,CACrC,GAAI6H,IAAUzB,EAEZ,MADAyB,EAAQtB,EACFV,EAAQM,IAGhBN,EAAQuC,kBAAkBvC,EAAQM,IAE5C,KAAsC,WAAnBN,EAAQ7F,QACjB6F,EAAQwC,OAAO,SAAUxC,EAAQM,KAGnC0B,EAAQvB,EAER,IAAIgB,EAASrB,EAASZ,EAASE,EAAMM,GACrC,GAAoB,WAAhByB,EAAOzL,KAAmB,CAO5B,GAJAgM,EAAQhC,EAAQyC,KACZ/B,EACAF,EAEAiB,EAAOnB,MAAQK,EACjB,SAGF,MAAO,CACLhb,MAAO8b,EAAOnB,IACdmC,KAAMzC,EAAQyC,KAG1B,CAAmC,UAAhBhB,EAAOzL,OAChBgM,EAAQtB,EAGRV,EAAQ7F,OAAS,QACjB6F,EAAQM,IAAMmB,EAAOnB,IAE/B,CACA,CACA,CAME,SAAS8B,EAAoBF,EAAUlC,GACrC,IAAI7F,EAAS+H,EAASpD,SAASkB,EAAQ7F,QACvC,GAAIA,IAAWoE,EAAW,CAKxB,GAFAyB,EAAQkC,SAAW,KAEI,UAAnBlC,EAAQ7F,OAAoB,CAE9B,GAAI+H,EAASpD,SAAS,YAGpBkB,EAAQ7F,OAAS,SACjB6F,EAAQM,IAAM/B,EACd6D,EAAoBF,EAAUlC,GAEP,UAAnBA,EAAQ7F,QAGV,OAAOwG,EAIXX,EAAQ7F,OAAS,QACjB6F,EAAQM,IAAM,IAAIoC,UAChB,iDACV,CAEM,OAAO/B,CACb,CAEI,IAAIc,EAASrB,EAASjG,EAAQ+H,EAASpD,SAAUkB,EAAQM,KAEzD,GAAoB,UAAhBmB,EAAOzL,KAIT,OAHAgK,EAAQ7F,OAAS,QACjB6F,EAAQM,IAAMmB,EAAOnB,IACrBN,EAAQkC,SAAW,KACZvB,EAGT,IAAIgC,EAAOlB,EAAOnB,IAElB,OAAMqC,EAOFA,EAAKF,MAGPzC,EAAQkC,EAASU,YAAcD,EAAKhd,MAGpCqa,EAAQ6C,KAAOX,EAASY,QAQD,WAAnB9C,EAAQ7F,SACV6F,EAAQ7F,OAAS,OACjB6F,EAAQM,IAAM/B,GAUlByB,EAAQkC,SAAW,KACZvB,GANEgC,GA3BP3C,EAAQ7F,OAAS,QACjB6F,EAAQM,IAAM,IAAIoC,UAAU,oCAC5B1C,EAAQkC,SAAW,KACZvB,EA+Bb,CAqBE,SAASoC,EAAaC,GACpB,IAAIC,EAAQ,CAAEC,OAAQF,EAAK,IAEvB,KAAKA,IACPC,EAAME,SAAWH,EAAK,IAGpB,KAAKA,IACPC,EAAMG,WAAaJ,EAAK,GACxBC,EAAMI,SAAWL,EAAK,IAGxBje,KAAKue,WAAW1Q,KAAKqQ,EACzB,CAEE,SAASM,EAAcN,GACrB,IAAIxB,EAASwB,EAAMO,YAAc,CAAC,EAClC/B,EAAOzL,KAAO,gBACPyL,EAAOnB,IACd2C,EAAMO,WAAa/B,CACvB,CAEE,SAASxB,EAAQN,GAIf5a,KAAKue,WAAa,CAAC,CAAEJ,OAAQ,SAC7BvD,EAAY7J,QAAQiN,EAAche,MAClCA,KAAK0e,OAAM,EACf,CA6BE,SAAS5K,EAAO6K,GACd,GAAIA,EAAU,CACZ,IAAIC,EAAiBD,EAAS7E,GAC9B,GAAI8E,EACF,OAAOA,EAAevV,KAAKsV,GAG7B,GAA6B,oBAAlBA,EAASb,KAClB,OAAOa,EAGT,IAAKE,MAAMF,EAAS1T,QAAS,CAC3B,IAAIsM,GAAK,EAAGuG,EAAO,SAASA,IAC1B,QAASvG,EAAIoH,EAAS1T,OACpB,GAAIyO,EAAOrQ,KAAKsV,EAAUpH,GAGxB,OAFAuG,EAAKld,MAAQ+d,EAASpH,GACtBuG,EAAKJ,MAAO,EACLI,EAOX,OAHAA,EAAKld,MAAQ4Y,EACbsE,EAAKJ,MAAO,EAELI,CACjB,EAEQ,OAAOA,EAAKA,KAAOA,CAC3B,CACA,CAGI,MAAO,CAAEA,KAAMZ,EACnB,CAGE,SAASA,IACP,MAAO,CAAEtc,MAAO4Y,EAAWkE,MAAM,EACrC,CA8ME,OA5mBA7B,EAAkB5U,UAAYkV,EAAGhM,YAAc2L,EAC/CA,EAA2B3L,YAAc0L,EACzCA,EAAkBiD,YAAc1E,EAC9B0B,EACA5B,EACA,qBAaFX,EAAQwF,oBAAsB,SAASC,GACrC,IAAIC,EAAyB,oBAAXD,GAAyBA,EAAO7O,YAClD,QAAO8O,IACHA,IAASpD,GAG2B,uBAAnCoD,EAAKH,aAAeG,EAAKrT,MAElC,EAEE2N,EAAQ2F,KAAO,SAASF,GAQtB,OAPIpM,OAAOuM,eACTvM,OAAOuM,eAAeH,EAAQlD,IAE9BkD,EAAOI,UAAYtD,EACnB1B,EAAO4E,EAAQ9E,EAAmB,sBAEpC8E,EAAO/X,UAAY2L,OAAOoI,OAAOmB,GAC1B6C,CACX,EAMEzF,EAAQ8F,MAAQ,SAAS9D,GACvB,MAAO,CAAEoB,QAASpB,EACtB,EAqEEa,EAAsBC,EAAcpV,WACpCoV,EAAcpV,UAAU+S,GAAuB,WAC7C,OAAOha,IACX,EACEuZ,EAAQ8C,cAAgBA,EAKxB9C,EAAQ+F,MAAQ,SAAS7E,EAASC,EAASC,EAAMC,EAAa0B,QACxC,IAAhBA,IAAwBA,EAAciD,SAE1C,IAAIC,EAAO,IAAInD,EACbpM,EAAKwK,EAASC,EAASC,EAAMC,GAC7B0B,GAGF,OAAO/C,EAAQwF,oBAAoBrE,GAC/B8E,EACAA,EAAK1B,OAAOlB,MAAK,SAAS1R,GACxB,OAAOA,EAAOwS,KAAOxS,EAAOtK,MAAQ4e,EAAK1B,MACnD,GACA,EAqKE1B,EAAsBD,GAEtB/B,EAAO+B,EAAIjC,EAAmB,aAO9BiC,EAAGrC,GAAkB,WACnB,OAAO9Z,IACX,EAEEmc,EAAG7T,SAAW,WACZ,MAAO,oBACX,EAiCEiR,EAAQ1G,KAAO,SAAS4M,GACtB,IAAI5M,EAAO,GACX,IAAK,IAAI/J,KAAO2W,EACd5M,EAAKhF,KAAK/E,GAMZ,OAJA+J,EAAK6M,UAIE,SAAS5B,IACd,MAAOjL,EAAK5H,OAAQ,CAClB,IAAInC,EAAM+J,EAAK1E,MACf,GAAIrF,KAAO2W,EAGT,OAFA3B,EAAKld,MAAQkI,EACbgV,EAAKJ,MAAO,EACLI,CAEjB,CAMM,OADAA,EAAKJ,MAAO,EACLI,CACb,CACA,EAoCEvE,EAAQzF,OAASA,EAMjBoH,EAAQjU,UAAY,CAClBkJ,YAAa+K,EAEbwD,MAAO,SAASiB,GAcd,GAbA3f,KAAK4f,KAAO,EACZ5f,KAAK8d,KAAO,EAGZ9d,KAAKsd,KAAOtd,KAAKud,MAAQ/D,EACzBxZ,KAAK0d,MAAO,EACZ1d,KAAKmd,SAAW,KAEhBnd,KAAKoV,OAAS,OACdpV,KAAKub,IAAM/B,EAEXxZ,KAAKue,WAAWxN,QAAQyN,IAEnBmB,EACH,IAAK,IAAI/T,KAAQ5L,KAEQ,MAAnB4L,EAAKiU,OAAO,IACZnG,EAAOrQ,KAAKrJ,KAAM4L,KACjBiT,OAAOjT,EAAKyI,MAAM,MACrBrU,KAAK4L,GAAQ4N,EAIzB,EAEIsG,KAAM,WACJ9f,KAAK0d,MAAO,EAEZ,IAAIqC,EAAY/f,KAAKue,WAAW,GAC5ByB,EAAaD,EAAUtB,WAC3B,GAAwB,UAApBuB,EAAW/O,KACb,MAAM+O,EAAWzE,IAGnB,OAAOvb,KAAKigB,IAClB,EAEIzC,kBAAmB,SAAS0C,GAC1B,GAAIlgB,KAAK0d,KACP,MAAMwC,EAGR,IAAIjF,EAAUjb,KACd,SAASmgB,EAAOC,EAAKC,GAYnB,OAXA3D,EAAOzL,KAAO,QACdyL,EAAOnB,IAAM2E,EACbjF,EAAQ6C,KAAOsC,EAEXC,IAGFpF,EAAQ7F,OAAS,OACjB6F,EAAQM,IAAM/B,KAGN6G,CAClB,CAEM,IAAK,IAAI9I,EAAIvX,KAAKue,WAAWtT,OAAS,EAAGsM,GAAK,IAAKA,EAAG,CACpD,IAAI2G,EAAQle,KAAKue,WAAWhH,GACxBmF,EAASwB,EAAMO,WAEnB,GAAqB,SAAjBP,EAAMC,OAIR,OAAOgC,EAAO,OAGhB,GAAIjC,EAAMC,QAAUne,KAAK4f,KAAM,CAC7B,IAAIU,EAAW5G,EAAOrQ,KAAK6U,EAAO,YAC9BqC,EAAa7G,EAAOrQ,KAAK6U,EAAO,cAEpC,GAAIoC,GAAYC,EAAY,CAC1B,GAAIvgB,KAAK4f,KAAO1B,EAAME,SACpB,OAAO+B,EAAOjC,EAAME,UAAU,GACzB,GAAIpe,KAAK4f,KAAO1B,EAAMG,WAC3B,OAAO8B,EAAOjC,EAAMG,WAGlC,MAAiB,GAAIiC,GACT,GAAItgB,KAAK4f,KAAO1B,EAAME,SACpB,OAAO+B,EAAOjC,EAAME,UAAU,OAG3B,KAAImC,EAMT,MAAM,IAAI7f,MAAM,0CALhB,GAAIV,KAAK4f,KAAO1B,EAAMG,WACpB,OAAO8B,EAAOjC,EAAMG,WAKlC,CACA,CACA,CACA,EAEIZ,OAAQ,SAASxM,EAAMsK,GACrB,IAAK,IAAIhE,EAAIvX,KAAKue,WAAWtT,OAAS,EAAGsM,GAAK,IAAKA,EAAG,CACpD,IAAI2G,EAAQle,KAAKue,WAAWhH,GAC5B,GAAI2G,EAAMC,QAAUne,KAAK4f,MACrBlG,EAAOrQ,KAAK6U,EAAO,eACnBle,KAAK4f,KAAO1B,EAAMG,WAAY,CAChC,IAAImC,EAAetC,EACnB,KACV,CACA,CAEUsC,IACU,UAATvP,GACS,aAATA,IACDuP,EAAarC,QAAU5C,GACvBA,GAAOiF,EAAanC,aAGtBmC,EAAe,MAGjB,IAAI9D,EAAS8D,EAAeA,EAAa/B,WAAa,CAAC,EAIvD,OAHA/B,EAAOzL,KAAOA,EACdyL,EAAOnB,IAAMA,EAETiF,GACFxgB,KAAKoV,OAAS,OACdpV,KAAK8d,KAAO0C,EAAanC,WAClBzC,GAGF5b,KAAKygB,SAAS/D,EAC3B,EAEI+D,SAAU,SAAS/D,EAAQ4B,GACzB,GAAoB,UAAhB5B,EAAOzL,KACT,MAAMyL,EAAOnB,IAcf,MAXoB,UAAhBmB,EAAOzL,MACS,aAAhByL,EAAOzL,KACTjR,KAAK8d,KAAOpB,EAAOnB,IACM,WAAhBmB,EAAOzL,MAChBjR,KAAKigB,KAAOjgB,KAAKub,IAAMmB,EAAOnB,IAC9Bvb,KAAKoV,OAAS,SACdpV,KAAK8d,KAAO,OACa,WAAhBpB,EAAOzL,MAAqBqN,IACrCte,KAAK8d,KAAOQ,GAGP1C,CACb,EAEI8E,OAAQ,SAASrC,GACf,IAAK,IAAI9G,EAAIvX,KAAKue,WAAWtT,OAAS,EAAGsM,GAAK,IAAKA,EAAG,CACpD,IAAI2G,EAAQle,KAAKue,WAAWhH,GAC5B,GAAI2G,EAAMG,aAAeA,EAGvB,OAFAre,KAAKygB,SAASvC,EAAMO,WAAYP,EAAMI,UACtCE,EAAcN,GACPtC,CAEjB,CACA,EAEI,MAAS,SAASuC,GAChB,IAAK,IAAI5G,EAAIvX,KAAKue,WAAWtT,OAAS,EAAGsM,GAAK,IAAKA,EAAG,CACpD,IAAI2G,EAAQle,KAAKue,WAAWhH,GAC5B,GAAI2G,EAAMC,SAAWA,EAAQ,CAC3B,IAAIzB,EAASwB,EAAMO,WACnB,GAAoB,UAAhB/B,EAAOzL,KAAkB,CAC3B,IAAI0P,EAASjE,EAAOnB,IACpBiD,EAAcN,EAC1B,CACU,OAAOyC,CACjB,CACA,CAIM,MAAM,IAAIjgB,MAAM,wBACtB,EAEIkgB,cAAe,SAASjC,EAAUd,EAAYE,GAa5C,OAZA/d,KAAKmd,SAAW,CACdpD,SAAUjG,EAAO6K,GACjBd,WAAYA,EACZE,QAASA,GAGS,SAAhB/d,KAAKoV,SAGPpV,KAAKub,IAAM/B,GAGNoC,CACb,GAOSrC,CAET,CA/sBe,CAotBgBsH,EAAOtH,SAGtC,IACEuH,mBAAqBxH,CACvB,CAAE,MAAOyH,GAUPC,SAAS,IAAK,yBAAdA,CAAwC1H,EAC1C,C,IlB3uBa2H,GAAkB,6CAElBC,GAAe,6CAEfC,GAAsB,sEAKnC,SAAY9H,GACVA,EAAAA,EAAA,wBACAA,EAAAA,EAAA,kBACAA,EAAAA,EAAA,wBACAA,EAAAA,EAAA,mBAJF,GAAYA,KAAAA,GAAS,KAUrB,IAAa+H,IAAaC,GAAA,GAAAA,GACvBhI,GAAUiI,QAAS,EADID,GAEvBhI,GAAUkI,KAAM,GAFOF,GAGvBhI,GAAUmI,QAAS,GAHIH,GAIvBhI,GAAUoI,MAAO,IAJMJ,ImBhBbK,GAAe5b,IAAAA,QAAa,GAC5BuI,GAAOvI,IAAAA,OAAY,GACnBwI,GAAMxI,IAAAA,OAAY,GAGlB6b,GAAM7b,IAAAA,aAAkBA,IAAAA,OAAY,GAAIA,IAAAA,OAAY,KACpD8b,GAAO9b,IAAAA,aAAkB6b,GAAK7b,IAAAA,OAAY,ICMvD,SAAgB+b,GAAAxW,G,IACdyW,EAAAzW,EAAAyW,eACAC,EAAA1W,EAAA0W,OACAC,EAAA3W,EAAA2W,OACAC,EAAA5W,EAAA4W,IACAC,EAAA7W,EAAA6W,2B,EAQyBH,EAAOrV,YAAYsV,GAAU,CAACD,EAAQC,GAAU,CAACA,EAAQD,GAA3EI,EAAAC,EAAA,GAAQC,EAAAD,EAAA,GACf,OAAOE,EAAAA,EAAAA,IACLR,EACA/S,GACE,CAAC,SACD,CAACkD,GAAAA,EAAgB8B,OAAO,CAAC,UAAW,UAAW,UAAW,CAACoO,EAAOjgB,QAASmgB,EAAOngB,QAAS+f,MAJvE,MAMtBC,EAAAA,EAA8Bf,GAEjC,C,IClCqBoB,GAAtB,WAIE,SAAAA,IAAA,CAJF,OAAAA,EAMgBC,SAAP,SAAgB5T,EAAS6T,GAC9B,OAAI3c,IAAAA,SAAc2c,EAAGpU,IACZvI,IAAAA,SAAc8I,EAAG9I,IAAAA,SAAc2c,EAAGf,KAElC5b,IAAAA,IAAS8I,EAAG6T,EAEtB,EAZHF,CAAA,ICAsBG,GAAtB,WAIE,SAAAA,IAAA,CAJF,OAAAA,EAMgBC,iBAAP,SAAwBC,EAASC,EAAShc,GAC/C,IAAMic,EAAUhd,IAAAA,SAAc8c,EAAGC,GAC7B3X,EAASpF,IAAAA,OAAYgd,EAASjc,GAElC,OADIf,IAAAA,SAAcA,IAAAA,UAAegd,EAASjc,GAAcwH,MAAOnD,EAASpF,IAAAA,IAASoF,EAAQoD,KAClFpD,CACR,EAXHwX,CAAA,ICGMK,GAAajd,IAAAA,SAAcA,IAAAA,aAAkBA,IAAAA,OAAY,GAAIA,IAAAA,OAAY,MAAOwI,IAEtF,SAAS0U,GAAcpU,EAAS6T,GAC9B,IAAMK,EAAUhd,IAAAA,SAAc8I,EAAG6T,GACjC,OAAO3c,IAAAA,WAAgBgd,EAASjd,GACjC,CAED,SAASod,GAASrU,EAAS6T,GACzB,IAAMS,EAAMpd,IAAAA,IAAS8I,EAAG6T,GACxB,OAAO3c,IAAAA,WAAgBod,EAAKrd,GAC7B,CAED,IAAsBsd,GAAtB,WAIE,SAAAA,IAAA,CAJF,OAAAA,EAMgBC,gBAAP,SAAuBC,EAAqBC,EAAqBC,EAAiBC,GACvF,GAAI1d,IAAAA,YAAiBud,EAAeC,GAAgB,KAAAjY,EAChB,CAACiY,EAAeD,GAAhDA,EADgDhY,EAAA,GACjCiY,EADiCjY,EAAA,EAEnD,CAED,IAAMoY,EAAa3d,IAAAA,UAAeyd,EAAWzd,IAAAA,OAAY,KACnD4d,EAAa5d,IAAAA,SAAcwd,EAAeD,GAEhD,OAAOG,EACHd,GAASC,iBAAiBD,GAASC,iBAAiBc,EAAYC,EAAYJ,GAAgBhV,GAAK+U,GACjGvd,IAAAA,OAAYA,IAAAA,OAAYA,IAAAA,SAAc2d,EAAYC,GAAaJ,GAAgBD,EACpF,EAjBHF,EAmBgBQ,gBAAP,SAAuBN,EAAqBC,EAAqBC,EAAiBC,GACvF,GAAI1d,IAAAA,YAAiBud,EAAeC,GAAgB,KAAAlB,EAChB,CAACkB,EAAeD,GAAhDA,EADgDjB,EAAA,GACjCkB,EADiClB,EAAA,EAEnD,CAED,OAAOoB,EACHd,GAASC,iBAAiBY,EAAWzd,IAAAA,SAAcwd,EAAeD,GAAgB1B,IAClF7b,IAAAA,OAAYA,IAAAA,SAAcyd,EAAWzd,IAAAA,SAAcwd,EAAeD,IAAiB1B,GACxF,EA3BHwB,EA6BgBS,0BAAP,SAAiCC,EAAgBN,EAAiBO,EAAgBC,GAIvF,OAHUje,IAAAA,YAAiB+d,EAAUxV,KAArC9N,GAAU,GACAuF,IAAAA,YAAiByd,EAAWlV,KAAtC9N,GAAU,GAEHwjB,EACH/jB,KAAKgkB,sCAAsCH,EAAUN,EAAWO,GAAU,GAC1E9jB,KAAKikB,wCAAwCJ,EAAUN,EAAWO,GAAU,EACjF,EApCHX,EAsCgBe,2BAAP,SACLL,EACAN,EACAY,EACAJ,GAKA,OAHUje,IAAAA,YAAiB+d,EAAUxV,KAArC9N,GAAU,GACAuF,IAAAA,YAAiByd,EAAWlV,KAAtC9N,GAAU,GAEHwjB,EACH/jB,KAAKikB,wCAAwCJ,EAAUN,EAAWY,GAAW,GAC7EnkB,KAAKgkB,sCAAsCH,EAAUN,EAAWY,GAAW,EAChF,EAlDHhB,EAoDiBa,sCAAP,SACNH,EACAN,EACAa,EACAjd,GAEA,GAAIrB,IAAAA,MAAWse,EAAQ/V,IAAO,OAAOwV,EACrC,IAAMJ,EAAa3d,IAAAA,UAAeyd,EAAWzd,IAAAA,OAAY,KAEzD,GAAIqB,EAAK,CACP,IAAI2b,EAAUE,GAAcoB,EAAQP,GACpC,GAAI/d,IAAAA,MAAWA,IAAAA,OAAYgd,EAASsB,GAASP,GAAW,CACtD,IAAMhd,EAAcoc,GAASQ,EAAYX,GACzC,GAAIhd,IAAAA,mBAAwBe,EAAa4c,GACvC,OAAOf,GAASC,iBAAiBc,EAAYI,EAAUhd,EAE1D,CAED,OAAO6b,GAASC,iBAAiBc,EAAYnV,GAAKxI,IAAAA,IAASA,IAAAA,OAAY2d,EAAYI,GAAWO,GAC/F,CACC,IAAIC,EAAUrB,GAAcoB,EAAQP,GAE1B/d,IAAAA,MAAWA,IAAAA,OAAYue,EAASD,GAASP,IAAnDtjB,GAAU,GACAuF,IAAAA,YAAiB2d,EAAYY,IAAvC9jB,GAAU,GACV,IAAM+jB,EAAcxe,IAAAA,SAAc2d,EAAYY,GAC9C,OAAO3B,GAASC,iBAAiBc,EAAYI,EAAUS,EAE1D,EA/EHnB,EAiFiBc,wCAAP,SACNJ,EACAN,EACAa,EACAjd,GAEA,GAAIA,EAAK,CACP,IAAMkB,EAAWvC,IAAAA,gBAAqBse,EAAQrB,IAC1Cjd,IAAAA,OAAYA,IAAAA,UAAese,EAAQte,IAAAA,OAAY,KAAMyd,GACrDzd,IAAAA,OAAYA,IAAAA,SAAcse,EAAQzC,IAAM4B,GAE5C,OAAOzd,IAAAA,IAAS+d,EAAUxb,EAC3B,CACC,IAAMkc,EAAW7B,GAASC,iBAAiByB,EAAQzC,GAAK4B,GAGxD,OADUzd,IAAAA,YAAiB+d,EAAUU,IAArChkB,GAAU,GACHuF,IAAAA,SAAc+d,EAAUU,EAElC,EAnGHpB,CAAA,ICZMqB,GAAU1e,IAAAA,aAAkBA,IAAAA,OAAY,IAAKA,IAAAA,OAAY,IAEzC2e,GAAtB,WAIE,SAAAA,IAAA,CAJF,OAAAA,EAMgBC,gBAAP,SACLC,EACAC,EACArB,EACAsB,EACAC,GAEA,IAAMC,EAKD,CAAC,EAEAhB,EAAaje,IAAAA,mBAAwB6e,EAAqBC,GAC1DI,EAAUlf,IAAAA,mBAAwB+e,EAAiBxW,IAEzD,GAAI2W,EAAS,CACX,IAAMC,EAAyBnf,IAAAA,OAC7BA,IAAAA,SAAc+e,EAAiB/e,IAAAA,SAAc0e,GAAS1e,IAAAA,OAAYgf,KAClEN,IAEFO,EAAajB,SAAWC,EACpBZ,GAAcC,gBAAgBwB,EAAoBD,EAAqBpB,GAAW,GAClFJ,GAAcQ,gBAAgBgB,EAAqBC,EAAoBrB,GAAW,GAClFzd,IAAAA,mBAAwBmf,EAAwBF,EAAajB,UAC/DiB,EAAaG,iBAAmBN,EAEhCG,EAAaG,iBAAmB/B,GAAcS,0BAC5Ce,EACApB,EACA0B,EACAlB,EAGL,MACCgB,EAAaZ,UAAYJ,EACrBZ,GAAcQ,gBAAgBiB,EAAoBD,EAAqBpB,GAAW,GAClFJ,GAAcC,gBAAgBuB,EAAqBC,EAAoBrB,GAAW,GAClFzd,IAAAA,mBAAwBA,IAAAA,SAAc+e,EAAiBnD,IAAeqD,EAAaZ,WACrFY,EAAaG,iBAAmBN,EAEhCG,EAAaG,iBAAmB/B,GAAce,2BAC5CS,EACApB,EACAzd,IAAAA,SAAc+e,EAAiBnD,IAC/BqC,GAKN,IAAMoB,EAAMrf,IAAAA,MAAW8e,EAAoBG,EAAaG,kBAqCxD,OAnCInB,GACFgB,EAAajB,SACXqB,GAAOH,EACHD,EAAajB,SACbX,GAAcC,gBAAgB2B,EAAaG,iBAAkBP,EAAqBpB,GAAW,GACnGwB,EAAaZ,UACXgB,IAAQH,EACJD,EAAaZ,UACbhB,GAAcQ,gBAAgBoB,EAAaG,iBAAkBP,EAAqBpB,GAAW,KAEnGwB,EAAajB,SACXqB,GAAOH,EACHD,EAAajB,SACbX,GAAcQ,gBAAgBgB,EAAqBI,EAAaG,iBAAkB3B,GAAW,GACnGwB,EAAaZ,UACXgB,IAAQH,EACJD,EAAaZ,UACbhB,GAAcC,gBAAgBuB,EAAqBI,EAAaG,iBAAkB3B,GAAW,KAGhGyB,GAAWlf,IAAAA,YAAiBif,EAAaZ,UAAYre,IAAAA,SAAc+e,EAAiBnD,OACvFqD,EAAaZ,UAAYre,IAAAA,SAAc+e,EAAiBnD,KAGtDsD,GAAWlf,IAAAA,SAAcif,EAAaG,iBAAkBN,GAE1DG,EAAaK,UAAYtf,IAAAA,SAAc+e,EAAiBE,EAAajB,UAErEiB,EAAaK,UAAY1C,GAASC,iBAChCoC,EAAajB,SACbhe,IAAAA,OAAYgf,GACZhf,IAAAA,SAAc0e,GAAS1e,IAAAA,OAAYgf,KAIhC,CAACC,EAAaG,iBAAmBH,EAAajB,SAAWiB,EAAaZ,UAAYY,EAAaK,UACvG,EA/FHX,CAAA,ICHMlW,GAAMzI,IAAAA,OAAY,GAClBuf,GAAc,CAAC,IAAK,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAAG5U,KAAI,SAAC6U,GAAD,MAAiC,CACrFA,EACAxf,IAAAA,aAAkByI,GAAKzI,IAAAA,OAAYwf,IAFiB,IAKtD,SAAgBC,GAAmB3W,GACvB9I,IAAAA,YAAiB8I,EAAGP,KAA9B9N,GAAU,GACAuF,IAAAA,gBAAqB8I,EAAG/I,KAAlCtF,GAAU,GAGV,IADA,IACAilB,EADIC,EAAc,EAClBC,EAAAC,GAA2BN,MAA3BG,EAAAE,KAAAhI,MAAwC,KAAAkI,EAAAJ,EAAA5kB,MAA5BilB,EAA4BD,EAAA,GAArBE,EAAqBF,EAAA,GAClC9f,IAAAA,mBAAwB8I,EAAGkX,KAC7BlX,EAAI9I,IAAAA,iBAAsB8I,EAAG9I,IAAAA,OAAY+f,IACzCJ,GAAOI,EAEV,CACD,OAAOJ,CACR,CCjBD,SAASM,GAASC,EAAWC,GAC3B,OAAOngB,IAAAA,iBAAsBA,IAAAA,SAAckgB,EAAKlgB,IAAAA,OAAYmgB,IAASngB,IAAAA,OAAY,KAClF,CAED,IAAMogB,GAAMpgB,IAAAA,aAAkBA,IAAAA,OAAY,GAAIA,IAAAA,OAAY,KAEpCqgB,GAAtB,WAIE,SAAAA,IAAA,CAJF,OAAAA,EA4BgBC,mBAAP,SAA0BC,GACrBA,GAAQF,EAASG,UAAYD,GAAQF,EAASI,UAAYte,OAAOC,UAAUme,IAArF9lB,GAAU,GACV,IAAMimB,EAAkBH,EAAO,GAAY,EAARA,EAAYA,EAE3CI,EACiB,IAAR,EAAVD,GACG1gB,IAAAA,OAAY,sCACZA,IAAAA,OAAY,uCAwBlB,OAvBuB,IAAR,EAAV0gB,KAAqBC,EAAQV,GAASU,EAAO,uCAC3B,IAAR,EAAVD,KAAqBC,EAAQV,GAASU,EAAO,uCAC3B,IAAR,EAAVD,KAAqBC,EAAQV,GAASU,EAAO,uCAC1B,IAAT,GAAVD,KAAsBC,EAAQV,GAASU,EAAO,uCAC3B,IAAT,GAAVD,KAAsBC,EAAQV,GAASU,EAAO,uCAC3B,IAAT,GAAVD,KAAsBC,EAAQV,GAASU,EAAO,uCAC3B,IAAT,IAAVD,KAAsBC,EAAQV,GAASU,EAAO,uCAC1B,IAAV,IAAVD,KAAuBC,EAAQV,GAASU,EAAO,uCAC3B,IAAV,IAAVD,KAAuBC,EAAQV,GAASU,EAAO,uCAC3B,IAAV,KAAVD,KAAuBC,EAAQV,GAASU,EAAO,uCAC3B,IAAV,KAAVD,KAAuBC,EAAQV,GAASU,EAAO,uCAC1B,IAAX,KAAVD,KAAwBC,EAAQV,GAASU,EAAO,uCAC3B,IAAX,KAAVD,KAAwBC,EAAQV,GAASU,EAAO,uCAC3B,IAAX,MAAVD,KAAwBC,EAAQV,GAASU,EAAO,uCAC3B,IAAX,MAAVD,KAAwBC,EAAQV,GAASU,EAAO,uCAC1B,IAAZ,MAAVD,KAAyBC,EAAQV,GAASU,EAAO,sCAC3B,IAAZ,OAAVD,KAAyBC,EAAQV,GAASU,EAAO,qCAC3B,IAAZ,OAAVD,KAAyBC,EAAQV,GAASU,EAAO,mCAC3B,IAAZ,OAAVD,KAAyBC,EAAQV,GAASU,EAAO,8BAElDJ,EAAO,IAAGI,EAAQ3gB,IAAAA,OAAYD,GAAY4gB,IAGvC3gB,IAAAA,YAAiBA,IAAAA,UAAe2gB,EAAOP,IAAM7X,IAChDvI,IAAAA,IAASA,IAAAA,OAAY2gB,EAAOP,IAAM5X,IAClCxI,IAAAA,OAAY2gB,EAAOP,GACxB,EA9DHC,EAqEgBO,mBAAP,SAA0BC,GAE7B7gB,IAAAA,mBAAwB6gB,EAAcR,EAASS,iBAC7C9gB,IAAAA,SAAc6gB,EAAcR,EAASU,iBAFzCtmB,GAAU,GAMV,IAIIumB,EAJEC,EAAgBjhB,IAAAA,UAAe6gB,EAAc7gB,IAAAA,OAAY,KAEzD2f,EAAMF,GAAmBwB,GAI7BD,EADEhhB,IAAAA,mBAAwBA,IAAAA,OAAY2f,GAAM3f,IAAAA,OAAY,MACpDA,IAAAA,iBAAsBihB,EAAejhB,IAAAA,OAAY2f,EAAM,MAEvD3f,IAAAA,UAAeihB,EAAejhB,IAAAA,OAAY,IAAM2f,IAKtD,IAFA,IAAIuB,EAAclhB,IAAAA,UAAeA,IAAAA,SAAcA,IAAAA,OAAY2f,GAAM3f,IAAAA,OAAY,MAAOA,IAAAA,OAAY,KAEvFyR,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3BuP,EAAIhhB,IAAAA,iBAAsBA,IAAAA,SAAcghB,EAAGA,GAAIhhB,IAAAA,OAAY,MAC3D,IAAMgN,EAAIhN,IAAAA,iBAAsBghB,EAAGhhB,IAAAA,OAAY,MAC/CkhB,EAAQlhB,IAAAA,UAAekhB,EAAOlhB,IAAAA,UAAegN,EAAGhN,IAAAA,OAAY,GAAKyR,KACjEuP,EAAIhhB,IAAAA,iBAAsBghB,EAAGhU,EAC9B,CAED,IAAMmU,EAAgBnhB,IAAAA,SAAckhB,EAAOlhB,IAAAA,OAAY,6BAEjDohB,EAAUphB,IAAAA,SACdA,IAAAA,iBACEA,IAAAA,SAAcmhB,EAAenhB,IAAAA,OAAY,0CACzCA,IAAAA,OAAY,OAGVqhB,EAAWrhB,IAAAA,SACfA,IAAAA,iBACEA,IAAAA,IAASmhB,EAAenhB,IAAAA,OAAY,4CACpCA,IAAAA,OAAY,OAIhB,OAAOohB,IAAYC,EACfD,EACAphB,IAAAA,gBAAqBqgB,EAASC,mBAAmBe,GAAWR,GAC5DQ,EACAD,CACL,EApHHf,CAAA,IASgBA,GAAAG,UAAoB,OAIpBH,GAAAI,UAAoBJ,GAASG,SAK7BH,GAAAS,eAAuB9gB,IAAAA,OAAY,cAInCqgB,GAAAU,eAAuB/gB,IAAAA,OAAY,qDCTnD,IAAashB,GAAb,oBAAAA,IAAA,KAAApgB,EAAAogB,EAAAngB,UAAA,OAAAD,EAEQqgB,QAFR,eAAAC,EAAAC,GAAAC,GAAAtI,MAEE,SAAAuI,EAAcC,GAAd,OAAAF,GAAAvX,MAAA,SAAA0X,GAAA,eAAAA,EAAA/H,KAAA+H,EAAA7J,MAAA,aACQ,IAAIpd,MAAM0mB,EAAmBQ,eADrC,wBAAAD,EAAA7H,OAAA,GAAA2H,EAAA,KAFF,SAAAJ,EAAAQ,GAAA,OAAAP,EAAAQ,MAAA,KAAA9c,UAAA,QAAAqc,CAAA,IAAArgB,EAMQ+gB,iCANR,eAAAC,EAAAT,GAAAC,GAAAtI,MAME,SAAA+I,EACEP,EACAQ,EACAC,GAHF,OAAAX,GAAAvX,MAAA,SAAAmY,GAAA,eAAAA,EAAAxI,KAAAwI,EAAAtK,MAAA,aAKQ,IAAIpd,MAAM0mB,EAAmBQ,eALrC,wBAAAQ,EAAAtI,OAAA,GAAAmI,EAAA,KANF,SAAAF,EAAAM,EAAAC,EAAAC,GAAA,OAAAP,EAAAF,MAAA,KAAA9c,UAAA,QAAA+c,CAAA,IAAAX,CAAA,ICnBA,SAAgBoB,GAAYC,EAAgB7a,GAC1C,IAAK,IAAI2J,EAAI,EAAGA,EAAIkR,EAAKxd,OAAS,EAAGsM,IACnC,GAAI3J,EAAW6a,EAAKlR,GAAIkR,EAAKlR,EAAI,IAAM,EACrC,OAAO,EAGX,OAAO,CACR,CCPD,SAASmR,GAAe9F,EAASC,GAC/B,OAAOD,EAAE3M,MAAQ4M,EAAE5M,KACpB,CFkBgBmR,GAAAQ,cAAgB,kCEbjC,IAAsBe,GAAtB,WAIE,SAAAA,IAAA,CAJF,OAAAA,EAMgBC,aAAP,SAAoBC,EAAeC,GAC9BA,EAAc,GAAxBvoB,GAAU,GAGRsoB,EAAME,OAAM,SAAA1d,GAAA,IAAG4K,EAAH5K,EAAG4K,MAAH,OAAeA,EAAQ6S,IAAgB,CAAvC,KADdvoB,GAAU,GAORuF,IAAAA,MACE+iB,EAAMzmB,QAAO,SAAC4mB,EAAD5G,GAAA,IAAgB6G,EAAhB7G,EAAgB6G,aAAhB,OAAmCnjB,IAAAA,IAASkjB,EAAaC,EAAzD,GAAwE5a,IACrFA,KAHJ9N,GAAU,GAQAioB,GAASK,EAAOH,KAA1BnoB,GAAU,EACX,EAxBHooB,EA0BgBO,gBAAP,SAAuBL,EAAwBxC,GAEpD,OADUwC,EAAM5d,OAAS,GAAzB1K,GAAU,GACH8lB,EAAOwC,EAAM,GAAG5S,KACxB,EA7BH0S,EA+BgBQ,mBAAP,SAA0BN,EAAwBxC,GAEvD,OADUwC,EAAM5d,OAAS,GAAzB1K,GAAU,GACH8lB,GAAQwC,EAAMA,EAAM5d,OAAS,GAAGgL,KACxC,EAlCH0S,EAoCgBtB,QAAP,SAAewB,EAAwB5S,GAC5C,IAAMoQ,EAAOwC,EAAM7oB,KAAKopB,aAAaP,EAAO5S,IAE5C,OADUoQ,EAAKpQ,QAAUA,GAAzB1V,GAAU,GACH8lB,CACR,EAxCHsC,EAgDiBS,aAAP,SAAoBP,EAAwBxC,GACvCrmB,KAAKkpB,gBAAgBL,EAAOxC,IAAvC9lB,GAAU,GAEV,IAEIgX,EAFA8R,EAAI,EACJvC,EAAI+B,EAAM5d,OAAS,EAEvB,MAAO,EAAM,CAGX,GAFAsM,EAAI9I,KAAKC,OAAO2a,EAAIvC,GAAK,GAErB+B,EAAMtR,GAAGtB,OAASoQ,IAAS9O,IAAMsR,EAAM5d,OAAS,GAAK4d,EAAMtR,EAAI,GAAGtB,MAAQoQ,GAC5E,OAAO9O,EAGLsR,EAAMtR,GAAGtB,MAAQoQ,EACnBgD,EAAI9R,EAAI,EAERuP,EAAIvP,EAAI,CAEX,CACF,EAnEHoR,EAqEgBW,oBAAP,SAA2BT,EAAwBxC,EAAckD,GACtE,GAAIA,EAAK,CAEP,GADWZ,EAASO,gBAAgBL,EAAOxC,IAA3C9lB,GAAU,GACNooB,EAASQ,mBAAmBN,EAAOxC,GACrC,OAAOwC,EAAMA,EAAM5d,OAAS,GAE9B,IAAMgL,EAAQjW,KAAKopB,aAAaP,EAAOxC,GACvC,OAAOwC,EAAM5S,EACd,CAEC,GADWjW,KAAKmpB,mBAAmBN,EAAOxC,IAA1C9lB,GAAU,GACNP,KAAKkpB,gBAAgBL,EAAOxC,GAC9B,OAAOwC,EAAM,GAEf,IAAMW,EAAQxpB,KAAKopB,aAAaP,EAAOxC,GACvC,OAAOwC,EAAMW,EAAQ,EAExB,EArFHb,EAuFgBZ,iCAAP,SACLc,EACAxC,EACAkD,EACAT,GAEA,IAAMW,EAAahb,KAAKC,MAAM2X,EAAOyC,GAErC,GAAIS,EAAK,CACP,IAAMG,EAAUD,GAAc,EACxBE,GAAWD,GAAW,GAAKZ,EAEjC,GAAIH,EAASO,gBAAgBL,EAAOxC,GAClC,MAAO,CAACsD,GAAS,GAGnB,IAAM1T,EAAQ0S,EAASW,oBAAoBT,EAAOxC,EAAMkD,GAAKtT,MACvDqT,EAAsB7a,KAAK0W,IAAIwE,EAAS1T,GAC9C,MAAO,CAACqT,EAAqBA,IAAwBrT,EACtD,CACC,IAAM2T,EAAWH,EAAa,GAAM,EAC9BI,IAAaD,EAAU,GAAM,GAAK,GAAKd,EAE7C,GAAI9oB,KAAKmpB,mBAAmBN,EAAOxC,GACjC,MAAO,CAACwD,GAAS,GAGnB,IAAMC,EAAQ9pB,KAAKspB,oBAAoBT,EAAOxC,EAAMkD,GAAKtT,MACnD8T,EAAsBtb,KAAKqX,IAAI+D,EAASC,GAC9C,MAAO,CAACC,EAAqBA,IAAwBD,EAExD,EAtHHnB,CAAA,ICSA,SAAgBqB,GAAMC,GACpB,IAAMC,EAASpkB,IAAAA,OAAYmkB,GACvBE,EAAMD,EAAO5hB,SAAS,IAI1B,OAHI6hB,EAAIlf,OAAS,IAAM,IACrBkf,EAAM,IAAIA,GAEL,KAAKA,CACb,CCnBD,SAAgBC,GAAkBC,EAAkCC,GAClE,IAAMC,EAAyBF,EAAMG,MAAMrgB,Q,EAEnBkgB,EAAMI,MAAMroB,QAClC,SAAAiJ,EAEEqf,EACAzU,G,IAFE0U,EAAAtf,EAAAsf,WAAYC,EAAAvf,EAAAuf,KAAM1R,EAAA7N,EAAA6N,MAId2R,EAAqBH,EAAKvI,OAAOvY,OAAO+gB,GAAcD,EAAKrI,OAASqI,EAAKvI,OAC/E,OAAc,IAAVlM,EACK,CACL0U,WAAYE,EACZ3R,MAAO,CAAC,UAAW,SAAU,WAC7B0R,KAAM,CAACD,EAAWzoB,QAASwoB,EAAKzI,IAAK4I,EAAY3oB,UAG5C,CACLyoB,WAAYE,EACZ3R,MAAO,GAAFrY,OAAMqY,EAAN,CAAa,SAAU,YAC5B0R,KAAM,GAAF/pB,OAAM+pB,EAAN,CAAYF,EAAKzI,IAAK4I,EAAY3oB,UAG3C,GACD,CAAEyoB,WAAYJ,EAAiBK,KAAM,GAAI1R,MAAO,KArB1C0R,EAAAE,EAAAF,KAAM1R,EAAA4R,EAAA5R,MAwBd,OAAOoR,EAAcrR,GAAKC,EAAMwG,UAAWkL,EAAKlL,WAAazG,GAAKC,EAAO0R,EAC1E,CC5BD,SAAgBG,GAAmBC,EAAoBC,GACrD,IAAMrkB,EAAYd,IAAAA,UAAeA,IAAAA,OAAYklB,GAAUllB,IAAAA,OAAY,MAC7De,EAAcf,IAAAA,OAAYmlB,GAC1BC,EAAYplB,IAAAA,OAAYc,EAAWC,GACzC,OAAO2H,GAAK0c,EACb,CCAD,SAASC,GAAgC9H,EAAqBC,EAAqB2H,GACjF,GAAInlB,IAAAA,YAAiBud,EAAeC,GAAgB,KAAAjY,EAChB,CAACiY,EAAeD,GAAhDA,EADgDhY,EAAA,GACjCiY,EADiCjY,EAAA,EAEnD,CACD,IAAM+f,EAAetlB,IAAAA,OAAYA,IAAAA,SAAcud,EAAeC,GAAgB3B,IAC9E,OAAO7b,IAAAA,OAAYA,IAAAA,SAAcA,IAAAA,OAAYmlB,GAAUG,GAAetlB,IAAAA,SAAcwd,EAAeD,GACpG,CAUD,SAASgI,GAA8BhI,EAAqBC,EAAqB2H,GAC/E,GAAInlB,IAAAA,YAAiBud,EAAeC,GAAgB,KAAAlB,EAChB,CAACkB,EAAeD,GAAhDA,EADgDjB,EAAA,GACjCkB,EADiClB,EAAA,EAEnD,CAED,IAAMxb,EAAYd,IAAAA,SAAcA,IAAAA,SAAcA,IAAAA,OAAYmlB,GAAU5H,GAAgBC,GAC9Ezc,EAAcf,IAAAA,SAAc6b,GAAK7b,IAAAA,SAAcwd,EAAeD,IAEpE,OAAOvd,IAAAA,OAAYc,EAAWC,EAC/B,CASD,SAASykB,GAAuBjI,EAAqBC,EAAqB0H,GACxE,GAAIllB,IAAAA,YAAiBud,EAAeC,GAAgB,KAAAiI,EAChB,CAACjI,EAAeD,GAAhDA,EADgDkI,EAAA,GACjCjI,EADiCiI,EAAA,EAEnD,CACD,OAAOzlB,IAAAA,OAAYA,IAAAA,SAAcA,IAAAA,OAAYklB,GAAUrJ,IAAM7b,IAAAA,SAAcwd,EAAeD,GAC3F,CAaD,SAAgBmI,GACd7G,EACAtB,EACAC,EACA2H,EACAD,EACAS,GAEA,GAAI3lB,IAAAA,YAAiBud,EAAeC,GAAgB,KAAAoI,EAChB,CAACpI,EAAeD,GAAhDA,EADgDqI,EAAA,GACjCpI,EADiCoI,EAAA,EAEnD,CAED,IAAMC,EAAyBF,EAAmBJ,GAAgCF,GAElF,GAAIrlB,IAAAA,gBAAqB6e,EAAqBtB,GAC5C,OAAOsI,EAAuBtI,EAAeC,EAAe2H,GACvD,GAAInlB,IAAAA,SAAc6e,EAAqBrB,GAAgB,CAC5D,IAAMsI,EAAaD,EAAuBhH,EAAqBrB,EAAe2H,GACxEY,EAAaP,GAAuBjI,EAAesB,EAAqBqG,GAC9E,OAAOllB,IAAAA,SAAc8lB,EAAYC,GAAcD,EAAaC,CAC7D,CACC,OAAOP,GAAuBjI,EAAeC,EAAe0H,EAE/D,CC7ED,SAAgBc,GAAYC,EAAkBC,EAAmB3F,GAC/D,IAAMM,EAAeR,GAASC,mBAAmBC,GAE3C6E,EAAYplB,IAAAA,SAAc6gB,EAAcA,GAE9C,OAAOoF,EAAUrf,YAAYsf,GACzB,IAAIvhB,GAAMshB,EAAWC,EAAYpK,GAAMsJ,GACvC,IAAIzgB,GAAMshB,EAAWC,EAAYd,EAAWtJ,GACjD,CCDD,ICTaqK,GAKX,SAAA5gB,G,IAAc4K,EAAA5K,EAAA4K,MAAOiW,EAAA7gB,EAAA6gB,eAAgBjD,EAAA5d,EAAA4d,aACzBhT,GAASkQ,GAASG,UAAYrQ,GAASkQ,GAASI,UAA1DhmB,GAAU,GACVP,KAAKiW,MAAQA,EACbjW,KAAKksB,eAAiBpmB,IAAAA,OAAYomB,GAClClsB,KAAKipB,aAAenjB,IAAAA,OAAYmjB,EACjC,ECbUkD,GAAb,WAGE,SAAAA,EAAYtD,EAAuCC,GACjD,IAAMsD,EAAsBvD,EAAMpY,KAAI,SAAA4b,GAAC,OAAKA,aAAaJ,GAAOI,EAAI,IAAIJ,GAAKI,EAAtC,IACvC1D,GAASC,aAAawD,EAAatD,GACnC9oB,KAAK6oB,MAAQuD,CACd,CAPH,IAAAplB,EAAAmlB,EAAAllB,UAAA,OAAAD,EASQqgB,QATR,eAAAC,EAAAC,GAAAC,GAAAtI,MASE,SAAAuI,EAAcpB,GAAd,OAAAmB,GAAAvX,MAAA,SAAA0X,GAAA,eAAAA,EAAA/H,KAAA+H,EAAA7J,MAAA,cAAA6J,EAAAlK,OAAA,SACSkL,GAAStB,QAAQrnB,KAAK6oB,MAAOxC,IADtC,wBAAAsB,EAAA7H,OAAA,GAAA2H,EAAA,UATF,SAAAJ,EAAAQ,GAAA,OAAAP,EAAAQ,MAAA,KAAA9c,UAAA,QAAAqc,CAAA,IAAArgB,EAaQ+gB,iCAbR,eAAAC,EAAAT,GAAAC,GAAAtI,MAaE,SAAA+I,EAAuC5B,EAAckD,EAAcT,GAAnE,OAAAtB,GAAAvX,MAAA,SAAAmY,GAAA,eAAAA,EAAAxI,KAAAwI,EAAAtK,MAAA,cAAAsK,EAAA3K,OAAA,SACSkL,GAASZ,iCAAiC/nB,KAAK6oB,MAAOxC,EAAMkD,EAAKT,IAD1E,wBAAAV,EAAAtI,OAAA,GAAAmI,EAAA,UAbF,SAAAF,EAAAM,EAAAC,EAAAC,GAAA,OAAAP,EAAAF,MAAA,KAAA9c,UAAA,QAAA+c,CAAA,IAAAoE,CAAA,ICkBMG,GAAgC,IAAIlF,GAK7BmF,GAAb,WAsCE,SAAAA,EACExK,EACAC,EACAC,EACA0E,EACApD,EACAiJ,EACA3D,QAAA,IAAAA,IAAAA,EAA2DyD,IAEjDrkB,OAAOC,UAAU+Z,IAAQA,EAAM,KAAzC1hB,GAAU,GAEV,IAAMksB,EAA0BtG,GAASC,mBAAmBoG,GACtDE,EAAuBvG,GAASC,mBAAmBoG,EAAc,GAErE1mB,IAAAA,mBAAwBA,IAAAA,OAAY6gB,GAAe8F,IACjD3mB,IAAAA,gBAAqBA,IAAAA,OAAY6gB,GAAe+F,IAFpDnsB,GAAU,G,MAMoBwhB,EAAOrV,YAAYsV,GAAU,CAACD,EAAQC,GAAU,CAACA,EAAQD,GAArF/hB,KAAKmiB,OAAA9W,EAAA,GAAQrL,KAAKqiB,OAAAhX,EAAA,GACpBrL,KAAKiiB,IAAMA,EACXjiB,KAAK2mB,aAAe7gB,IAAAA,OAAY6gB,GAChC3mB,KAAKujB,UAAYzd,IAAAA,OAAYyd,GAC7BvjB,KAAKwsB,YAAcA,EACnBxsB,KAAK2sB,iBAAmB9hB,MAAMuL,QAAQyS,GAAS,IAAIsD,GAAqBtD,EAAOzH,GAAca,IAAQ4G,CACtG,CA/DH0D,EAYgBrgB,WAAP,SACL6V,EACAC,EACAC,EACAC,EACA0K,GAEA,OAAO/K,GAAmB,CACxBC,eAAc,MAAE8K,EAAAA,EAA0B3L,GAC1CgB,IAAAA,EACAF,OAAAA,EACAC,OAAAA,EACAE,2BAAAA,GAEH,EA1BH,IAAAlb,EAAAulB,EAAAtlB,UAAA,OAAAD,EAsES6lB,cAAA,SAAcC,GACnB,OAAOA,EAAMljB,OAAO5J,KAAKmiB,SAAW2K,EAAMljB,OAAO5J,KAAKqiB,OACvD,EAxEHrb,EA6GS+lB,QAAA,SAAQD,GAEb,OADU9sB,KAAK6sB,cAAcC,IAA7BvsB,GAAU,GACHusB,EAAMljB,OAAO5J,KAAKmiB,QAAUniB,KAAKgtB,YAAchtB,KAAKitB,WAC5D,EAhHHjmB,EA+HekmB,gBA/Hf,eAAAC,EAAA5F,GAAAC,GAAAtI,MA+HS,SAAAuI,EACLpa,EACA+f,GAFK,IAAArJ,EAAAsJ,EAAA/f,EAAAqZ,EAAApD,EAAAiJ,EAAA3B,EAAA,OAAArD,GAAAvX,MAAA,SAAA0X,GAAA,eAAAA,EAAA/H,KAAA+H,EAAA7J,MAAA,cAIK9d,KAAK6sB,cAAcxf,EAAYlE,WAAzC5I,GAAU,GAEJwjB,EAAa1W,EAAYlE,SAASS,OAAO5J,KAAKmiB,QAN/CwF,EAAA7J,KAAA,EAQkF9d,KAAKstB,KAC1FvJ,EACA1W,EAAYhF,SACZ+kB,GAXG,cAAAC,EAAA1F,EAAArK,KAQqBhQ,EARrB+f,EAQGE,iBAAgC5G,EARnC0G,EAQmC1G,aAAcpD,EARjD8J,EAQiD9J,UAAWiJ,EAR5Da,EAQ4Db,YAK3D3B,EAAc9G,EAAa/jB,KAAKqiB,OAASriB,KAAKmiB,OAb/CwF,EAAAlK,OAAA,SAcE,CACLxU,GAAeQ,cAAcohB,EAAa/kB,IAAAA,SAAcwH,EAAcoU,KACtE,IAAI6K,EAAKvsB,KAAKmiB,OAAQniB,KAAKqiB,OAAQriB,KAAKiiB,IAAK0E,EAAcpD,EAAWiJ,EAAaxsB,KAAK2sB,oBAhBrF,yBAAAhF,EAAA7H,OAAA,GAAA2H,EAAA,UA/HT,SAAAyF,EAAArF,EAAAQ,GAAA,OAAA8E,EAAArF,MAAA,KAAA9c,UAAA,QAAAkiB,CAAA,IAAAlmB,EAyJewmB,eAzJf,eAAAC,EAAAlG,GAAAC,GAAAtI,MAyJS,SAAA+I,EACL3a,EACA8f,GAFK,IAAArJ,EAAA2J,EAAArgB,EAAAsZ,EAAApD,EAAAiJ,EAAA7B,EAAA,OAAAnD,GAAAvX,MAAA,SAAAmY,GAAA,eAAAA,EAAAxI,KAAAwI,EAAAtK,MAAA,cAIKxQ,EAAanE,SAASe,SAAWlK,KAAK6sB,cAAcvf,EAAanE,WAA3E5I,GAAU,GAEJwjB,EAAazW,EAAanE,SAASS,OAAO5J,KAAKqiB,QANhD+F,EAAAtK,KAAA,EAQiF9d,KAAKstB,KACzFvJ,EACAje,IAAAA,SAAcwH,EAAajF,SAAUqZ,IACrC0L,GAXG,cAAAM,EAAAtF,EAAA9K,KAQqBjQ,EARrBqgB,EAQGH,iBAA+B5G,EARlC+G,EAQkC/G,aAAcpD,EARhDmK,EAQgDnK,UAAWiJ,EAR3DkB,EAQ2DlB,YAK1D7B,EAAa5G,EAAa/jB,KAAKmiB,OAASniB,KAAKqiB,OAb9C+F,EAAA3K,OAAA,SAcE,CACLxU,GAAeQ,cAAckhB,EAAYtd,GACzC,IAAIkf,EAAKvsB,KAAKmiB,OAAQniB,KAAKqiB,OAAQriB,KAAKiiB,IAAK0E,EAAcpD,EAAWiJ,EAAaxsB,KAAK2sB,oBAhBrF,yBAAAvE,EAAAtI,OAAA,GAAAmI,EAAA,UAzJT,SAAAuF,EAAAlF,EAAAC,GAAA,OAAAkF,EAAA3F,MAAA,KAAA9c,UAAA,QAAAwiB,CAAA,IAAAxmB,EAuLgBsmB,KAvLhB,eAAAK,EAAApG,GAAAC,GAAAtI,MAuLU,SAAA0O,EACN7J,EACA8J,EACAT,GAHM,IAAAU,EAAA7Q,EAAA8Q,EAAAC,EAAAC,EAAAhF,EAAA,OAAAzB,GAAAvX,MAAA,SAAAie,GAAA,eAAAA,EAAAtO,KAAAsO,EAAApQ,MAAA,OAKDsP,IACHA,EAAoBrJ,EAChBje,IAAAA,IAASqgB,GAASS,eAAgBtY,IAClCxI,IAAAA,SAAcqgB,GAASU,eAAgBvY,KAEzCyV,GACQje,IAAAA,YAAiBsnB,EAAmBjH,GAASS,iBAAvDrmB,GAAU,GACAuF,IAAAA,SAAcsnB,EAAmBptB,KAAK2mB,eAAhDpmB,GAAU,KAEAuF,IAAAA,SAAcsnB,EAAmBjH,GAASU,iBAApDtmB,GAAU,GACAuF,IAAAA,YAAiBsnB,EAAmBptB,KAAK2mB,eAAnDpmB,GAAU,IAGNutB,EAAahoB,IAAAA,mBAAwB+nB,EAAiBxf,IAItD4O,EAAQ,CACZkR,yBAA0BN,EAC1BN,iBAAkBlf,GAClB+f,aAAcpuB,KAAK2mB,aACnBN,KAAMrmB,KAAKwsB,YACXjJ,UAAWvjB,KAAKujB,WA3BZ,WA+BCzd,IAAAA,SAAcmX,EAAMkR,yBAA0B9f,KAAS4O,EAAMmR,cAAgBhB,EA/B9E,CAAAc,EAAApQ,KAAA,gBAgCAiQ,EAAkC,CAAC,EACvCA,EAAKM,kBAAoBpR,EAAMmR,aAjC3BF,EAAApQ,KAAA,EAsCuC9d,KAAK2sB,iBAAiB5E,iCAC/D9K,EAAMoJ,KACNtC,EACA/jB,KAAK8oB,aAzCH,UAAAkF,EAAAE,EAAA5Q,KAsCFyQ,EAAKO,SAtCHN,EAAA,GAsCaD,EAAKQ,YAtClBP,EAAA,GA4CAD,EAAKO,SAAWnI,GAASG,SAC3ByH,EAAKO,SAAWnI,GAASG,SAChByH,EAAKO,SAAWnI,GAASI,WAClCwH,EAAKO,SAAWnI,GAASI,UAG3BwH,EAAKS,iBAAmBrI,GAASC,mBAAmB2H,EAAKO,UAlDrDL,EAmDmExJ,GAASC,gBAC9EzH,EAAMmR,cACLrK,EACCje,IAAAA,SAAcioB,EAAKS,iBAAkBpB,GACrCtnB,IAAAA,YAAiBioB,EAAKS,iBAAkBpB,IACtCA,EACAW,EAAKS,iBACTvR,EAAMsG,UACNtG,EAAMkR,yBACNnuB,KAAKiiB,KATLhF,EAAMmR,aAnDJH,EAAA,GAmDkBF,EAAKjK,SAnDvBmK,EAAA,GAmDiCF,EAAK5J,UAnDtC8J,EAAA,GAmDiDF,EAAK3I,UAnDtD6I,EAAA,GA+DAH,GACF7Q,EAAMkR,yBAA2BroB,IAAAA,SAC/BmX,EAAMkR,yBACNroB,IAAAA,IAASioB,EAAKjK,SAAUiK,EAAK3I,YAE/BnI,EAAMsQ,iBAAmBznB,IAAAA,SAAcmX,EAAMsQ,iBAAkBQ,EAAK5J,aAEpElH,EAAMkR,yBAA2BroB,IAAAA,IAASmX,EAAMkR,yBAA0BJ,EAAK5J,WAC/ElH,EAAMsQ,iBAAmBznB,IAAAA,IAASmX,EAAMsQ,iBAAkBznB,IAAAA,IAASioB,EAAKjK,SAAUiK,EAAK3I,cAIrFtf,IAAAA,MAAWmX,EAAMmR,aAAcL,EAAKS,kBA3EpC,CAAAN,EAAApQ,KAAA,aA6EEiQ,EAAKQ,YA7EP,CAAAL,EAAApQ,KAAA,gBAAAoQ,EAAAO,GA8EmB3oB,IA9EnBooB,EAAApQ,KAAA,GA8EsC9d,KAAK2sB,iBAAiBtF,QAAQ0G,EAAKO,UA9EzE,QAAAJ,EAAAQ,GAAAR,EAAA5Q,KA8EoF2L,aAAhFA,EA9EJiF,EAAAO,GA8EwBE,OA9ExBtlB,KAAA6kB,EAAAO,GAAAP,EAAAQ,IAiFI3K,IAAYkF,EAAenjB,IAAAA,SAAcmjB,EAAcvH,KAE3DzE,EAAMsG,UAAYhB,GAAcC,SAASvF,EAAMsG,UAAW0F,GAnF1D,QAsFFhM,EAAMoJ,KAAOtC,EAAagK,EAAKO,SAAW,EAAIP,EAAKO,SAtFjDJ,EAAApQ,KAAA,iBAuFOhY,IAAAA,SAAcmX,EAAMmR,aAAcL,EAAKM,qBAGhDpR,EAAMoJ,KAAOF,GAASO,mBAAmBzJ,EAAMmR,eA1F7C,QAAAF,EAAApQ,KAAA,uBAAAoQ,EAAAzQ,OAAA,SA8FC,CACL8P,iBAAkBtQ,EAAMsQ,iBACxB5G,aAAc1J,EAAMmR,aACpB7K,UAAWtG,EAAMsG,UACjBiJ,YAAavP,EAAMoJ,OAlGf,yBAAA6H,EAAApO,OAAA,GAAA8N,EAAA,UAvLV,SAAAN,EAAAsB,EAAAC,EAAAC,GAAA,OAAAnB,EAAA7F,MAAA,KAAA9c,UAAA,QAAAsiB,CAAA,IAAAzkB,GAAA0jB,EAAA,EAAAzjB,IAAA,cAAAC,IAAA,W,MA8EI,cAAAgmB,EACE/uB,KAAKgvB,cADPD,EAEG/uB,KAAKgvB,aAAe,IAAIvkB,GACvBzK,KAAKmiB,OACLniB,KAAKqiB,OACLT,GACA9b,IAAAA,SAAc9F,KAAK2mB,aAAc3mB,KAAK2mB,cAG3C,GAvFH,CAAA7d,IAAA,cAAAC,IAAA,W,MA6FI,cAAAkmB,EACEjvB,KAAKkvB,cADPD,EAEGjvB,KAAKkvB,aAAe,IAAIzkB,GACvBzK,KAAKqiB,OACLriB,KAAKmiB,OACLrc,IAAAA,SAAc9F,KAAK2mB,aAAc3mB,KAAK2mB,cACtC/E,GAGL,GAtGH,CAAA9Y,IAAA,UAAAC,IAAA,WAsHI,OAAO/I,KAAKmiB,OAAO7f,OACpB,GAvHH,CAAAwG,IAAA,cAAAC,IAAA,WA8RI,OAAOqY,GAAcphB,KAAKiiB,IAC3B,KA/RHsK,CAAA,ICVa4C,GAAb,WAkBE,SAAAA,EAAA9jB,G,IAAqBqf,EAAArf,EAAAqf,KAAMnH,EAAAlY,EAAAkY,UAAW6L,EAAA/jB,EAAA+jB,UAAWC,EAAAhkB,EAAAgkB,UAXzC,KAAAC,cAA8C,KAC9C,KAAAC,cAA8C,KAC9C,KAAAC,aAAkE,KAU9DJ,EAAYC,GAAtB9uB,GAAU,GACA6uB,GAAajJ,GAASG,UAAY8I,EAAY1E,EAAK5B,cAAgB,GAA7EvoB,GAAU,GACA8uB,GAAalJ,GAASI,UAAY8I,EAAY3E,EAAK5B,cAAgB,GAA7EvoB,GAAU,GAEVP,KAAK0qB,KAAOA,EACZ1qB,KAAKovB,UAAYA,EACjBpvB,KAAKqvB,UAAYA,EACjBrvB,KAAKujB,UAAYzd,IAAAA,OAAYyd,EAC9B,CA3BH,IAAAvc,EAAAmoB,EAAAloB,UAAA,OAAAD,EAgHUyoB,oBAAA,SAAoBC,GAC1B,IAAMC,EAAa3vB,KAAK0qB,KAAKsC,YAAY4C,WAAWloB,SAAS,IAAI6C,GAAQ,GAAGjD,SAASooB,IAC/EG,EAAa7vB,KAAK0qB,KAAKsC,YAAY4C,WAAWloB,SAASgoB,EAAkBvoB,IAAI,IAC/E2oB,EAAoB/E,GAAmB4E,EAAW/oB,UAAW+oB,EAAW9oB,aACxEf,IAAAA,gBAAqBgqB,EAAmB3J,GAASS,kBACnDkJ,EAAoBhqB,IAAAA,IAASqgB,GAASS,eAAgB9gB,IAAAA,OAAY,KAEpE,IAAIiqB,EAAoBhF,GAAmB8E,EAAWjpB,UAAWipB,EAAWhpB,aAI5E,OAHIf,IAAAA,mBAAwBiqB,EAAmB5J,GAASU,kBACtDkJ,EAAoBjqB,IAAAA,SAAcqgB,GAASU,eAAgB/gB,IAAAA,OAAY,KAElE,CACLgqB,kBAAAA,EACAC,kBAAAA,EAEH,EA/HH/oB,EAuISgpB,wBAAA,SAAwBN,G,MAEoB1vB,KAAKyvB,oBAAoBC,GAAlEK,EAAAE,EAAAF,kBAAmBD,EAAAG,EAAAH,kBAGrBI,EAAY,IAAI3D,GACpBvsB,KAAK0qB,KAAKvI,OACVniB,KAAK0qB,KAAKrI,OACVriB,KAAK0qB,KAAKzI,IACV6N,EACA,EACA3J,GAASO,mBAAmBoJ,IAExBK,EAAY,IAAI5D,GACpBvsB,KAAK0qB,KAAKvI,OACVniB,KAAK0qB,KAAKrI,OACVriB,KAAK0qB,KAAKzI,IACV8N,EACA,EACA5J,GAASO,mBAAmBqJ,IAIxBK,EAA4BjB,EAASkB,YAAT/sB,GAAA,CAChConB,KAAM1qB,KAAK0qB,KACX0E,UAAWpvB,KAAKovB,UAChBC,UAAWrvB,KAAKqvB,WACbrvB,KAAKswB,YAJwB,CAKhC7E,kBAAkB,KAKZR,EAAY,IAAIkE,EAAS,CAC/BzE,KAAMyF,EACN5M,UAAW6M,EAA0B7M,UACrC6L,UAAWpvB,KAAKovB,UAChBC,UAAWrvB,KAAKqvB,YACfiB,YALKrF,QAOAD,EAAY,IAAImE,EAAS,CAC/BzE,KAAMwF,EACN3M,UAAW6M,EAA0B7M,UACrC6L,UAAWpvB,KAAKovB,UAChBC,UAAWrvB,KAAKqvB,YACfiB,YALKtF,QAOR,MAAO,CAAEC,QAAAA,EAASD,QAAAA,EACnB,EAvLHhkB,EA+LSupB,wBAAA,SAAwBb,G,MAEoB1vB,KAAKyvB,oBAAoBC,GAAlEK,EAAAS,EAAAT,kBAAmBD,EAAAU,EAAAV,kBAGrBI,EAAY,IAAI3D,GACpBvsB,KAAK0qB,KAAKvI,OACVniB,KAAK0qB,KAAKrI,OACVriB,KAAK0qB,KAAKzI,IACV6N,EACA,EACA3J,GAASO,mBAAmBoJ,IAExBK,EAAY,IAAI5D,GACpBvsB,KAAK0qB,KAAKvI,OACVniB,KAAK0qB,KAAKrI,OACVriB,KAAK0qB,KAAKzI,IACV8N,EACA,EACA5J,GAASO,mBAAmBqJ,IAKxB9E,EAAU,IAAIkE,EAAS,CAC3BzE,KAAMyF,EACN5M,UAAWvjB,KAAKujB,UAChB6L,UAAWpvB,KAAKovB,UAChBC,UAAWrvB,KAAKqvB,YACfpE,QAEGD,EAAU,IAAImE,EAAS,CAC3BzE,KAAMwF,EACN3M,UAAWvjB,KAAKujB,UAChB6L,UAAWpvB,KAAKovB,UAChBC,UAAWrvB,KAAKqvB,YACfrE,QAEH,MAAO,CAAEC,QAASA,EAAQ5iB,SAAU2iB,QAASA,EAAQ3iB,SACtD,EAtOH8mB,EAkSgBkB,YAAP,SAAAjO,G,IACLsI,EAAAtI,EAAAsI,KACA0E,EAAAhN,EAAAgN,UACAC,EAAAjN,EAAAiN,UACApE,EAAA7I,EAAA6I,QACAD,EAAA5I,EAAA4I,QACAS,EAAArJ,EAAAqJ,iBASMpI,EAAgB8C,GAASC,mBAAmBgJ,GAC5C9L,EAAgB6C,GAASC,mBAAmBiJ,GAClD,OAAO,IAAIF,EAAS,CAClBzE,KAAAA,EACA0E,UAAAA,EACAC,UAAAA,EACA9L,UAAWiI,GACTd,EAAK/D,aACLtD,EACAC,EACA2H,EACAD,EACAS,IAGL,EAhUH0D,EA4UgBsB,YAAP,SAAAlF,G,IACLb,EAAAa,EAAAb,KACA0E,EAAA7D,EAAA6D,UACAC,EAAA9D,EAAA8D,UACApE,EAAAM,EAAAN,QACAQ,EAAAF,EAAAE,iBAQA,OAAO0D,EAASkB,YAAY,CAAE3F,KAAAA,EAAM0E,UAAAA,EAAWC,UAAAA,EAAWpE,QAAAA,EAASD,QAASnlB,GAAY4lB,iBAAAA,GACzF,EA1VH0D,EAoWgBuB,YAAP,SAAAhF,G,IACLhB,EAAAgB,EAAAhB,KACA0E,EAAA1D,EAAA0D,UACAC,EAAA3D,EAAA2D,UACArE,EAAAU,EAAAV,QAQA,OAAOmE,EAASkB,YAAY,CAAE3F,KAAAA,EAAM0E,UAAAA,EAAWC,UAAAA,EAAWpE,QAASplB,GAAYmlB,QAAAA,EAASS,kBAAkB,GAC3G,EAjXH5iB,GAAAsmB,EAAA,EAAArmB,IAAA,mBAAAC,IAAA,WAiCI,OAAO+iB,GAAY9rB,KAAK0qB,KAAKvI,OAAQniB,KAAK0qB,KAAKrI,OAAQriB,KAAKovB,UAC7D,GAlCH,CAAAtmB,IAAA,mBAAAC,IAAA,WAwCI,OAAO+iB,GAAY9rB,KAAK0qB,KAAKvI,OAAQniB,KAAK0qB,KAAKrI,OAAQriB,KAAKqvB,UAC7D,GAzCH,CAAAvmB,IAAA,UAAAC,IAAA,WAwEI,OAzB2B,OAAvB/I,KAAKsvB,gBACHtvB,KAAK0qB,KAAK8B,YAAcxsB,KAAKovB,UAC/BpvB,KAAKsvB,cAAgBrmB,GAAeQ,cAClCzJ,KAAK0qB,KAAKvI,OACVgB,GAAcC,gBACZ+C,GAASC,mBAAmBpmB,KAAKovB,WACjCjJ,GAASC,mBAAmBpmB,KAAKqvB,WACjCrvB,KAAKujB,WACL,IAGKvjB,KAAK0qB,KAAK8B,YAAcxsB,KAAKqvB,UACtCrvB,KAAKsvB,cAAgBrmB,GAAeQ,cAClCzJ,KAAK0qB,KAAKvI,OACVgB,GAAcC,gBACZpjB,KAAK0qB,KAAK/D,aACVR,GAASC,mBAAmBpmB,KAAKqvB,WACjCrvB,KAAKujB,WACL,IAIJvjB,KAAKsvB,cAAgBrmB,GAAeQ,cAAczJ,KAAK0qB,KAAKvI,OAAQ9T,KAGjErO,KAAKsvB,aACb,GAzEH,CAAAxmB,IAAA,UAAAC,IAAA,WAwGI,OAzB2B,OAAvB/I,KAAKuvB,gBACHvvB,KAAK0qB,KAAK8B,YAAcxsB,KAAKovB,UAC/BpvB,KAAKuvB,cAAgBtmB,GAAeQ,cAAczJ,KAAK0qB,KAAKrI,OAAQhU,IAC3DrO,KAAK0qB,KAAK8B,YAAcxsB,KAAKqvB,UACtCrvB,KAAKuvB,cAAgBtmB,GAAeQ,cAClCzJ,KAAK0qB,KAAKrI,OACVc,GAAcQ,gBACZwC,GAASC,mBAAmBpmB,KAAKovB,WACjCpvB,KAAK0qB,KAAK/D,aACV3mB,KAAKujB,WACL,IAIJvjB,KAAKuvB,cAAgBtmB,GAAeQ,cAClCzJ,KAAK0qB,KAAKrI,OACVc,GAAcQ,gBACZwC,GAASC,mBAAmBpmB,KAAKovB,WACjCjJ,GAASC,mBAAmBpmB,KAAKqvB,WACjCrvB,KAAKujB,WACL,KAKDvjB,KAAKuvB,aACb,GAzGH,CAAAzmB,IAAA,cAAAC,IAAA,WA6OI,OAA0B,OAAtB/I,KAAKwvB,aACHxvB,KAAK0qB,KAAK8B,YAAcxsB,KAAKovB,UACxB,CACLnE,QAAS9H,GAAcC,gBACrB+C,GAASC,mBAAmBpmB,KAAKovB,WACjCjJ,GAASC,mBAAmBpmB,KAAKqvB,WACjCrvB,KAAKujB,WACL,GAEFyH,QAAS3c,IAEFrO,KAAK0qB,KAAK8B,YAAcxsB,KAAKqvB,UAC/B,CACLpE,QAAS9H,GAAcC,gBACrBpjB,KAAK0qB,KAAK/D,aACVR,GAASC,mBAAmBpmB,KAAKqvB,WACjCrvB,KAAKujB,WACL,GAEFyH,QAAS7H,GAAcQ,gBACrBwC,GAASC,mBAAmBpmB,KAAKovB,WACjCpvB,KAAK0qB,KAAK/D,aACV3mB,KAAKujB,WACL,IAIG,CACL0H,QAAS5c,GACT2c,QAAS7H,GAAcQ,gBACrBwC,GAASC,mBAAmBpmB,KAAKovB,WACjCjJ,GAASC,mBAAmBpmB,KAAKqvB,WACjCrvB,KAAKujB,WACL,IAKDvjB,KAAKwvB,YACb,KApRHL,CAAA,IC2CA,IC7DsBwB,GAAtB,WAME,SAAAA,IAAA,CANF,OAAAA,EAQgBC,gBAAP,SAAuBC,GAK5B,OAJKhmB,MAAMuL,QAAQya,KACjBA,EAAY,CAACA,IAGa,IAArBA,EAAU5lB,OAAe4lB,EAAU,GAAKF,EAAUG,UAAUrc,mBAAmB,YAAa,CAACoc,GACrG,EAdHF,CAAA,ICoBA,SAASI,GAAgBC,GACvB,MAAO,UAAWA,CACnB,CDrBeL,GAAAG,UAAuB,IAAI5gB,GAAU+gB,GAAAA,ICuBrD,IAAsBC,GAAtB,WAME,SAAAA,IAAA,CANF,OAAAA,EAQgBC,aAAP,SAAoBrE,EAAcsE,GACvC,OAAOL,GAAgBK,GACnBF,EAAWJ,UAAUrc,mBAAmB,oBAAqB,CAC3DqY,EAAM5qB,QACN8nB,GAAMoH,EAAQC,OACdrH,GAAMoH,EAAQE,QACdF,EAAQG,EACRH,EAAQtK,EACRsK,EAAQI,IAEVN,EAAWJ,UAAUrc,mBAAmB,aAAc,CACpDqY,EAAM5qB,QACN8nB,GAAMoH,EAAQhN,QACd4F,GAAMoH,EAAQK,UACdL,EAAQG,EACRH,EAAQtK,EACRsK,EAAQI,GAEf,EA1BHN,CAAA,IACgBA,GAAAJ,UAAuB,IAAI5gB,GAAUwhB,GAAAA,I,ICV/BC,GAAtB,WAME,SAAAA,IAAA,CANF,OAAAA,EAQiBC,cAAP,SAAqB3P,GAC3B,OAAO+H,GAAM/H,EAAIva,SAAS,KAAQW,SACnC,EAVHspB,EAYgBE,kBAAP,SAAyBC,EAAqBC,EAAmBC,GAGtE,GAFAD,EAAY9lB,GAAwB8lB,GAE9BC,EAAY,CAChB,IAAMC,EAAUjyB,KAAK4xB,cAAcI,EAAW/P,KACxCiQ,EAAuBjmB,GAAwB+lB,EAAWD,WAEhE,OAAOJ,EAASb,UAAUrc,mBAAmB,qBAAsB,CACjEuV,GAAM8H,GACNC,EACAE,EACAC,GAEH,CACC,OAAOP,EAASb,UAAUrc,mBAAmB,cAAe,CAACuV,GAAM8H,GAAgBC,GAEtF,EA5BHJ,EA8BgBQ,iBAAP,SACLrF,EACAgF,EACAC,EACAC,GAIA,GAFAD,EAAY9lB,GAAwB8lB,GAE9BC,EAAY,CAChB,IAAMC,EAAUjyB,KAAK4xB,cAAcI,EAAW/P,KACxCiQ,EAAuBjmB,GAAwB+lB,EAAWD,WAEhE,OAAOJ,EAASb,UAAUrc,mBAAmB,oBAAqB,CAChEqY,EAAM5qB,QACN8nB,GAAM8H,GACNC,EACAE,EACAC,GAEH,CACC,OAAOP,EAASb,UAAUrc,mBAAmB,aAAc,CAACqY,EAAM5qB,QAAS8nB,GAAM8H,GAAgBC,GAEpG,EApDHJ,EAsDgBS,gBAAP,WACL,OAAOT,EAASb,UAAUrc,mBAAmB,YAC9C,EAxDHkd,CAAA,IACgBA,GAAAb,UAAuB,IAAI5gB,GAAUmiB,GAAAA,ICGrD,IAAMC,GAAatI,GAAMlkB,IAAAA,SAAcA,IAAAA,aAAkBA,IAAAA,OAAY,GAAIA,IAAAA,OAAY,MAAOA,IAAAA,OAAY,KA8ExG,SAASysB,GAAOnB,GACd,OAAOxe,OAAOC,KAAKue,GAASoB,MAAK,SAAAC,GAAC,MAAU,cAANA,CAAJ,GACnC,CAwED,IAAsBC,GAAtB,WAME,SAAAA,IAAA,CANF,OAAAA,EAQiBC,aAAP,SAAoBjI,GAC1B,OAAOgI,EAA2B5B,UAAUrc,mBAAmB,qCAAsC,CACnGiW,EAAKvI,OAAOjgB,QACZwoB,EAAKrI,OAAOngB,QACZwoB,EAAKzI,IACL+H,GAAMU,EAAK/D,eAEd,EAfH+L,EAiBgBE,qBAAP,SAA4BlI,GACjC,MAAO,CACLmI,SAAU7yB,KAAK2yB,aAAajI,GAC5B9pB,MAAOopB,GAAM,GAEhB,EAtBH0I,EAwBgBI,kBAAP,SAAyBC,EAAoB3B,GACxCtrB,IAAAA,YAAiBitB,EAASxP,UAAWlV,KAA/C9N,GAAU,GAEV,IAAMswB,EAAsB,G,EAGiCkC,EAASzC,YAArD0C,EAAAC,EAAThI,QAAkCiI,EAAAD,EAATjI,QAG3BmI,EAAiBJ,EAAS/C,wBAAwBoB,EAAQ1B,mBAC1D0D,EAAapJ,GAAMmJ,EAAelI,SAClCoI,EAAarJ,GAAMmJ,EAAenI,SAElCyG,EAAWzH,GAAMoH,EAAQK,UAgB/B,GAbIc,GAAOnB,IAAYA,EAAQkC,YAC7BzC,EAAUhjB,KAAK7N,KAAK2yB,aAAaI,EAASrI,OAIxC0G,EAAQmC,cACV1C,EAAUhjB,KAAKqjB,GAAWC,aAAa4B,EAASrI,KAAKvI,OAAQiP,EAAQmC,eAEnEnC,EAAQoC,cACV3C,EAAUhjB,KAAKqjB,GAAWC,aAAa4B,EAASrI,KAAKrI,OAAQ+O,EAAQoC,eAInEjB,GAAOnB,GAAU,CACnB,IAAMW,EAAoB9lB,GAAwBmlB,EAAQW,WAE1DlB,EAAUhjB,KACR6kB,EAA2B5B,UAAUrc,mBAAmB,OAAQ,CAC9D,CACE0N,OAAQ4Q,EAASrI,KAAKvI,OAAOjgB,QAC7BmgB,OAAQ0Q,EAASrI,KAAKrI,OAAOngB,QAC7B+f,IAAK8Q,EAASrI,KAAKzI,IACnBmN,UAAW2D,EAAS3D,UACpBC,UAAW0D,EAAS1D,UACpB2D,eAAgBhJ,GAAMgJ,GACtBE,eAAgBlJ,GAAMkJ,GACtBE,WAAAA,EACAC,WAAAA,EACAtB,UAAAA,EACAN,SAAAA,KAIP,MAECZ,EAAUhjB,KACR6kB,EAA2B5B,UAAUrc,mBAAmB,oBAAqB,CAC3E,CACEgf,QAASzJ,GAAMoH,EAAQqC,SACvBT,eAAgBhJ,GAAMgJ,GACtBE,eAAgBlJ,GAAMkJ,GACtBE,WAAAA,EACAC,WAAAA,EACA5B,SAAAA,MAMR,IAAI7wB,EAAgBopB,GAAM,GAE1B,GAAIoH,EAAQsC,UAAW,CACrB,IAAMvpB,EAAUinB,EAAQsC,UAAUvpB,QACxB4oB,EAASrI,KAAKvI,OAAOvY,OAAOO,IAAY4oB,EAASrI,KAAKrI,OAAOzY,OAAOO,IAA9E5J,GAAU,GAEV,IAAMozB,EAAeZ,EAASrI,KAAKvI,OAAOvY,OAAOO,GAAW6oB,EAAiBE,EAGzEptB,IAAAA,YAAiB6tB,EAActlB,KACjCwiB,EAAUhjB,KAAK8jB,GAASS,mBAG1BxxB,EAAQopB,GAAM2J,EACf,CAED,MAAO,CACLd,SAAUlC,GAAUC,gBAAgBC,GACpCjwB,MAAAA,EAEH,EA7GH8xB,EA+GiBkB,cAAP,SAAqBxC,GAC3B,IAAMP,EAAsB,GAEtB4C,EAAUzJ,GAAMoH,EAAQqC,SAExBI,EACJzC,EAAQ0C,sBAAsB3qB,SAAS6C,UAAYolB,EAAQ2C,sBAAsB5qB,SAAS6C,SAEtF+lB,EAAY9lB,GAAwBmlB,EAAQW,WAclD,GAXAlB,EAAUhjB,KACR6kB,EAA2B5B,UAAUrc,mBAAmB,UAAW,CACjE,CACEgf,QAAAA,EACA1B,UAAW8B,EAAc3S,GAAe6Q,EACxCiC,WAAY1B,GACZ2B,WAAY3B,OAKduB,EAAa,CACf,IAAMK,EAAY9C,EAAQ0C,sBAAsB3qB,SAAS6C,SACrDolB,EAAQ0C,sBAAsBzrB,SAC9B+oB,EAAQ2C,sBAAsB1rB,SAC5BykB,EAAQsE,EAAQ0C,sBAAsB3qB,SAAS6C,SAChDolB,EAAQ2C,sBAAsB5qB,SAC9BioB,EAAQ0C,sBAAsB3qB,SAC7BgrB,EAAc/C,EAAQ0C,sBAAsB3qB,SAAS6C,SACvDolB,EAAQ2C,sBAAsB1rB,SAC9B+oB,EAAQ0C,sBAAsBzrB,SAElCwoB,EAAUhjB,KAAK8jB,GAASE,kBAAkBqC,EAAWnC,IACrDlB,EAAUhjB,KAAK8jB,GAASQ,iBAAiBrF,EAAOqH,EAAapC,GAC9D,CAED,OAAOlB,CACR,EArJH6B,EAuJgB0B,sBAAP,SAA6BhD,GAClC,IAAMP,EAAsB6B,EAA2BkB,cAAcxC,GAErE,MAAO,CACLyB,SAAUlC,GAAUC,gBAAgBC,GACpCjwB,MAAOopB,GAAM,GAEhB,EA9JH0I,EAsKgB2B,qBAAP,SAA4BtB,EAAoB3B,GACrD,IAAMP,EAAsB,GAEtBY,EAAWzH,GAAMoH,EAAQK,UACzBgC,EAAUzJ,GAAMoH,EAAQqC,SAGxBa,EAAkB,IAAInF,GAAS,CACnCzE,KAAMqI,EAASrI,KACfnH,UAAW6N,EAAQmD,oBAAoB7sB,SAASqrB,EAASxP,WAAWlb,SACpE+mB,UAAW2D,EAAS3D,UACpBC,UAAW0D,EAAS1D,YAEZvpB,IAAAA,YAAiBwuB,EAAgB/Q,UAAWlV,KAAtD9N,GAAU,G,MAG2C+zB,EAAgB/D,wBACnEa,EAAQ1B,mBADO0D,EAAAoB,EAATvJ,QAA8BoI,EAAAmB,EAATxJ,QAIzBoG,EAAQqD,QACV5D,EAAUhjB,KACR6kB,EAA2B5B,UAAUrc,mBAAmB,SAAU,CAChExI,GAAwBmlB,EAAQqD,OAAOC,SACvCjB,EACAzJ,GAAMoH,EAAQqD,OAAOhD,UACrBL,EAAQqD,OAAOlD,EACfH,EAAQqD,OAAO3N,EACfsK,EAAQqD,OAAOjD,KAMrBX,EAAUhjB,KACR6kB,EAA2B5B,UAAUrc,mBAAmB,oBAAqB,CAC3E,CACEgf,QAAAA,EACAlQ,UAAWyG,GAAMsK,EAAgB/Q,WACjC6P,WAAYpJ,GAAMoJ,GAClBC,WAAYrJ,GAAMqJ,GAClB5B,SAAAA,M,MAK4DL,EAAQuD,eAAlEb,EAAAc,EAAAd,sBAAuBC,EAAAa,EAAAb,sBAA0Bc,EAAAC,GAAAF,EAAA,mDAuBzD,OAtBA/D,EAAUhjB,KAAVia,MAAA+I,EACK6B,EAA2BkB,cAA3BtwB,GAAA,CACDmwB,QAASzJ,GAAMoH,EAAQqC,SAEvBK,sBAAuBA,EAAsB3sB,IAC3C8B,GAAeQ,cAAcqqB,EAAsB3qB,SAAUiqB,IAE/DW,sBAAuBA,EAAsB5sB,IAC3C8B,GAAeQ,cAAcsqB,EAAsB5qB,SAAUkqB,KAE5DwB,KAIHzD,EAAQmD,oBAAoB/sB,QAAQ8G,IAClC8iB,EAAQ2D,WACVlE,EAAUhjB,KAAK6kB,EAA2B5B,UAAUrc,mBAAmB,OAAQ,CAACgf,MAGlD,IAAtBrC,EAAQ2D,WAAlBx0B,GAAU,GAGL,CACLsyB,SAAUlC,GAAUC,gBAAgBC,GACpCjwB,MAAOopB,GAAM,GAEhB,EA/OH0I,EAiPgBsC,2BAAP,SAAkC5D,GACvC,IAGIyB,EAHEd,EAAY9lB,GAAwBmlB,EAAQW,WAC5CkD,EAAShpB,GAAwBmlB,EAAQ6D,QAe/C,OAXEpC,EADEzB,EAAQ1d,KACCgf,EAA2B5B,UAAUrc,mBAC9C,kDACA,CAACwgB,EAAQlD,EAAW/H,GAAMoH,EAAQqC,SAAUrC,EAAQ1d,OAG3Cgf,EAA2B5B,UAAUrc,mBAAmB,4CAA6C,CAC9GwgB,EACAlD,EACA/H,GAAMoH,EAAQqC,WAGX,CACLZ,SAAUA,EACVjyB,MAAOopB,GAAM,GAEhB,EAtQH0I,CAAA,IACgBA,GAAA5B,UAAuB,IAAI5gB,GAAUglB,GAAAA,IC5IrD,IAAsBC,GAAtB,oBAAAA,IAAA,QAAAA,EAegBC,oBAAP,SACL/K,EACAjG,EACAiR,EACAjE,QAAA,IAAAA,IAAAA,EAAwB,CAAC,GAEzB,IAEIyB,EAFEyC,EAAmC,IAAvBjL,EAAMI,MAAMxf,OACxBE,EAAsB6e,GAAM5F,EAAO/b,UAEnCktB,EAA2BnE,EAAQoE,YAAcx1B,KAAKy1B,YAAcz1B,KAAK01B,YAE/E,GAAIJ,EAAW,KAAAK,EAAAC,EACPC,EAAmC,CACvCC,QAASzL,EAAM0L,UAAU,GAAG7zB,QAC5B8zB,SAAU3L,EAAM0L,UAAU,GAAG7zB,QAC7B+f,IAAKoI,EAAMI,MAAM,GAAGxI,IACpBmL,kBAAmBpD,GAAK,OAAA2L,EAAA,OAAAC,EAACxE,QAAD,EAACwE,EAASxI,mBAAVuI,EAA+B,IAGnDM,EAAa3yB,GAAA,GACduyB,EACCR,GAAa9yB,EAAU2zB,YAAc,CAAEpS,SAAU3Y,GAAgB,CAAEiZ,OAAQjZ,IAG3EgrB,EAAgB,CACpBN,EAAgBC,QAChBD,EAAgBG,SAChBH,EAAgB5T,IAChB9W,EACA0qB,EAAgBzI,mBAGZgJ,EACJf,IAAc9yB,EAAU2zB,YAAc,wBAA0B,yBAClErD,EAAW0C,EAAc9gB,mBACvB2hB,EACAhF,EAAQoE,YAAc,CAACS,GAAiBE,EAE3C,KAAM,KAAAE,OACoCC,KAAxB,OAAPD,EAAAjF,QAAA,EAAAiF,EAASjJ,oBAAnB7sB,GAAU,GACV,IAAMqqB,EAAeR,GAAkBC,EAAOgL,IAAc9yB,EAAUg0B,cAChEC,EAAwBnB,IAAc9yB,EAAU2zB,YAAc,kBAAoB,mBACxFrD,EAAW0C,EAAc9gB,mBAAmB+hB,EAAuB,CAAC5L,EAAMzf,GAC3E,CACD,MAAO,CACL0nB,SAAAA,EACAjyB,MAAOopB,GAAM,GAEhB,EA/DHmL,CAAA,IACgBA,GAAAO,YAAyB,IAAIxlB,GAAUumB,GAAAA,IACvCtB,GAAAM,YAAyB,IAAIvlB,GAAUwmB,GAAAA,I,IC+BjCC,GAAtB,WAGE,SAAAA,IAAA,CAHF,OAAAA,EAaiBC,YAAP,SAAmBC,EAA4BzF,G,MAC/CP,EAAsB,GAC5BA,EAAUhjB,KACR8oB,EAAO7F,UAAUrc,mBAAmB,eAAgB,CAClDzU,KAAK82B,oBAAoBD,GACzB7M,GAAMoH,EAAQqC,YAGlB,IAAM1B,EAAoB9lB,GAAwBmlB,EAAQW,WACpD3N,EAAM,OAAA2S,EAAG3F,EAAQhN,QAAX2S,EAAqB,EAIjC,OAHAlG,EAAUhjB,KACR8oB,EAAO7F,UAAUrc,mBAAmB,cAAe,CAACoiB,EAAaG,YAAY90B,QAAS6vB,EAAW/H,GAAM5F,MAElGyM,CACR,EA3BH8F,EAsCgBM,eAAP,SAAsBC,EAA8C9F,GACzE8F,EAAgBrsB,MAAMuL,QAAQ8gB,GAAiBA,EAAgB,CAACA,GAGhE,IAFA,IAAIrG,EAAsB,GAEjBtZ,EAAI,EAAGA,EAAI2f,EAAcjsB,OAAQsM,IAAK,CAE7C,IAAMsf,EAAeK,EAAc3f,GAEnCsZ,EAAYA,EAAUhwB,OAAOb,KAAK42B,YAAYC,EAAczF,IAE5DP,EAAUhjB,KACR8oB,EAAO7F,UAAUrc,mBAAmB,aAAc,CAChDzU,KAAK82B,oBAAoBD,GACzB7M,GAAMoH,EAAQqC,WAGnB,CACD,MAAO,CACLZ,SAAUlC,GAAUC,gBAAgBC,GACpCjwB,MAAOopB,GAAM,GAEhB,EA3DH2M,EAmEgBQ,cAAP,SACLD,EACAE,GAEA,IAAIvG,EAAsB,GAE1BqG,EAAgBrsB,MAAMuL,QAAQ8gB,GAAiBA,EAAgB,CAACA,GAQhE,IANA,IAAMG,EAAe,CACnB5D,QAAS2D,EAAgB3D,QACzB1B,UAAWqF,EAAgBrF,UAC3B3N,OAAQgT,EAAgBhT,QAGjB7M,EAAI,EAAGA,EAAI2f,EAAcjsB,OAAQsM,IAAK,CAC7C,IAAMsf,EAAeK,EAAc3f,GACnCsZ,EAAYA,EAAUhwB,OAAOb,KAAK42B,YAAYC,EAAcQ,GAC7D,CACD,IAAMC,EAAQrrB,GAAwBmrB,EAAgBE,OAQtD,OAPAzG,EAAUhjB,KACR8oB,EAAO7F,UAAUrc,mBAAmB,gBAAiB,CACnDuV,GAAMoN,EAAgB3D,SACtB6D,EACAF,EAAgB1jB,KAAO0jB,EAAgB1jB,KAAOsW,GAAM,MAGjD,CACL6I,SAAUlC,GAAUC,gBAAgBC,GACpCjwB,MAAOopB,GAAM,GAEhB,EAjGH2M,EAwGgBY,cAAP,SAAqBL,GAE1B,IAAIxjB,EAEJ,GAHAwjB,EAAgBrsB,MAAMuL,QAAQ8gB,GAAiBA,EAAgB,CAACA,GAG5DA,EAAcjsB,OAAS,EAAG,CAE5B,IADA,IAAM4H,EAAO,GACJ0E,EAAI,EAAGA,EAAI2f,EAAcjsB,OAAQsM,IAAK,CAC7C,IAAMsf,EAAeK,EAAc3f,GACnC1E,EAAKhF,KAAK7N,KAAK82B,oBAAoBD,GACpC,CACDnjB,EAAOzB,GAAAA,EAAgB8B,OAAO,CAAI4iB,EAAOa,kBAAX,MAAmC,CAAC3kB,GACnE,MACCa,EAAOzB,GAAAA,EAAgB8B,OAAO,CAAC4iB,EAAOa,mBAAoB,CAACx3B,KAAK82B,oBAAoBI,EAAc,MAEpG,OAAOxjB,CACR,EAvHHijB,EA6HiBG,oBAAP,SAA2BD,G,MACDA,EAAanM,KAArCvI,EAAAsV,EAAAtV,OAAQE,EAAAoV,EAAApV,OAAQJ,EAAAwV,EAAAxV,IAClByV,EAAWzrB,GAAwB4qB,EAAaa,UACtD,MAAO,CACLV,YAAaH,EAAaG,YAAY90B,QACtCwoB,KAAM6B,GAAKrgB,WAAWiW,EAAQE,EAAQJ,GACtC0V,UAAW3N,GAAM6M,EAAac,WAC9BC,QAAS5N,GAAM6M,EAAae,SAC5BF,SAAAA,EAEH,EAvIHf,CAAA,IACgBA,GAAA7F,UAAuB,IAAI5gB,GAAU2nB,GAAAA,IAGpClB,GAAAa,kBACb,iGCvBJ,IAAsBM,GAAtB,WAME,SAAAA,IAAA,CANF,OAAAA,EAagBC,mBAAP,SACLC,EACA5G,GAEKvmB,MAAMuL,QAAQ4hB,KACjBA,EAAS,CAACA,IAGZ,IAAMC,EAAcD,EAAO,GACrBlC,EAAUmC,EAAY5qB,YAAYlE,SAASgB,QAC3C6rB,EAAWiC,EAAY3qB,aAAanE,SAASgB,QAIjD6tB,EAAOjP,OAAM,SAAAmP,GAAK,OAAIA,EAAM7qB,YAAYlE,SAASgB,QAAQP,OAAOksB,EAA9C,KADpBv1B,GAAU,GAKRy3B,EAAOjP,OAAM,SAAAmP,GAAK,OAAIA,EAAM5qB,aAAanE,SAASgB,QAAQP,OAAOosB,EAA/C,KADpBz1B,GAAU,GAKV,IAAMswB,EAAsB,GAEtBsH,EAAoClvB,GAAeQ,cAAcuuB,EAAO,GAAG3qB,YAAYlE,SAAU,GACjGivB,EAAqCnvB,GAAeQ,cAAcuuB,EAAO,GAAG1qB,aAAanE,SAAU,GAEnGkvB,EAA2CL,EAAO51B,QACtD,SAAC8gB,EAAKgV,GAAN,OAAgBhV,EAAI/b,IAAI+wB,EAAMI,iBAAiBlH,EAAQ1B,mBAAvD,GACA0I,GAIIG,EAAaN,EAAY5qB,YAAYlE,SAAS6C,UAAYisB,EAAY5C,YAAc9yB,EAAUg0B,aAC9FiC,EAAgBP,EAAY5qB,YAAYlE,SAAS6C,SAEjDysB,EAAiBR,EAAY3qB,aAAanE,SAAS6C,SACnD0sB,EAAoBD,KAAoBrH,EAAQnP,IAEhD0W,EAAuCH,EACzCR,EAAO51B,QAAO,SAAC8gB,EAAKgV,GAAN,OAAgBhV,EAAI/b,IAAI+wB,EAAMU,gBAAgBxH,EAAQ1B,mBAAtD,GAA2EyI,GACzFA,EAGA/G,EAAQyH,mBACAZ,EAAY5qB,YAAYlE,SAASe,SAA3C3J,GAAU,GACVswB,EAAUhjB,KAAKqjB,GAAWC,aAAa8G,EAAY5qB,YAAYlE,SAAUioB,EAAQyH,oBAMnF,IAHA,IAGArT,EAHMuM,EAAoB9lB,GAAwBmlB,EAAQW,WACpDN,EAAWzH,GAAMoH,EAAQK,UAE/B/L,EAAAC,GAAoBqS,KAApBxS,EAAAE,KAAAhI,MACE,IAD0B,IAC1Bob,EADSZ,EAAiB1S,EAAA5kB,MAC1Bm4B,EAAApT,GAAmDuS,EAAMc,SAAzDF,EAAAC,KAAArb,MAAgE,KAAAub,EAAAH,EAAAl4B,MAAnDypB,EAAmD4O,EAAnD5O,MAAOhd,EAA4C4rB,EAA5C5rB,YAAaC,EAA+B2rB,EAA/B3rB,aACzBwW,EAAmBkG,GAAMkO,EAAMU,gBAAgBxH,EAAQ1B,kBAAmBriB,GAAahF,UACvF8b,EAAoB6F,GAAMkO,EAAMI,iBAAiBlH,EAAQ1B,kBAAmBpiB,GAAcjF,UAG1FitB,EAAmC,IAAvBjL,EAAMI,MAAMxf,OAE9B,GAAIqqB,EACF,GAAI4C,EAAM7C,YAAc9yB,EAAU2zB,YAAa,KAAAP,EACvCuD,EAAyB,CAC7BpD,QAASzL,EAAM0L,UAAU,GAAG7zB,QAC5B8zB,SAAU3L,EAAM0L,UAAU,GAAG7zB,QAC7B+f,IAAKoI,EAAMI,MAAM,GAAGxI,IACpB8P,UAAW2G,EAAoBxX,GAAe6Q,EAC9CN,SAAAA,EACA3N,SAAAA,EACAqV,iBAAkBhV,EAClBiJ,kBAAmBpD,GAAK,OAAA2L,EAACvE,EAAQhE,mBAATuI,EAA8B,IAGxD9E,EAAUhjB,KAAKiqB,EAAWhH,UAAUrc,mBAAmB,mBAAoB,CAACykB,IAC7E,KAAM,KAAAE,EACCC,EAA0B,CAC9BvD,QAASzL,EAAM0L,UAAU,GAAG7zB,QAC5B8zB,SAAU3L,EAAM0L,UAAU,GAAG7zB,QAC7B+f,IAAKoI,EAAMI,MAAM,GAAGxI,IACpB8P,UAAW2G,EAAoBxX,GAAe6Q,EAC9CN,SAAAA,EACAtN,UAAAA,EACAmV,gBAAiBxV,EACjBsJ,kBAAmBpD,GAAK,OAAAoP,EAAChI,EAAQhE,mBAATgM,EAA8B,IAGxDvI,EAAUhjB,KAAKiqB,EAAWhH,UAAUrc,mBAAmB,oBAAqB,CAAC4kB,IAC9E,KACI,MACmC/C,IAA9BlF,EAAQhE,mBAAlB7sB,GAAU,GAEV,IAAMqqB,EAAeR,GAAkBC,EAAO6N,EAAM7C,YAAc9yB,EAAUg0B,cAE5E,GAAI2B,EAAM7C,YAAc9yB,EAAU2zB,YAAa,CAC7C,IAAMqD,EAAmB,CACvB3O,KAAAA,EACAmH,UAAW2G,EAAoBxX,GAAe6Q,EAC9CN,SAAAA,EACA3N,SAAAA,EACAqV,iBAAkBhV,GAGpB0M,EAAUhjB,KAAKiqB,EAAWhH,UAAUrc,mBAAmB,aAAc,CAAC8kB,IACvE,KAAM,CACL,IAAMC,EAAoB,CACxB5O,KAAAA,EACAmH,UAAW2G,EAAoBxX,GAAe6Q,EAC9CN,SAAAA,EACAtN,UAAAA,EACAmV,gBAAiBxV,GAGnB+M,EAAUhjB,KAAKiqB,EAAWhH,UAAUrc,mBAAmB,cAAe,CAAC+kB,IACxE,CACF,CACF,CA4BH,OAxBId,IACItH,EAAQnP,IACRwW,EACF5H,EAAUhjB,KAAK8jB,GAASE,kBAAkBwG,EAAehwB,SAAU0pB,EAAWX,EAAQnP,MAEtF4O,EAAUhjB,KACR8jB,GAASQ,iBACP8F,EAAY3qB,aAAanE,SAASgB,QAClCkuB,EAAehwB,SACf0pB,EACAX,EAAQnP,MAKd4O,EAAUhjB,KAAK8jB,GAASE,kBAAkBwG,EAAehwB,SAAU0pB,KAKnEwG,GACF1H,EAAUhjB,KAAK8jB,GAASS,mBAGnB,CACLS,SAAUlC,GAAUC,gBAAgBC,GACpCjwB,MAAOopB,GAAM2O,EAAWtwB,UAE3B,EAhKHyvB,CAAA,IACgBA,GAAAhH,UAAuB,IAAI5gB,GAAUupB,GAAAA,IC5CrD,QACA7tB,KAAA,MACA8H,IAAAA,GACA,QACA,EACAgmB,MAAA,GACAC,WAAA,GACAC,OAAAA,GAAA,EACAC,OAAAA,GACAC,QAAAjiB,IAAAkiB,EAeA,EACAC,QAAA,IChCmP,M,WCO/OC,IAAY,QACd,GACAn6B,EACAK,GACA,EACA,KACA,WACA,MAIF,GAAe85B,GAAiB,O,qCCZ/B,SAAWC,GACV,aACA,IAAIh0B,EAYFyC,EAAK,GAULC,EAAK,EAGLuxB,EAAS,IAGTC,EAAY,IAOZC,GAAM,EAQNC,EAAK,GAOLC,EAAO,YACPC,EAAUD,EAAO,WACjBE,EAAaD,EAAU,iBACvBE,EAAaF,EAAU,gBACvBG,EAAcJ,EAAO,mBAGrBK,EAAI,CAAC,EACLC,OAAY,EACZC,EAAU,uCAOZ,SAASC,IAQP,SAAS70B,EAAI80B,GACX,IAAIpsB,EAAI5O,KAGR,KAAM4O,aAAa1I,GAAM,OAAO80B,IAAMH,EAAYE,IAAU,IAAI70B,EAAI80B,GAGhEA,aAAa90B,GACf0I,EAAE4iB,EAAIwJ,EAAExJ,EACR5iB,EAAEqsB,EAAID,EAAEC,EACRrsB,EAAEssB,EAAIF,EAAEE,EAAE7mB,SAEV9D,EAAM3B,EAAGosB,GAOXpsB,EAAEuB,YAAcjK,CAClB,CASA,OAPAA,EAAIe,UAAY2zB,EAChB10B,EAAIyC,GAAKA,EACTzC,EAAI0C,GAAKA,EACT1C,EAAIm0B,GAAKA,EACTn0B,EAAIo0B,GAAKA,EACTp0B,EAAIiJ,QAAU,QAEPjJ,CACT,CASA,SAASqK,EAAM3B,EAAGosB,GAChB,IAAIC,EAAG1jB,EAAG4jB,EAGV,GAAU,IAANH,GAAW,EAAIA,EAAI,EAAGA,EAAI,UACzB,IAAKF,EAAQxuB,KAAK0uB,GAAK,IAAK,MAAMt6B,MAAM85B,EAAU,UAwBvD,IArBA5rB,EAAE4iB,EAAmB,KAAfwJ,EAAEnb,OAAO,IAAamb,EAAIA,EAAE3mB,MAAM,IAAK,GAAK,GAG7C4mB,EAAID,EAAEvoB,QAAQ,OAAS,IAAGuoB,EAAIA,EAAEI,QAAQ,IAAK,MAG7C7jB,EAAIyjB,EAAEK,OAAO,OAAS,GAGrBJ,EAAI,IAAGA,EAAI1jB,GACf0jB,IAAMD,EAAE3mB,MAAMkD,EAAI,GAClByjB,EAAIA,EAAErjB,UAAU,EAAGJ,IACV0jB,EAAI,IAGbA,EAAID,EAAE/vB,QAGRkwB,EAAKH,EAAE/vB,OAGFsM,EAAI,EAAGA,EAAI4jB,GAAqB,KAAfH,EAAEnb,OAAOtI,MAAcA,EAE7C,GAAIA,GAAK4jB,EAGPvsB,EAAEssB,EAAI,CAACtsB,EAAEqsB,EAAI,OACR,CAGL,KAAOE,EAAK,GAAuB,KAAlBH,EAAEnb,SAASsb,KAK5B,IAJAvsB,EAAEqsB,EAAIA,EAAI1jB,EAAI,EACd3I,EAAEssB,EAAI,GAGDD,EAAI,EAAG1jB,GAAK4jB,GAAKvsB,EAAEssB,EAAED,MAAQD,EAAEnb,OAAOtI,IAC7C,CAEA,OAAO3I,CACT,CAYA,SAAS0sB,EAAM1sB,EAAG2sB,EAAIC,EAAIC,GACxB,IAAIC,EAAK9sB,EAAEssB,EACT3jB,EAAI3I,EAAEqsB,EAAIM,EAAK,EAEjB,GAAIhkB,EAAImkB,EAAGzwB,OAAQ,CACjB,GAAW,IAAPuwB,EAGFC,EAAOC,EAAGnkB,IAAM,OACX,GAAW,IAAPikB,EACTC,EAAOC,EAAGnkB,GAAK,GAAc,GAATmkB,EAAGnkB,KACpBkkB,GAAQlkB,EAAI,GAAKmkB,EAAGnkB,EAAI,KAAOsjB,GAAyB,EAAZa,EAAGnkB,EAAI,SACjD,GAAW,IAAPikB,EACTC,EAAOA,KAAUC,EAAG,QAGpB,GADAD,GAAO,EACI,IAAPD,EAAU,MAAM96B,MAAMg6B,GAG5B,GAAInjB,EAAI,EACNmkB,EAAGzwB,OAAS,EAERwwB,GAGF7sB,EAAEqsB,GAAKM,EACPG,EAAG,GAAK,GAIRA,EAAG,GAAK9sB,EAAEqsB,EAAI,MAEX,CAML,GAHAS,EAAGzwB,OAASsM,IAGRkkB,EAGF,OAASC,EAAGnkB,GAAK,GACfmkB,EAAGnkB,GAAK,EACHA,QACD3I,EAAEqsB,EACJS,EAAGC,QAAQ,IAMjB,IAAKpkB,EAAImkB,EAAGzwB,QAASywB,IAAKnkB,IAAKmkB,EAAGvtB,KACpC,CACF,MAAO,GAAIqtB,EAAK,GAAKA,EAAK,GAAKA,MAASA,EACtC,MAAM96B,MAAMg6B,GAGd,OAAO9rB,CACT,CAgBA,SAASkD,EAAUlD,EAAGC,EAAImsB,EAAGvI,GAC3B,IAAIwI,EAAGzJ,EACLtrB,EAAM0I,EAAEuB,YACRxB,GAAKC,EAAEssB,EAAE,GAEX,GAAIF,IAAMH,EAAW,CACnB,GAAIG,MAAQA,GAAKA,GAAW,GAANnsB,IAAYmsB,EAAIb,EACpC,MAAMz5B,MAAY,GAANmO,EAAU2rB,EAAU,YAAcC,GAehD,IAZA7rB,EAAI,IAAI1I,EAAI0I,GAGZosB,EAAIvI,EAAI7jB,EAAEqsB,EAGNrsB,EAAEssB,EAAEjwB,SAAWwnB,GAAG6I,EAAM1sB,EAAGosB,EAAG90B,EAAI0C,IAG5B,GAANiG,IAAS4jB,EAAI7jB,EAAEqsB,EAAID,EAAI,GAGpBpsB,EAAEssB,EAAEjwB,OAASwnB,GAAI7jB,EAAEssB,EAAErtB,KAAK,EACnC,CAOA,GALAotB,EAAIrsB,EAAEqsB,EACNzJ,EAAI5iB,EAAEssB,EAAEU,KAAK,IACbZ,EAAIxJ,EAAEvmB,OAGI,GAAN4D,IAAkB,GAANA,GAAiB,GAANA,GAAW4jB,GAAKwI,GAAKA,GAAK/0B,EAAIm0B,IAAMY,GAAK/0B,EAAIo0B,IACtE9I,EAAIA,EAAE3R,OAAO,IAAMmb,EAAI,EAAI,IAAMxJ,EAAEnd,MAAM,GAAK,KAAO4mB,EAAI,EAAI,IAAM,MAAQA,OAGtE,GAAIA,EAAI,EAAG,CAChB,OAASA,GAAIzJ,EAAI,IAAMA,EACvBA,EAAI,KAAOA,CACb,MAAO,GAAIyJ,EAAI,EACb,KAAMA,EAAID,EAAG,IAAKC,GAAKD,EAAGC,KAAMzJ,GAAK,SAC5ByJ,EAAID,IAAGxJ,EAAIA,EAAEnd,MAAM,EAAG4mB,GAAK,IAAMzJ,EAAEnd,MAAM4mB,SACzCD,EAAI,IACbxJ,EAAIA,EAAE3R,OAAO,GAAK,IAAM2R,EAAEnd,MAAM,IAGlC,OAAOzF,EAAE4iB,EAAI,KAAO7iB,GAAW,GAANE,GAAW,IAAM2iB,EAAIA,CAChD,CASAoJ,EAAEiB,IAAM,WACN,IAAIjtB,EAAI,IAAI5O,KAAKmQ,YAAYnQ,MAE7B,OADA4O,EAAE4iB,EAAI,EACC5iB,CACT,EAQAgsB,EAAEkB,IAAM,SAAUrZ,GAChB,IAAIsZ,EACFntB,EAAI5O,KACJ07B,EAAK9sB,EAAEssB,EACPc,GAAMvZ,EAAI,IAAI7T,EAAEuB,YAAYsS,IAAIyY,EAChC3jB,EAAI3I,EAAE4iB,EACNzf,EAAI0Q,EAAE+O,EACNiB,EAAI7jB,EAAEqsB,EACN5R,EAAI5G,EAAEwY,EAGR,IAAKS,EAAG,KAAOM,EAAG,GAAI,OAAQN,EAAG,GAAuBnkB,EAAjBykB,EAAG,IAAUjqB,EAAL,EAG/C,GAAIwF,GAAKxF,EAAG,OAAOwF,EAKnB,GAHAwkB,EAAQxkB,EAAI,EAGRkb,GAAKpJ,EAAG,OAAOoJ,EAAIpJ,EAAI0S,EAAQ,GAAK,EAKxC,IAHAhqB,GAAK0gB,EAAIiJ,EAAGzwB,SAAWoe,EAAI2S,EAAG/wB,QAAUwnB,EAAIpJ,EAGvC9R,GAAK,IAAKA,EAAIxF,GACjB,GAAI2pB,EAAGnkB,IAAMykB,EAAGzkB,GAAI,OAAOmkB,EAAGnkB,GAAKykB,EAAGzkB,GAAKwkB,EAAQ,GAAK,EAI1D,OAAOtJ,GAAKpJ,EAAI,EAAIoJ,EAAIpJ,EAAI0S,EAAQ,GAAK,CAC3C,EAOAnB,EAAEryB,IAAM,SAAUka,GAChB,IAAI7T,EAAI5O,KACNkG,EAAM0I,EAAEuB,YACRyS,EAAIhU,EAAEssB,EACNrY,GAAKJ,EAAI,IAAIvc,EAAIuc,IAAIyY,EACrBzI,EAAI7jB,EAAE4iB,GAAK/O,EAAE+O,EAAI,GAAK,EACtB+J,EAAKr1B,EAAIyC,GAEX,GAAI4yB,MAASA,GAAMA,EAAK,GAAKA,EAAKpB,EAAQ,MAAMz5B,MAAM+5B,GAGtD,IAAK5X,EAAE,GAAI,MAAMniB,MAAMi6B,GAGvB,IAAK/X,EAAE,GAAI,OAAO,IAAI1c,EAAQ,EAAJusB,GAE1B,IAAIwJ,EAAIC,EAAIlB,EAAGc,EAAKK,EAClBC,EAAKvZ,EAAExO,QACPgoB,EAAKJ,EAAKpZ,EAAE5X,OACZqxB,EAAK1Z,EAAE3X,OACP6b,EAAIlE,EAAEvO,MAAM,EAAG4nB,GACfM,EAAKzV,EAAE7b,OACPuxB,EAAI/Z,EACJga,EAAKD,EAAEtB,EAAI,GACXwB,EAAK,EACLC,EAAIpB,GAAMiB,EAAEvB,EAAIrsB,EAAEqsB,EAAIxY,EAAEwY,GAAK,EAS/B,IAPAuB,EAAEhL,EAAIiB,EACNA,EAAIkK,EAAI,EAAI,EAAIA,EAGhBP,EAAGT,QAAQ,GAGJY,IAAON,GAAKnV,EAAEjZ,KAAK,GAE1B,EAAG,CAGD,IAAKmtB,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAGvB,GAAIiB,IAAOM,EAAKzV,EAAE7b,QAChB6wB,EAAMG,EAAKM,EAAK,GAAK,OAErB,IAAKJ,GAAM,EAAGL,EAAM,IAAKK,EAAKF,GAC5B,GAAIpZ,EAAEsZ,IAAOrV,EAAEqV,GAAK,CAClBL,EAAMjZ,EAAEsZ,GAAMrV,EAAEqV,GAAM,GAAK,EAC3B,KACF,CAKJ,KAAIL,EAAM,GAgBR,MAZA,IAAKI,EAAKK,GAAMN,EAAKpZ,EAAIuZ,EAAIG,GAAK,CAChC,GAAIzV,IAAIyV,GAAML,EAAGK,GAAK,CAEpB,IADAJ,EAAKI,EACEJ,IAAOrV,IAAIqV,IAAMrV,EAAEqV,GAAM,IAC9BrV,EAAEqV,GACJrV,EAAEyV,IAAO,EACX,CACAzV,EAAEyV,IAAOL,EAAGK,EACd,CAEA,MAAQzV,EAAE,IAAKA,EAAE8V,OAIrB,CAGAH,EAAGC,KAAQZ,EAAMd,IAAMA,EAGnBlU,EAAE,IAAMgV,EAAKhV,EAAEyV,GAAM3Z,EAAEyZ,IAAO,EAC7BvV,EAAI,CAAClE,EAAEyZ,GAEd,QAAUA,IAAOC,GAAMxV,EAAE,KAAO+T,IAAcpI,KAa9C,OAVKgK,EAAG,IAAY,GAANC,IAGZD,EAAGG,QACHJ,EAAEvB,KAIAyB,EAAKC,GAAGrB,EAAMkB,EAAGjB,EAAIr1B,EAAI0C,GAAIke,EAAE,KAAO+T,GAEnC2B,CACT,EAMA5B,EAAEiC,GAAK,SAAUpa,GACf,OAAQziB,KAAK87B,IAAIrZ,EACnB,EAOAmY,EAAEkC,GAAK,SAAUra,GACf,OAAOziB,KAAK87B,IAAIrZ,GAAK,CACvB,EAOAmY,EAAEmC,IAAM,SAAUta,GAChB,OAAOziB,KAAK87B,IAAIrZ,IAAM,CACxB,EAMAmY,EAAEoC,GAAK,SAAUva,GACf,OAAOziB,KAAK87B,IAAIrZ,GAAK,CACvB,EAOAmY,EAAErR,IAAM,SAAU9G,GAChB,OAAOziB,KAAK87B,IAAIrZ,GAAK,CACvB,EAMAmY,EAAEqC,MAAQrC,EAAEsC,IAAM,SAAUza,GAC1B,IAAIlL,EAAGxF,EAAGsa,EAAG8Q,EACXvuB,EAAI5O,KACJkG,EAAM0I,EAAEuB,YACRyS,EAAIhU,EAAE4iB,EACN3O,GAAKJ,EAAI,IAAIvc,EAAIuc,IAAI+O,EAGvB,GAAI5O,GAAKC,EAEP,OADAJ,EAAE+O,GAAK3O,EACAjU,EAAEwuB,KAAK3a,GAGhB,IAAIiZ,EAAK9sB,EAAEssB,EAAE7mB,QACXgpB,EAAKzuB,EAAEqsB,EACPe,EAAKvZ,EAAEyY,EACPoC,EAAK7a,EAAEwY,EAGT,IAAKS,EAAG,KAAOM,EAAG,GAGhB,OAAOA,EAAG,IAAMvZ,EAAE+O,GAAK3O,EAAGJ,GAAK,IAAIvc,EAAIw1B,EAAG,GAAK9sB,EAAI,GAIrD,GAAIgU,EAAIya,EAAKC,EAAI,CAWf,KATIH,EAAOva,EAAI,IACbA,GAAKA,EACLyJ,EAAIqP,IAEJ4B,EAAKD,EACLhR,EAAI2P,GAGN3P,EAAE3M,UACGmD,EAAID,EAAGC,KAAMwJ,EAAExe,KAAK,GACzBwe,EAAE3M,SACJ,MAKE,IAFA3N,IAAMorB,EAAOzB,EAAGzwB,OAAS+wB,EAAG/wB,QAAUywB,EAAKM,GAAI/wB,OAE1C2X,EAAIC,EAAI,EAAGA,EAAI9Q,EAAG8Q,IACrB,GAAI6Y,EAAG7Y,IAAMmZ,EAAGnZ,GAAI,CAClBsa,EAAOzB,EAAG7Y,GAAKmZ,EAAGnZ,GAClB,KACF,CAgBJ,GAXIsa,IACF9Q,EAAIqP,EACJA,EAAKM,EACLA,EAAK3P,EACL5J,EAAE+O,GAAK/O,EAAE+O,IAON3O,GAAK9Q,EAAIiqB,EAAG/wB,SAAWsM,EAAImkB,EAAGzwB,SAAW,EAAG,KAAO4X,KAAM6Y,EAAGnkB,KAAO,EAGxE,IAAKsL,EAAItL,EAAGxF,EAAI6Q,GAAI,CAClB,GAAI8Y,IAAK3pB,GAAKiqB,EAAGjqB,GAAI,CACnB,IAAKwF,EAAIxF,EAAGwF,IAAMmkB,IAAKnkB,IAAKmkB,EAAGnkB,GAAK,IAClCmkB,EAAGnkB,GACLmkB,EAAG3pB,IAAM,EACX,CAEA2pB,EAAG3pB,IAAMiqB,EAAGjqB,EACd,CAGA,KAAmB,IAAZ2pB,IAAK7Y,IAAW6Y,EAAGvtB,MAG1B,KAAiB,IAAVutB,EAAG,IACRA,EAAGkB,UACDU,EAeJ,OAZK5B,EAAG,KAGNjZ,EAAE+O,EAAI,EAGNkK,EAAK,CAAC4B,EAAK,IAGb7a,EAAEyY,EAAIQ,EACNjZ,EAAEwY,EAAIqC,EAEC7a,CACT,EAMAmY,EAAE2C,IAAM,SAAU9a,GAChB,IAAI+a,EACF5uB,EAAI5O,KACJkG,EAAM0I,EAAEuB,YACRyS,EAAIhU,EAAE4iB,EACN3O,GAAKJ,EAAI,IAAIvc,EAAIuc,IAAI+O,EAEvB,IAAK/O,EAAEyY,EAAE,GAAI,MAAMx6B,MAAMi6B,GAOzB,OALA/rB,EAAE4iB,EAAI/O,EAAE+O,EAAI,EACZgM,EAAmB,GAAZ/a,EAAEqZ,IAAIltB,GACbA,EAAE4iB,EAAI5O,EACNH,EAAE+O,EAAI3O,EAEF2a,EAAa,IAAIt3B,EAAI0I,IAEzBgU,EAAI1c,EAAIyC,GACRka,EAAI3c,EAAI0C,GACR1C,EAAIyC,GAAKzC,EAAI0C,GAAK,EAClBgG,EAAIA,EAAErG,IAAIka,GACVvc,EAAIyC,GAAKia,EACT1c,EAAI0C,GAAKia,EAEF7iB,KAAKi9B,MAAMruB,EAAE6uB,MAAMhb,IAC5B,EAMAmY,EAAEwC,KAAOxC,EAAEzzB,IAAM,SAAUsb,GACzB,IAAI4J,EACFzd,EAAI5O,KACJkG,EAAM0I,EAAEuB,YACRyS,EAAIhU,EAAE4iB,EACN3O,GAAKJ,EAAI,IAAIvc,EAAIuc,IAAI+O,EAGvB,GAAI5O,GAAKC,EAEP,OADAJ,EAAE+O,GAAK3O,EACAjU,EAAEquB,MAAMxa,GAGjB,IAAI4a,EAAKzuB,EAAEqsB,EACTS,EAAK9sB,EAAEssB,EACPoC,EAAK7a,EAAEwY,EACPe,EAAKvZ,EAAEyY,EAGT,IAAKQ,EAAG,KAAOM,EAAG,GAAI,OAAOA,EAAG,GAAKvZ,EAAI,IAAIvc,EAAIw1B,EAAG,GAAK9sB,EAAQ,EAAJgU,GAM7D,GAJA8Y,EAAKA,EAAGrnB,QAIJuO,EAAIya,EAAKC,EAAI,CAUf,IATI1a,EAAI,GACN0a,EAAKD,EACLhR,EAAI2P,IAEJpZ,GAAKA,EACLyJ,EAAIqP,GAGNrP,EAAE3M,UACKkD,KAAMyJ,EAAExe,KAAK,GACpBwe,EAAE3M,SACJ,CAYA,IATIgc,EAAGzwB,OAAS+wB,EAAG/wB,OAAS,IAC1BohB,EAAI2P,EACJA,EAAKN,EACLA,EAAKrP,GAGPzJ,EAAIoZ,EAAG/wB,OAGF4X,EAAI,EAAGD,EAAG8Y,EAAG9Y,IAAM,GAAIC,GAAK6Y,IAAK9Y,GAAK8Y,EAAG9Y,GAAKoZ,EAAGpZ,GAAKC,GAAK,GAAK,EAUrE,IANIA,IACF6Y,EAAGC,QAAQ9Y,KACTya,GAIC1a,EAAI8Y,EAAGzwB,OAAoB,IAAZywB,IAAK9Y,IAAW8Y,EAAGvtB,MAKvC,OAHAsU,EAAEyY,EAAIQ,EACNjZ,EAAEwY,EAAIqC,EAEC7a,CACT,EAUAmY,EAAEtV,IAAM,SAAU0V,GAChB,IAAIpsB,EAAI5O,KACN09B,EAAM,IAAI9uB,EAAEuB,YAAY,GACxBsS,EAAIib,EACJ3B,EAAQf,EAAI,EAEd,GAAIA,MAAQA,GAAKA,GAAKZ,GAAaY,EAAIZ,EAAW,MAAM15B,MAAM85B,EAAU,YAGxE,IAFIuB,IAAOf,GAAKA,KAEP,CAGP,GAFQ,EAAJA,IAAOvY,EAAIA,EAAEgb,MAAM7uB,IACvBosB,IAAM,GACDA,EAAG,MACRpsB,EAAIA,EAAE6uB,MAAM7uB,EACd,CAEA,OAAOmtB,EAAQ2B,EAAIn1B,IAAIka,GAAKA,CAC9B,EAaAmY,EAAEU,MAAQ,SAAUC,EAAIC,GACtB,IAAIt1B,EAAMlG,KAAKmQ,YACf,GAAIorB,IAAOV,EAAWU,EAAK,OACtB,GAAIA,MAASA,GAAMA,GAAMpB,GAAUoB,EAAKpB,EAAQ,MAAMz5B,MAAM+5B,GACjE,OAAOa,EAAM,IAAIp1B,EAAIlG,MAAOu7B,EAAIC,IAAOX,EAAY30B,EAAI0C,GAAK4yB,EAC9D,EAOAZ,EAAEpsB,KAAO,WACP,IAAIsY,EAAGoU,EAAG7O,EACRzd,EAAI5O,KACJkG,EAAM0I,EAAEuB,YACRqhB,EAAI5iB,EAAE4iB,EACNyJ,EAAIrsB,EAAEqsB,EACN0C,EAAO,IAAIz3B,EAAI,IAGjB,IAAK0I,EAAEssB,EAAE,GAAI,OAAO,IAAIh1B,EAAI0I,GAG5B,GAAI4iB,EAAI,EAAG,MAAM9wB,MAAM65B,EAAO,kBAG9B/I,EAAI/iB,KAAKD,KAAKI,EAAI,IAIR,IAAN4iB,GAAWA,IAAM,KACnB0J,EAAItsB,EAAEssB,EAAEU,KAAK,IACPV,EAAEjwB,OAASgwB,EAAI,IAAIC,GAAK,KAC9B1J,EAAI/iB,KAAKD,KAAK0sB,GACdD,IAAMA,EAAI,GAAK,EAAI,IAAMA,EAAI,GAAS,EAAJA,GAClCnU,EAAI,IAAI5gB,GAAKsrB,GAAK,IAAQ,MAAQA,EAAIA,EAAEoM,iBAAiBvpB,MAAM,EAAGmd,EAAE/e,QAAQ,KAAO,IAAMwoB,IAEzFnU,EAAI,IAAI5gB,EAAIsrB,GAGdyJ,EAAInU,EAAEmU,GAAK/0B,EAAIyC,IAAM,GAGrB,GACE0jB,EAAIvF,EACJA,EAAI6W,EAAKF,MAAMpR,EAAE+Q,KAAKxuB,EAAErG,IAAI8jB,WACrBA,EAAE6O,EAAE7mB,MAAM,EAAG4mB,GAAGW,KAAK,MAAQ9U,EAAEoU,EAAE7mB,MAAM,EAAG4mB,GAAGW,KAAK,KAE3D,OAAON,EAAMxU,EAAG5gB,EAAIyC,IAAM,EAAGzC,EAAI0C,GACnC,EAMAgyB,EAAE6C,MAAQ7C,EAAEiD,IAAM,SAAUpb,GAC1B,IAAIyY,EACFtsB,EAAI5O,KACJkG,EAAM0I,EAAEuB,YACRurB,EAAK9sB,EAAEssB,EACPc,GAAMvZ,EAAI,IAAIvc,EAAIuc,IAAIyY,EACtBtY,EAAI8Y,EAAGzwB,OACP4X,EAAImZ,EAAG/wB,OACPsM,EAAI3I,EAAEqsB,EACNlpB,EAAI0Q,EAAEwY,EAMR,GAHAxY,EAAE+O,EAAI5iB,EAAE4iB,GAAK/O,EAAE+O,EAAI,GAAK,GAGnBkK,EAAG,KAAOM,EAAG,GAAI,OAAO,IAAI91B,EAAU,EAANuc,EAAE+O,GAgBvC,IAbA/O,EAAEwY,EAAI1jB,EAAIxF,EAGN6Q,EAAIC,IACNqY,EAAIQ,EACJA,EAAKM,EACLA,EAAKd,EACLnpB,EAAI6Q,EACJA,EAAIC,EACJA,EAAI9Q,GAIDmpB,EAAI,IAAIrwB,MAAMkH,EAAI6Q,EAAIC,GAAI9Q,KAAMmpB,EAAEnpB,GAAK,EAK5C,IAAKwF,EAAIsL,EAAGtL,KAAM,CAIhB,IAHAsL,EAAI,EAGC9Q,EAAI6Q,EAAIrL,EAAGxF,EAAIwF,GAGlBsL,EAAIqY,EAAEnpB,GAAKiqB,EAAGzkB,GAAKmkB,EAAG3pB,EAAIwF,EAAI,GAAKsL,EACnCqY,EAAEnpB,KAAO8Q,EAAI,GAGbA,EAAIA,EAAI,GAAK,EAGfqY,EAAEnpB,IAAMmpB,EAAEnpB,GAAK8Q,GAAK,EACtB,CAOA,IAJIA,IAAKJ,EAAEwY,EACNC,EAAE0B,QAGFrlB,EAAI2jB,EAAEjwB,QAASiwB,IAAI3jB,IAAK2jB,EAAE/sB,MAG/B,OAFAsU,EAAEyY,EAAIA,EAECzY,CACT,EASAmY,EAAEgD,cAAgB,SAAUrC,GAC1B,OAAOzpB,EAAU9R,KAAM,EAAGu7B,EAAIA,EAChC,EAYAX,EAAElyB,QAAU,SAAU6yB,GACpB,OAAOzpB,EAAU9R,KAAM,EAAGu7B,EAAIv7B,KAAKi7B,EAAIM,EACzC,EAUAX,EAAEkD,YAAc,SAAUC,GACxB,OAAOjsB,EAAU9R,KAAM,EAAG+9B,EAAIA,EAAK,EACrC,EASAnD,EAAEtyB,SAAW,WACX,OAAOwJ,EAAU9R,KACnB,EASA46B,EAAEoD,QAAUpD,EAAEqD,OAAS,WACrB,OAAOnsB,EAAU9R,KAAM,EACzB,EAMAkG,EAAM60B,IAEN70B,EAAI,WAAaA,EAAIA,IAAMA,EAIzBkU,EAAAA,WAAqB,OAAOlU,CAAM,yCAUrC,CAt6BA,E,qCCLA,SAAWg4B,GACV,aAiBA,IA2DE5vB,EA3DE6vB,EAAa,IAIfp4B,EAAU,CAORqC,UAAW,GAkBXL,SAAU,EAIVq2B,UAAW,EAIXC,SAAW,GAIXC,KAAM,wHAORC,GAAW,EAEXC,EAAe,kBACfC,EAAkBD,EAAe,qBACjCE,EAAqBF,EAAe,0BAEpCG,EAAYlwB,KAAKC,MACjBkwB,EAAUnwB,KAAK6W,IAEfuZ,EAAY,qCAGZ/8B,EAAO,IACPg9B,EAAW,EACX1wB,EAAmB,iBACnB2wB,EAAQJ,EAAUvwB,EAAmB0wB,GAGrClE,EAAI,CAAC,EAg0BP,SAASzzB,EAAIyH,EAAG6T,GACd,IAAIuc,EAAOrC,EAAG1B,EAAG1jB,EAAGkb,EAAGwM,EAAKC,EAAIC,EAC9BC,EAAOxwB,EAAEuB,YACTkvB,EAAKD,EAAKh3B,UAGZ,IAAKwG,EAAE4iB,IAAM/O,EAAE+O,EAKb,OADK/O,EAAE+O,IAAG/O,EAAI,IAAI2c,EAAKxwB,IAChB2vB,EAAWjD,EAAM7Y,EAAG4c,GAAM5c,EAcnC,GAXAyc,EAAKtwB,EAAE+tB,EACPwC,EAAK1c,EAAEka,EAIPlK,EAAI7jB,EAAEqsB,EACNA,EAAIxY,EAAEwY,EACNiE,EAAKA,EAAG7qB,QACRkD,EAAIkb,EAAIwI,EAGJ1jB,EAAG,CAsBL,IArBIA,EAAI,GACNolB,EAAIuC,EACJ3nB,GAAKA,EACL0nB,EAAME,EAAGl0B,SAET0xB,EAAIwC,EACJlE,EAAIxI,EACJwM,EAAMC,EAAGj0B,QAIXwnB,EAAIhkB,KAAK6wB,KAAKD,EAAKP,GACnBG,EAAMxM,EAAIwM,EAAMxM,EAAI,EAAIwM,EAAM,EAE1B1nB,EAAI0nB,IACN1nB,EAAI0nB,EACJtC,EAAE1xB,OAAS,GAIb0xB,EAAEjd,UACKnI,KAAMolB,EAAE9uB,KAAK,GACpB8uB,EAAEjd,SACJ,CAcA,IAZAuf,EAAMC,EAAGj0B,OACTsM,EAAI4nB,EAAGl0B,OAGHg0B,EAAM1nB,EAAI,IACZA,EAAI0nB,EACJtC,EAAIwC,EACJA,EAAKD,EACLA,EAAKvC,GAIFqC,EAAQ,EAAGznB,GACdynB,GAASE,IAAK3nB,GAAK2nB,EAAG3nB,GAAK4nB,EAAG5nB,GAAKynB,GAASl9B,EAAO,EACnDo9B,EAAG3nB,IAAMzV,EAUX,IAPIk9B,IACFE,EAAGvD,QAAQqD,KACT/D,GAKCgE,EAAMC,EAAGj0B,OAAqB,GAAbi0B,IAAKD,IAAYC,EAAG/wB,MAK1C,OAHAsU,EAAEka,EAAIuC,EACNzc,EAAEwY,EAAIA,EAECsD,EAAWjD,EAAM7Y,EAAG4c,GAAM5c,CACnC,CAGA,SAAS8c,EAAWhoB,EAAGuO,EAAKX,GAC1B,GAAI5N,MAAQA,GAAKA,EAAIuO,GAAOvO,EAAI4N,EAC9B,MAAMzkB,MAAM+9B,EAAkBlnB,EAElC,CAGA,SAASioB,EAAe7C,GACtB,IAAIplB,EAAGkb,EAAGgN,EACRC,EAAkB/C,EAAE1xB,OAAS,EAC7B00B,EAAM,GACNC,EAAIjD,EAAE,GAER,GAAI+C,EAAkB,EAAG,CAEvB,IADAC,GAAOC,EACFroB,EAAI,EAAGA,EAAImoB,EAAiBnoB,IAC/BkoB,EAAK9C,EAAEplB,GAAK,GACZkb,EAAIqM,EAAWW,EAAGx0B,OACdwnB,IAAGkN,GAAOE,EAAcpN,IAC5BkN,GAAOF,EAGTG,EAAIjD,EAAEplB,GACNkoB,EAAKG,EAAI,GACTnN,EAAIqM,EAAWW,EAAGx0B,OACdwnB,IAAGkN,GAAOE,EAAcpN,GAC9B,MAAO,GAAU,IAANmN,EACT,MAAO,IAIT,KAAOA,EAAI,KAAO,GAAIA,GAAK,GAE3B,OAAOD,EAAMC,CACf,CAr4BAhF,EAAEkF,cAAgBlF,EAAEiB,IAAM,WACxB,IAAIjtB,EAAI,IAAI5O,KAAKmQ,YAAYnQ,MAE7B,OADI4O,EAAE4iB,IAAG5iB,EAAE4iB,EAAI,GACR5iB,CACT,EAUAgsB,EAAEmF,WAAanF,EAAEkB,IAAM,SAAUrZ,GAC/B,IAAIlL,EAAGxF,EAAGiuB,EAAKC,EACbrxB,EAAI5O,KAKN,GAHAyiB,EAAI,IAAI7T,EAAEuB,YAAYsS,GAGlB7T,EAAE4iB,IAAM/O,EAAE+O,EAAG,OAAO5iB,EAAE4iB,IAAM/O,EAAE+O,EAGlC,GAAI5iB,EAAEqsB,IAAMxY,EAAEwY,EAAG,OAAOrsB,EAAEqsB,EAAIxY,EAAEwY,EAAIrsB,EAAE4iB,EAAI,EAAI,GAAK,EAMnD,IAJAwO,EAAMpxB,EAAE+tB,EAAE1xB,OACVg1B,EAAMxd,EAAEka,EAAE1xB,OAGLsM,EAAI,EAAGxF,EAAIiuB,EAAMC,EAAMD,EAAMC,EAAK1oB,EAAIxF,IAAKwF,EAC9C,GAAI3I,EAAE+tB,EAAEplB,KAAOkL,EAAEka,EAAEplB,GAAI,OAAO3I,EAAE+tB,EAAEplB,GAAKkL,EAAEka,EAAEplB,GAAK3I,EAAE4iB,EAAI,EAAI,GAAK,EAIjE,OAAOwO,IAAQC,EAAM,EAAID,EAAMC,EAAMrxB,EAAE4iB,EAAI,EAAI,GAAK,CACtD,EAOAoJ,EAAEnyB,cAAgBmyB,EAAEW,GAAK,WACvB,IAAI3sB,EAAI5O,KACN4/B,EAAIhxB,EAAE+tB,EAAE1xB,OAAS,EACjBswB,GAAMqE,EAAIhxB,EAAEqsB,GAAK6D,EAInB,GADAc,EAAIhxB,EAAE+tB,EAAEiD,GACJA,EAAG,KAAOA,EAAI,IAAM,EAAGA,GAAK,GAAIrE,IAEpC,OAAOA,EAAK,EAAI,EAAIA,CACtB,EAQAX,EAAEsF,UAAYtF,EAAEryB,IAAM,SAAUka,GAC9B,OAAO9a,EAAO3H,KAAM,IAAIA,KAAKmQ,YAAYsS,GAC3C,EAQAmY,EAAEuF,mBAAqBvF,EAAEwF,KAAO,SAAU3d,GACxC,IAAI7T,EAAI5O,KACNo/B,EAAOxwB,EAAEuB,YACX,OAAOmrB,EAAM3zB,EAAOiH,EAAG,IAAIwwB,EAAK3c,GAAI,EAAG,GAAI2c,EAAKh3B,UAClD,EAOAwyB,EAAEhxB,OAASgxB,EAAEiC,GAAK,SAAUpa,GAC1B,OAAQziB,KAAK87B,IAAIrZ,EACnB,EAOAmY,EAAEyF,SAAW,WACX,OAAOC,EAAkBtgC,KAC3B,EAQA46B,EAAEnzB,YAAcmzB,EAAEkC,GAAK,SAAUra,GAC/B,OAAOziB,KAAK87B,IAAIrZ,GAAK,CACvB,EAQAmY,EAAE2F,qBAAuB3F,EAAEmC,IAAM,SAAUta,GACzC,OAAOziB,KAAK87B,IAAIrZ,IAAM,CACxB,EAOAmY,EAAE1yB,UAAY0yB,EAAE4F,MAAQ,WACtB,OAAOxgC,KAAKi7B,EAAIj7B,KAAK28B,EAAE1xB,OAAS,CAClC,EAOA2vB,EAAE6F,WAAa7F,EAAEmB,MAAQ,WACvB,OAAO/7B,KAAKwxB,EAAI,CAClB,EAOAoJ,EAAE8F,WAAa9F,EAAE+F,MAAQ,WACvB,OAAO3gC,KAAKwxB,EAAI,CAClB,EAOAoJ,EAAEgG,OAAS,WACT,OAAkB,IAAX5gC,KAAKwxB,CACd,EAOAoJ,EAAErzB,SAAWqzB,EAAEoC,GAAK,SAAUva,GAC5B,OAAOziB,KAAK87B,IAAIrZ,GAAK,CACvB,EAOAmY,EAAEiG,kBAAoBjG,EAAErR,IAAM,SAAU9G,GACtC,OAAOziB,KAAK87B,IAAIrZ,GAAK,CACvB,EAgBAmY,EAAEkG,UAAYlG,EAAE/iB,IAAM,SAAUkpB,GAC9B,IAAIja,EACFlY,EAAI5O,KACJo/B,EAAOxwB,EAAEuB,YACTkvB,EAAKD,EAAKh3B,UACV44B,EAAM3B,EAAK,EAGb,QAAa,IAAT0B,EACFA,EAAO,IAAI3B,EAAK,SAOhB,GALA2B,EAAO,IAAI3B,EAAK2B,GAKZA,EAAKvP,EAAI,GAAKuP,EAAKlE,GAAGvuB,GAAM,MAAM5N,MAAM89B,EAAe,OAK7D,GAAI5vB,EAAE4iB,EAAI,EAAG,MAAM9wB,MAAM89B,GAAgB5vB,EAAE4iB,EAAI,MAAQ,cAGvD,OAAI5iB,EAAEiuB,GAAGvuB,GAAa,IAAI8wB,EAAK,IAE/Bb,GAAW,EACXzX,EAAInf,EAAOs5B,EAAGryB,EAAGoyB,GAAMC,EAAGF,EAAMC,GAAMA,GACtCzC,GAAW,EAEJjD,EAAMxU,EAAGuY,GAClB,EAQAzE,EAAEqC,MAAQrC,EAAEsC,IAAM,SAAUza,GAC1B,IAAI7T,EAAI5O,KAER,OADAyiB,EAAI,IAAI7T,EAAEuB,YAAYsS,GACf7T,EAAE4iB,GAAK/O,EAAE+O,EAAIlqB,EAASsH,EAAG6T,GAAKtb,EAAIyH,GAAI6T,EAAE+O,GAAK/O,EAAE+O,EAAG/O,GAC3D,EAQAmY,EAAEsG,OAAStG,EAAE2C,IAAM,SAAU9a,GAC3B,IAAI+Z,EACF5tB,EAAI5O,KACJo/B,EAAOxwB,EAAEuB,YACTkvB,EAAKD,EAAKh3B,UAKZ,GAHAqa,EAAI,IAAI2c,EAAK3c,IAGRA,EAAE+O,EAAG,MAAM9wB,MAAM89B,EAAe,OAGrC,OAAK5vB,EAAE4iB,GAGP+M,GAAW,EACX/B,EAAI70B,EAAOiH,EAAG6T,EAAG,EAAG,GAAGgb,MAAMhb,GAC7B8b,GAAW,EAEJ3vB,EAAEquB,MAAMT,IAPElB,EAAM,IAAI8D,EAAKxwB,GAAIywB,EAQtC,EASAzE,EAAEuG,mBAAqBvG,EAAEwG,IAAM,WAC7B,OAAOA,EAAIphC,KACb,EAQA46B,EAAEyG,iBAAmBzG,EAAEqG,GAAK,WAC1B,OAAOA,EAAGjhC,KACZ,EAQA46B,EAAE0G,QAAU1G,EAAE2G,IAAM,WAClB,IAAI3yB,EAAI,IAAI5O,KAAKmQ,YAAYnQ,MAE7B,OADA4O,EAAE4iB,GAAK5iB,EAAE4iB,GAAK,EACP5iB,CACT,EAQAgsB,EAAEwC,KAAOxC,EAAEzzB,IAAM,SAAUsb,GACzB,IAAI7T,EAAI5O,KAER,OADAyiB,EAAI,IAAI7T,EAAEuB,YAAYsS,GACf7T,EAAE4iB,GAAK/O,EAAE+O,EAAIrqB,EAAIyH,EAAG6T,GAAKnb,EAASsH,GAAI6T,EAAE+O,GAAK/O,EAAE+O,EAAG/O,GAC3D,EASAmY,EAAExyB,UAAYwyB,EAAEmD,GAAK,SAAUpvB,GAC7B,IAAIssB,EAAG8C,EAAI6B,EACThxB,EAAI5O,KAEN,QAAU,IAAN2O,GAAgBA,MAAQA,GAAW,IAANA,GAAiB,IAANA,EAAS,MAAMjO,MAAM+9B,EAAkB9vB,GAQnF,GANAssB,EAAIqF,EAAkB1xB,GAAK,EAC3BgxB,EAAIhxB,EAAE+tB,EAAE1xB,OAAS,EACjB8yB,EAAK6B,EAAId,EAAW,EACpBc,EAAIhxB,EAAE+tB,EAAEiD,GAGJA,EAAG,CAGL,KAAOA,EAAI,IAAM,EAAGA,GAAK,GAAI7B,IAG7B,IAAK6B,EAAIhxB,EAAE+tB,EAAE,GAAIiD,GAAK,GAAIA,GAAK,GAAI7B,GACrC,CAEA,OAAOpvB,GAAKssB,EAAI8C,EAAK9C,EAAI8C,CAC3B,EAQAnD,EAAE4G,WAAa5G,EAAEpsB,KAAO,WACtB,IAAIysB,EAAGD,EAAGqE,EAAIvY,EAAG0K,EAAGnF,EAAG2U,EACrBpyB,EAAI5O,KACJo/B,EAAOxwB,EAAEuB,YAGX,GAAIvB,EAAE4iB,EAAI,EAAG,CACX,IAAK5iB,EAAE4iB,EAAG,OAAO,IAAI4N,EAAK,GAG1B,MAAM1+B,MAAM89B,EAAe,MAC7B,CAgCA,IA9BAvD,EAAIqF,EAAkB1xB,GACtB2vB,GAAW,EAGX/M,EAAI/iB,KAAKD,MAAMI,GAIN,GAAL4iB,GAAUA,GAAK,KACjBwJ,EAAIwE,EAAe5wB,EAAE+tB,IAChB3B,EAAE/vB,OAASgwB,GAAK,GAAK,IAAGD,GAAK,KAClCxJ,EAAI/iB,KAAKD,KAAKwsB,GACdC,EAAI0D,GAAW1D,EAAI,GAAK,IAAMA,EAAI,GAAKA,EAAI,GAEvCzJ,GAAK,IACPwJ,EAAI,KAAOC,GAEXD,EAAIxJ,EAAEoM,gBACN5C,EAAIA,EAAE3mB,MAAM,EAAG2mB,EAAEvoB,QAAQ,KAAO,GAAKwoB,GAGvCnU,EAAI,IAAIsY,EAAKpE,IAEblU,EAAI,IAAIsY,EAAK5N,EAAElpB,YAGjB+2B,EAAKD,EAAKh3B,UACVopB,EAAIwP,EAAM3B,EAAK,IAOb,GAHAhT,EAAIvF,EACJA,EAAIuF,EAAE+Q,KAAKz1B,EAAOiH,EAAGyd,EAAG2U,EAAM,IAAIvD,MAAM,IAEpC+B,EAAenT,EAAEsQ,GAAGtoB,MAAM,EAAG2sB,MAAUhG,EAAIwE,EAAe1Y,EAAE6V,IAAItoB,MAAM,EAAG2sB,GAAM,CAKjF,GAJAhG,EAAIA,EAAE3mB,MAAM2sB,EAAM,EAAGA,EAAM,GAIvBxP,GAAKwP,GAAY,QAALhG,GAMd,GAFAM,EAAMjP,EAAGgT,EAAK,EAAG,GAEbhT,EAAEoR,MAAMpR,GAAGwQ,GAAGjuB,GAAI,CACpBkY,EAAIuF,EACJ,KACF,OACK,GAAS,QAAL2O,EACT,MAGFgG,GAAO,CACT,CAKF,OAFAzC,GAAW,EAEJjD,EAAMxU,EAAGuY,EAClB,EAQAzE,EAAE6C,MAAQ7C,EAAEiD,IAAM,SAAUpb,GAC1B,IAAIuc,EAAO/D,EAAG1jB,EAAGkb,EAAG3L,EAAG2a,EAAIpV,EAAG2T,EAAKC,EACjCrxB,EAAI5O,KACJo/B,EAAOxwB,EAAEuB,YACT+uB,EAAKtwB,EAAE+tB,EACPwC,GAAM1c,EAAI,IAAI2c,EAAK3c,IAAIka,EAGzB,IAAK/tB,EAAE4iB,IAAM/O,EAAE+O,EAAG,OAAO,IAAI4N,EAAK,GAoBlC,IAlBA3c,EAAE+O,GAAK5iB,EAAE4iB,EACTyJ,EAAIrsB,EAAEqsB,EAAIxY,EAAEwY,EACZ+E,EAAMd,EAAGj0B,OACTg1B,EAAMd,EAAGl0B,OAGL+0B,EAAMC,IACRnZ,EAAIoY,EACJA,EAAKC,EACLA,EAAKrY,EACL2a,EAAKzB,EACLA,EAAMC,EACNA,EAAMwB,GAIR3a,EAAI,GACJ2a,EAAKzB,EAAMC,EACN1oB,EAAIkqB,EAAIlqB,KAAMuP,EAAEjZ,KAAK,GAG1B,IAAK0J,EAAI0oB,IAAO1oB,GAAK,GAAI,CAEvB,IADAynB,EAAQ,EACHvM,EAAIuN,EAAMzoB,EAAGkb,EAAIlb,GACpB8U,EAAIvF,EAAE2L,GAAK0M,EAAG5nB,GAAK2nB,EAAGzM,EAAIlb,EAAI,GAAKynB,EACnClY,EAAE2L,KAAOpG,EAAIvqB,EAAO,EACpBk9B,EAAQ3S,EAAIvqB,EAAO,EAGrBglB,EAAE2L,IAAM3L,EAAE2L,GAAKuM,GAASl9B,EAAO,CACjC,CAGA,MAAQglB,IAAI2a,IAAM3a,EAAE3Y,MAQpB,OANI6wB,IAAS/D,EACRnU,EAAE8V,QAEPna,EAAEka,EAAI7V,EACNrE,EAAEwY,EAAIA,EAECsD,EAAWjD,EAAM7Y,EAAG2c,EAAKh3B,WAAaqa,CAC/C,EAaAmY,EAAE8G,gBAAkB9G,EAAE+G,KAAO,SAAUpG,EAAIC,GACzC,IAAI5sB,EAAI5O,KACNo/B,EAAOxwB,EAAEuB,YAGX,OADAvB,EAAI,IAAIwwB,EAAKxwB,QACF,IAAP2sB,EAAsB3sB,GAE1B2wB,EAAWhE,EAAI,EAAG4C,QAEP,IAAP3C,EAAeA,EAAK4D,EAAKr3B,SACxBw3B,EAAW/D,EAAI,EAAG,GAEhBF,EAAM1sB,EAAG2sB,EAAK+E,EAAkB1xB,GAAK,EAAG4sB,GACjD,EAWAZ,EAAEgD,cAAgB,SAAUrC,EAAIC,GAC9B,IAAImE,EACF/wB,EAAI5O,KACJo/B,EAAOxwB,EAAEuB,YAcX,YAZW,IAAPorB,EACFoE,EAAMr3B,EAASsG,GAAG,IAElB2wB,EAAWhE,EAAI,EAAG4C,QAEP,IAAP3C,EAAeA,EAAK4D,EAAKr3B,SACxBw3B,EAAW/D,EAAI,EAAG,GAEvB5sB,EAAI0sB,EAAM,IAAI8D,EAAKxwB,GAAI2sB,EAAK,EAAGC,GAC/BmE,EAAMr3B,EAASsG,GAAG,EAAM2sB,EAAK,IAGxBoE,CACT,EAmBA/E,EAAElyB,QAAU,SAAU6yB,EAAIC,GACxB,IAAImE,EAAKld,EACP7T,EAAI5O,KACJo/B,EAAOxwB,EAAEuB,YAEX,YAAW,IAAPorB,EAAsBjzB,EAASsG,IAEnC2wB,EAAWhE,EAAI,EAAG4C,QAEP,IAAP3C,EAAeA,EAAK4D,EAAKr3B,SACxBw3B,EAAW/D,EAAI,EAAG,GAEvB/Y,EAAI6Y,EAAM,IAAI8D,EAAKxwB,GAAI2sB,EAAK+E,EAAkB1xB,GAAK,EAAG4sB,GACtDmE,EAAMr3B,EAASma,EAAEoZ,OAAO,EAAON,EAAK+E,EAAkB7d,GAAK,GAIpD7T,EAAEmtB,UAAYntB,EAAEgyB,SAAW,IAAMjB,EAAMA,EAChD,EAQA/E,EAAEgH,UAAYhH,EAAEiH,MAAQ,WACtB,IAAIjzB,EAAI5O,KACNo/B,EAAOxwB,EAAEuB,YACX,OAAOmrB,EAAM,IAAI8D,EAAKxwB,GAAI0xB,EAAkB1xB,GAAK,EAAGwwB,EAAKr3B,SAC3D,EAOA6yB,EAAEkH,SAAW,WACX,OAAQ9hC,IACV,EAgBA46B,EAAEmH,QAAUnH,EAAEtV,IAAM,SAAU7C,GAC5B,IAAIwY,EAAGxI,EAAG4M,EAAIvY,EAAGkb,EAAMC,EACrBrzB,EAAI5O,KACJo/B,EAAOxwB,EAAEuB,YACT+xB,EAAQ,GACRC,IAAO1f,EAAI,IAAI2c,EAAK3c,IAGtB,IAAKA,EAAE+O,EAAG,OAAO,IAAI4N,EAAK9wB,GAM1B,GAJAM,EAAI,IAAIwwB,EAAKxwB,IAIRA,EAAE4iB,EAAG,CACR,GAAI/O,EAAE+O,EAAI,EAAG,MAAM9wB,MAAM89B,EAAe,YACxC,OAAO5vB,CACT,CAGA,GAAIA,EAAEiuB,GAAGvuB,GAAM,OAAOM,EAKtB,GAHAywB,EAAKD,EAAKh3B,UAGNqa,EAAEoa,GAAGvuB,GAAM,OAAOgtB,EAAM1sB,EAAGywB,GAO/B,GALApE,EAAIxY,EAAEwY,EACNxI,EAAIhQ,EAAEka,EAAE1xB,OAAS,EACjBg3B,EAAShH,GAAKxI,EACduP,EAAOpzB,EAAE4iB,EAEJyQ,GAME,IAAKxP,EAAI0P,EAAK,GAAKA,EAAKA,IAAO/zB,EAAkB,CAStD,IARA0Y,EAAI,IAAIsY,EAAK9wB,GAIb2sB,EAAIxsB,KAAK6wB,KAAKD,EAAKP,EAAW,GAE9BP,GAAW,IAEF,CAOP,GANI9L,EAAI,IACN3L,EAAIA,EAAE2W,MAAM7uB,GACZwzB,EAAStb,EAAE6V,EAAG1B,IAGhBxI,EAAIkM,EAAUlM,EAAI,GACR,IAANA,EAAS,MAEb7jB,EAAIA,EAAE6uB,MAAM7uB,GACZwzB,EAASxzB,EAAE+tB,EAAG1B,EAChB,CAIA,OAFAsD,GAAW,EAEJ9b,EAAE+O,EAAI,EAAI,IAAI4N,EAAK9wB,GAAK/F,IAAIue,GAAKwU,EAAMxU,EAAGuY,EACnD,OA5BE,GAAI2C,EAAO,EAAG,MAAMthC,MAAM89B,EAAe,OAwC3C,OATAwD,EAAOA,EAAO,GAA2B,EAAtBvf,EAAEka,EAAEluB,KAAK0W,IAAI8V,EAAGxI,KAAW,EAAI,EAElD7jB,EAAE4iB,EAAI,EACN+M,GAAW,EACXzX,EAAIrE,EAAEgb,MAAMwD,EAAGryB,EAAGywB,EAAK6C,IACvB3D,GAAW,EACXzX,EAAIsa,EAAIta,GACRA,EAAE0K,EAAIwQ,EAEClb,CACT,EAcA8T,EAAEkD,YAAc,SAAUC,EAAIvC,GAC5B,IAAIP,EAAG0E,EACL/wB,EAAI5O,KACJo/B,EAAOxwB,EAAEuB,YAgBX,YAdW,IAAP4tB,GACF9C,EAAIqF,EAAkB1xB,GACtB+wB,EAAMr3B,EAASsG,EAAGqsB,GAAKmE,EAAKhB,UAAYnD,GAAKmE,EAAKf,YAElDkB,EAAWxB,EAAI,EAAGI,QAEP,IAAP3C,EAAeA,EAAK4D,EAAKr3B,SACxBw3B,EAAW/D,EAAI,EAAG,GAEvB5sB,EAAI0sB,EAAM,IAAI8D,EAAKxwB,GAAImvB,EAAIvC,GAC3BP,EAAIqF,EAAkB1xB,GACtB+wB,EAAMr3B,EAASsG,EAAGmvB,GAAM9C,GAAKA,GAAKmE,EAAKhB,SAAUL,IAG5C4B,CACT,EAYA/E,EAAEpyB,oBAAsBoyB,EAAEyH,KAAO,SAAUtE,EAAIvC,GAC7C,IAAI5sB,EAAI5O,KACNo/B,EAAOxwB,EAAEuB,YAYX,YAVW,IAAP4tB,GACFA,EAAKqB,EAAKh3B,UACVozB,EAAK4D,EAAKr3B,WAEVw3B,EAAWxB,EAAI,EAAGI,QAEP,IAAP3C,EAAeA,EAAK4D,EAAKr3B,SACxBw3B,EAAW/D,EAAI,EAAG,IAGlBF,EAAM,IAAI8D,EAAKxwB,GAAImvB,EAAIvC,EAChC,EAUAZ,EAAEtyB,SAAWsyB,EAAEoD,QAAUpD,EAAE5U,IAAM4U,EAAEqD,OAAS,WAC1C,IAAIrvB,EAAI5O,KACNi7B,EAAIqF,EAAkB1xB,GACtBwwB,EAAOxwB,EAAEuB,YAEX,OAAO7H,EAASsG,EAAGqsB,GAAKmE,EAAKhB,UAAYnD,GAAKmE,EAAKf,SACrD,EAuJA,IAAI12B,EAAU,WAGZ,SAAS26B,EAAgB1zB,EAAG6jB,GAC1B,IAAI8P,EACFvD,EAAQ,EACRznB,EAAI3I,EAAE3D,OAER,IAAK2D,EAAIA,EAAEyF,QAASkD,KAClBgrB,EAAO3zB,EAAE2I,GAAKkb,EAAIuM,EAClBpwB,EAAE2I,GAAKgrB,EAAOzgC,EAAO,EACrBk9B,EAAQuD,EAAOzgC,EAAO,EAKxB,OAFIk9B,GAAOpwB,EAAE+sB,QAAQqD,GAEdpwB,CACT,CAEA,SAAS4zB,EAAQ5f,EAAGC,EAAG4f,EAAIC,GACzB,IAAInrB,EAAGuP,EAEP,GAAI2b,GAAMC,EACR5b,EAAI2b,EAAKC,EAAK,GAAK,OAEnB,IAAKnrB,EAAIuP,EAAI,EAAGvP,EAAIkrB,EAAIlrB,IACtB,GAAIqL,EAAErL,IAAMsL,EAAEtL,GAAI,CAChBuP,EAAIlE,EAAErL,GAAKsL,EAAEtL,GAAK,GAAK,EACvB,KACF,CAIJ,OAAOuP,CACT,CAEA,SAASxf,EAASsb,EAAGC,EAAG4f,GAItB,IAHA,IAAIlrB,EAAI,EAGDkrB,KACL7f,EAAE6f,IAAOlrB,EACTA,EAAIqL,EAAE6f,GAAM5f,EAAE4f,GAAM,EAAI,EACxB7f,EAAE6f,GAAMlrB,EAAIzV,EAAO8gB,EAAE6f,GAAM5f,EAAE4f,GAI/B,MAAQ7f,EAAE,IAAMA,EAAE3X,OAAS,GAAI2X,EAAEga,OACnC,CAEA,OAAO,SAAUhuB,EAAG6T,EAAG4c,EAAI9D,GACzB,IAAIO,EAAKb,EAAG1jB,EAAGkb,EAAGkQ,EAAMC,EAAOpG,EAAGqG,EAAIC,EAAKC,EAAMC,EAAMjF,EAAI1R,EAAG4W,EAAIC,EAAIC,EAAKC,EAAIC,EAC7EjE,EAAOxwB,EAAEuB,YACT6xB,EAAOpzB,EAAE4iB,GAAK/O,EAAE+O,EAAI,GAAK,EACzB0N,EAAKtwB,EAAE+tB,EACPwC,EAAK1c,EAAEka,EAGT,IAAK/tB,EAAE4iB,EAAG,OAAO,IAAI4N,EAAKxwB,GAC1B,IAAK6T,EAAE+O,EAAG,MAAM9wB,MAAM89B,EAAe,oBASrC,IAPAvD,EAAIrsB,EAAEqsB,EAAIxY,EAAEwY,EACZmI,EAAKjE,EAAGl0B,OACRi4B,EAAKhE,EAAGj0B,OACRuxB,EAAI,IAAI4C,EAAK4C,GACba,EAAKrG,EAAEG,EAAI,GAGNplB,EAAI,EAAG4nB,EAAG5nB,KAAO2nB,EAAG3nB,IAAM,MAAQA,EAWvC,GAVI4nB,EAAG5nB,IAAM2nB,EAAG3nB,IAAM,MAAM0jB,EAG1B8C,EADQ,MAANsB,EACGA,EAAKD,EAAKh3B,UACNmzB,EACJ8D,GAAMiB,EAAkB1xB,GAAK0xB,EAAkB7d,IAAM,EAErD4c,EAGHtB,EAAK,EAAG,OAAO,IAAIqB,EAAK,GAO5B,GAJArB,EAAKA,EAAKe,EAAW,EAAI,EACzBvnB,EAAI,EAGM,GAAN6rB,EAMF,IALA3Q,EAAI,EACJ0M,EAAKA,EAAG,GACRpB,KAGQxmB,EAAI2rB,GAAMzQ,IAAMsL,IAAMxmB,IAC5B8U,EAAIoG,EAAI3wB,GAAQo9B,EAAG3nB,IAAM,GACzBsrB,EAAGtrB,GAAK8U,EAAI8S,EAAK,EACjB1M,EAAIpG,EAAI8S,EAAK,MAIV,CAiBL,IAdA1M,EAAI3wB,GAAQq9B,EAAG,GAAK,GAAK,EAErB1M,EAAI,IACN0M,EAAKmD,EAAgBnD,EAAI1M,GACzByM,EAAKoD,EAAgBpD,EAAIzM,GACzB2Q,EAAKjE,EAAGl0B,OACRi4B,EAAKhE,EAAGj0B,QAGVg4B,EAAKG,EACLN,EAAM5D,EAAG7qB,MAAM,EAAG+uB,GAClBL,EAAOD,EAAI73B,OAGJ83B,EAAOK,GAAKN,EAAIC,KAAU,EAEjCM,EAAKlE,EAAG9qB,QACRgvB,EAAG1H,QAAQ,GACXwH,EAAMhE,EAAG,GAELA,EAAG,IAAMr9B,EAAO,KAAKqhC,EAEzB,GACE1Q,EAAI,EAGJqJ,EAAM0G,EAAQrD,EAAI2D,EAAKM,EAAIL,GAGvBjH,EAAM,GAGRkH,EAAOF,EAAI,GACPM,GAAML,IAAMC,EAAOA,EAAOlhC,GAAQghC,EAAI,IAAM,IAGhDrQ,EAAIuQ,EAAOG,EAAM,EAUb1Q,EAAI,GACFA,GAAK3wB,IAAM2wB,EAAI3wB,EAAO,GAG1B6gC,EAAOL,EAAgBnD,EAAI1M,GAC3BmQ,EAAQD,EAAK13B,OACb83B,EAAOD,EAAI73B,OAGX6wB,EAAM0G,EAAQG,EAAMG,EAAKF,EAAOG,GAGrB,GAAPjH,IACFrJ,IAGAnrB,EAASq7B,EAAMS,EAAKR,EAAQS,EAAKlE,EAAIyD,MAO9B,GAALnQ,IAAQqJ,EAAMrJ,EAAI,GACtBkQ,EAAOxD,EAAG9qB,SAGZuuB,EAAQD,EAAK13B,OACT23B,EAAQG,GAAMJ,EAAKhH,QAAQ,GAG/Br0B,EAASw7B,EAAKH,EAAMI,IAGR,GAARjH,IACFiH,EAAOD,EAAI73B,OAGX6wB,EAAM0G,EAAQrD,EAAI2D,EAAKM,EAAIL,GAGvBjH,EAAM,IACRrJ,IAGAnrB,EAASw7B,EAAKM,EAAKL,EAAOM,EAAKlE,EAAI4D,KAIvCA,EAAOD,EAAI73B,QACM,IAAR6wB,IACTrJ,IACAqQ,EAAM,CAAC,IAITD,EAAGtrB,KAAOkb,EAGNqJ,GAAOgH,EAAI,GACbA,EAAIC,KAAU7D,EAAG+D,IAAO,GAExBH,EAAM,CAAC5D,EAAG+D,IACVF,EAAO,UAGDE,IAAOC,QAAiB,IAAXJ,EAAI,KAAkB/E,IAC/C,CAOA,OAJK8E,EAAG,IAAIA,EAAGjG,QAEfJ,EAAEvB,EAAIA,EAECK,EAAMkB,EAAGjB,EAAK8D,EAAKiB,EAAkB9D,GAAK,EAAI6C,EACvD,CACF,CAhOc,GAyPd,SAAS+B,EAAIxyB,EAAGmvB,GACd,IAAIl3B,EAAaq7B,EAAO5c,EAAKpC,EAAKmJ,EAAG2U,EACnCzpB,EAAI,EACJkb,EAAI,EACJ2M,EAAOxwB,EAAEuB,YACTkvB,EAAKD,EAAKh3B,UAEZ,GAAIk4B,EAAkB1xB,GAAK,GAAI,MAAMlO,MAAMg+B,EAAqB4B,EAAkB1xB,IAGlF,IAAKA,EAAE4iB,EAAG,OAAO,IAAI4N,EAAK9wB,GAEhB,MAANyvB,GACFQ,GAAW,EACXyC,EAAM3B,GAEN2B,EAAMjD,EAGR1R,EAAI,IAAI+S,EAAK,QAEb,MAAOxwB,EAAEitB,MAAMkB,IAAI,IACjBnuB,EAAIA,EAAE6uB,MAAMpR,GACZoG,GAAK,EASP,IALAyP,EAAQzzB,KAAKoJ,IAAI+mB,EAAQ,EAAGnM,IAAMhkB,KAAK6vB,KAAO,EAAI,EAAI,EACtD0C,GAAOkB,EACPr7B,EAAcye,EAAMpC,EAAM,IAAIkc,EAAK9wB,GACnC8wB,EAAKh3B,UAAY44B,IAER,CAKP,GAJA1b,EAAMgW,EAAMhW,EAAImY,MAAM7uB,GAAIoyB,GAC1Bn6B,EAAcA,EAAY42B,QAAQlmB,GAClC8U,EAAInJ,EAAIka,KAAKz1B,EAAO2d,EAAKze,EAAam6B,IAElCxB,EAAenT,EAAEsQ,GAAGtoB,MAAM,EAAG2sB,KAASxB,EAAetc,EAAIyZ,GAAGtoB,MAAM,EAAG2sB,GAAM,CAC7E,MAAOvO,IAAKvP,EAAMoY,EAAMpY,EAAIua,MAAMva,GAAM8d,GAExC,OADA5B,EAAKh3B,UAAYi3B,EACJ,MAANtB,GAAcQ,GAAW,EAAMjD,EAAMpY,EAAKmc,IAAOnc,CAC1D,CAEAA,EAAMmJ,CACR,CACF,CAIA,SAASiU,EAAkB1xB,GAKzB,IAJA,IAAIqsB,EAAIrsB,EAAEqsB,EAAI6D,EACZc,EAAIhxB,EAAE+tB,EAAE,GAGHiD,GAAK,GAAIA,GAAK,GAAI3E,IACzB,OAAOA,CACT,CAGA,SAASqI,EAAQlE,EAAMrB,EAAIsB,GAEzB,GAAItB,EAAKqB,EAAKd,KAAKP,KAMjB,MAFAQ,GAAW,EACPc,IAAID,EAAKh3B,UAAYi3B,GACnB3+B,MAAM89B,EAAe,iCAG7B,OAAOlD,EAAM,IAAI8D,EAAKA,EAAKd,MAAOP,EACpC,CAGA,SAAS8B,EAAcpN,GAErB,IADA,IAAI8Q,EAAK,GACF9Q,KAAM8Q,GAAM,IACnB,OAAOA,CACT,CAUA,SAAStC,EAAGxe,EAAGsb,GACb,IAAI7C,EAAGsI,EAAI38B,EAAao0B,EAAGr0B,EAAWsc,EAAKmJ,EAAG2U,EAAKyC,EACjDzI,EAAI,EACJkH,EAAQ,GACRtzB,EAAI6T,EACJyc,EAAKtwB,EAAE+tB,EACPyC,EAAOxwB,EAAEuB,YACTkvB,EAAKD,EAAKh3B,UAIZ,GAAIwG,EAAE4iB,EAAI,EAAG,MAAM9wB,MAAM89B,GAAgB5vB,EAAE4iB,EAAI,MAAQ,cAGvD,GAAI5iB,EAAEiuB,GAAGvuB,GAAM,OAAO,IAAI8wB,EAAK,GAS/B,GAPU,MAANrB,GACFQ,GAAW,EACXyC,EAAM3B,GAEN2B,EAAMjD,EAGJnvB,EAAEiuB,GAAG,IAEP,OADU,MAANkB,IAAYQ,GAAW,GACpB+E,EAAQlE,EAAM4B,GASvB,GANAA,GAAOkB,EACP9C,EAAKh3B,UAAY44B,EACjB9F,EAAIsE,EAAeN,GACnBsE,EAAKtI,EAAErb,OAAO,GACdob,EAAIqF,EAAkB1xB,KAElBH,KAAKotB,IAAIZ,GAAK,OAqChB,OAJA5O,EAAIiX,EAAQlE,EAAM4B,EAAM,EAAG3B,GAAI5B,MAAMxC,EAAI,IACzCrsB,EAAIqyB,EAAG,IAAI7B,EAAKoE,EAAK,IAAMtI,EAAE7mB,MAAM,IAAK2sB,EAAMkB,GAAO9E,KAAK/Q,GAE1D+S,EAAKh3B,UAAYi3B,EACJ,MAANtB,GAAcQ,GAAW,EAAMjD,EAAM1sB,EAAGywB,IAAOzwB,EAxBtD,MAAO40B,EAAK,GAAW,GAANA,GAAiB,GAANA,GAAWtI,EAAErb,OAAO,GAAK,EACnDjR,EAAIA,EAAE6uB,MAAMhb,GACZyY,EAAIsE,EAAe5wB,EAAE+tB,GACrB6G,EAAKtI,EAAErb,OAAO,GACdmb,IAgCJ,IA7BEC,EAAIqF,EAAkB1xB,GAElB40B,EAAK,GACP50B,EAAI,IAAIwwB,EAAK,KAAOlE,GACpBD,KAEArsB,EAAI,IAAIwwB,EAAKoE,EAAK,IAAMtI,EAAE7mB,MAAM,IAmBpC6O,EAAMtc,EAAYgI,EAAIjH,EAAOiH,EAAEquB,MAAM3uB,GAAMM,EAAEwuB,KAAK9uB,GAAM0yB,GACxDyC,EAAKnI,EAAM1sB,EAAE6uB,MAAM7uB,GAAIoyB,GACvBn6B,EAAc,IAEL,CAIP,GAHAD,EAAY00B,EAAM10B,EAAU62B,MAAMgG,GAAKzC,GACvC3U,EAAInJ,EAAIka,KAAKz1B,EAAOf,EAAW,IAAIw4B,EAAKv4B,GAAcm6B,IAElDxB,EAAenT,EAAEsQ,GAAGtoB,MAAM,EAAG2sB,KAASxB,EAAetc,EAAIyZ,GAAGtoB,MAAM,EAAG2sB,GAQvE,OAPA9d,EAAMA,EAAIua,MAAM,GAGN,IAANxC,IAAS/X,EAAMA,EAAIka,KAAKkG,EAAQlE,EAAM4B,EAAM,EAAG3B,GAAI5B,MAAMxC,EAAI,MACjE/X,EAAMvb,EAAOub,EAAK,IAAIkc,EAAKpE,GAAIgG,GAE/B5B,EAAKh3B,UAAYi3B,EACJ,MAANtB,GAAcQ,GAAW,EAAMjD,EAAMpY,EAAKmc,IAAOnc,EAG1DA,EAAMmJ,EACNxlB,GAAe,CACjB,CACF,CAMA,SAAS68B,EAAa90B,EAAG+wB,GACvB,IAAI1E,EAAG1jB,EAAG0nB,EAmBV,KAhBKhE,EAAI0E,EAAIltB,QAAQ,OAAS,IAAGktB,EAAMA,EAAIvE,QAAQ,IAAK,MAGnD7jB,EAAIooB,EAAItE,OAAO,OAAS,GAGvBJ,EAAI,IAAGA,EAAI1jB,GACf0jB,IAAM0E,EAAItrB,MAAMkD,EAAI,GACpBooB,EAAMA,EAAIhoB,UAAU,EAAGJ,IACd0jB,EAAI,IAGbA,EAAI0E,EAAI10B,QAILsM,EAAI,EAAyB,KAAtBooB,EAAIgE,WAAWpsB,MAAcA,EAGzC,IAAK0nB,EAAMU,EAAI10B,OAAoC,KAA5B00B,EAAIgE,WAAW1E,EAAM,MAAcA,EAG1D,GAFAU,EAAMA,EAAItrB,MAAMkD,EAAG0nB,GAEfU,EAAK,CAaP,GAZAV,GAAO1nB,EACP0jB,EAAIA,EAAI1jB,EAAI,EACZ3I,EAAEqsB,EAAI0D,EAAU1D,EAAI6D,GACpBlwB,EAAE+tB,EAAI,GAMNplB,GAAK0jB,EAAI,GAAK6D,EACV7D,EAAI,IAAG1jB,GAAKunB,GAEZvnB,EAAI0nB,EAAK,CAEX,IADI1nB,GAAG3I,EAAE+tB,EAAE9uB,MAAM8xB,EAAItrB,MAAM,EAAGkD,IACzB0nB,GAAOH,EAAUvnB,EAAI0nB,GAAMrwB,EAAE+tB,EAAE9uB,MAAM8xB,EAAItrB,MAAMkD,EAAGA,GAAKunB,IAC5Da,EAAMA,EAAItrB,MAAMkD,GAChBA,EAAIunB,EAAWa,EAAI10B,MACrB,MACEsM,GAAK0nB,EAGP,KAAO1nB,KAAMooB,GAAO,IAGpB,GAFA/wB,EAAE+tB,EAAE9uB,MAAM8xB,GAENpB,IAAa3vB,EAAEqsB,EAAI8D,GAASnwB,EAAEqsB,GAAK8D,GAAQ,MAAMr+B,MAAMg+B,EAAqBzD,EAClF,MAGErsB,EAAE4iB,EAAI,EACN5iB,EAAEqsB,EAAI,EACNrsB,EAAE+tB,EAAI,CAAC,GAGT,OAAO/tB,CACT,CAMC,SAAS0sB,EAAM1sB,EAAGmvB,EAAIvC,GACrB,IAAIjkB,EAAGxF,EAAG0gB,EAAGuI,EAAG4I,EAAIC,EAASjE,EAAGkE,EAC9B5E,EAAKtwB,EAAE+tB,EAWT,IAAK3B,EAAI,EAAGvI,EAAIyM,EAAG,GAAIzM,GAAK,GAAIA,GAAK,GAAIuI,IAIzC,GAHAzjB,EAAIwmB,EAAK/C,EAGLzjB,EAAI,EACNA,GAAKunB,EACL/sB,EAAIgsB,EACJ6B,EAAIV,EAAG4E,EAAM,OACR,CAGL,GAFAA,EAAMr1B,KAAK6wB,MAAM/nB,EAAI,GAAKunB,GAC1BrM,EAAIyM,EAAGj0B,OACH64B,GAAOrR,EAAG,OAAO7jB,EAIrB,IAHAgxB,EAAInN,EAAIyM,EAAG4E,GAGN9I,EAAI,EAAGvI,GAAK,GAAIA,GAAK,GAAIuI,IAG9BzjB,GAAKunB,EAIL/sB,EAAIwF,EAAIunB,EAAW9D,CACrB,CAwBA,QAtBW,IAAPQ,IACF/I,EAAImM,EAAQ,GAAI5D,EAAIjpB,EAAI,GAGxB6xB,EAAKhE,EAAInN,EAAI,GAAK,EAGlBoR,EAAU9F,EAAK,QAAqB,IAAhBmB,EAAG4E,EAAM,IAAiBlE,EAAInN,EAMlDoR,EAAUrI,EAAK,GACVoI,GAAMC,KAAmB,GAANrI,GAAWA,IAAO5sB,EAAE4iB,EAAI,EAAI,EAAI,IACpDoS,EAAK,GAAW,GAANA,IAAkB,GAANpI,GAAWqI,GAAiB,GAANrI,IAG1CjkB,EAAI,EAAIxF,EAAI,EAAI6tB,EAAIhB,EAAQ,GAAI5D,EAAIjpB,GAAK,EAAImtB,EAAG4E,EAAM,IAAM,GAAM,GAClEtI,IAAO5sB,EAAE4iB,EAAI,EAAI,EAAI,KAGzBuM,EAAK,IAAMmB,EAAG,GAkBhB,OAjBI2E,GACFpR,EAAI6N,EAAkB1xB,GACtBswB,EAAGj0B,OAAS,EAGZ8yB,EAAKA,EAAKtL,EAAI,EAGdyM,EAAG,GAAKN,EAAQ,IAAKE,EAAWf,EAAKe,GAAYA,GACjDlwB,EAAEqsB,EAAI0D,GAAWZ,EAAKe,IAAa,IAEnCI,EAAGj0B,OAAS,EAGZi0B,EAAG,GAAKtwB,EAAEqsB,EAAIrsB,EAAE4iB,EAAI,GAGf5iB,EAiBT,GAbS,GAAL2I,GACF2nB,EAAGj0B,OAAS64B,EACZrR,EAAI,EACJqR,MAEA5E,EAAGj0B,OAAS64B,EAAM,EAClBrR,EAAImM,EAAQ,GAAIE,EAAWvnB,GAI3B2nB,EAAG4E,GAAO/xB,EAAI,GAAK6tB,EAAIhB,EAAQ,GAAI5D,EAAIjpB,GAAK6sB,EAAQ,GAAI7sB,GAAK,GAAK0gB,EAAI,GAGpEoR,EACF,OAAS,CAGP,GAAW,GAAPC,EAAU,EACP5E,EAAG,IAAMzM,IAAM3wB,IAClBo9B,EAAG,GAAK,IACNtwB,EAAEqsB,GAGN,KACF,CAEE,GADAiE,EAAG4E,IAAQrR,EACPyM,EAAG4E,IAAQhiC,EAAM,MACrBo9B,EAAG4E,KAAS,EACZrR,EAAI,CAER,CAIF,IAAKlb,EAAI2nB,EAAGj0B,OAAoB,IAAZi0B,IAAK3nB,IAAW2nB,EAAG/wB,MAEvC,GAAIowB,IAAa3vB,EAAEqsB,EAAI8D,GAASnwB,EAAEqsB,GAAK8D,GACrC,MAAMr+B,MAAMg+B,EAAqB4B,EAAkB1xB,IAGrD,OAAOA,CACT,CAGA,SAAStH,EAASsH,EAAG6T,GACnB,IAAIka,EAAG1B,EAAG1jB,EAAGxF,EAAG0gB,EAAGwM,EAAKC,EAAI7B,EAAI0G,EAAM5E,EACpCC,EAAOxwB,EAAEuB,YACTkvB,EAAKD,EAAKh3B,UAIZ,IAAKwG,EAAE4iB,IAAM/O,EAAE+O,EAGb,OAFI/O,EAAE+O,EAAG/O,EAAE+O,GAAK/O,EAAE+O,EACb/O,EAAI,IAAI2c,EAAKxwB,GACX2vB,EAAWjD,EAAM7Y,EAAG4c,GAAM5c,EAcnC,GAXAyc,EAAKtwB,EAAE+tB,EACPwC,EAAK1c,EAAEka,EAIP1B,EAAIxY,EAAEwY,EACNoC,EAAKzuB,EAAEqsB,EACPiE,EAAKA,EAAG7qB,QACRoe,EAAI4K,EAAKpC,EAGLxI,EAAG,CAyBL,IAxBAsR,EAAOtR,EAAI,EAEPsR,GACFpH,EAAIuC,EACJzM,GAAKA,EACLwM,EAAME,EAAGl0B,SAET0xB,EAAIwC,EACJlE,EAAIoC,EACJ4B,EAAMC,EAAGj0B,QAMXsM,EAAI9I,KAAK0W,IAAI1W,KAAK6wB,KAAKD,EAAKP,GAAWG,GAAO,EAE1CxM,EAAIlb,IACNkb,EAAIlb,EACJolB,EAAE1xB,OAAS,GAIb0xB,EAAEjd,UACGnI,EAAIkb,EAAGlb,KAAMolB,EAAE9uB,KAAK,GACzB8uB,EAAEjd,SAGJ,KAAO,CASL,IALAnI,EAAI2nB,EAAGj0B,OACPg0B,EAAME,EAAGl0B,OACT84B,EAAOxsB,EAAI0nB,EACP8E,IAAM9E,EAAM1nB,GAEXA,EAAI,EAAGA,EAAI0nB,EAAK1nB,IACnB,GAAI2nB,EAAG3nB,IAAM4nB,EAAG5nB,GAAI,CAClBwsB,EAAO7E,EAAG3nB,GAAK4nB,EAAG5nB,GAClB,KACF,CAGFkb,EAAI,CACN,CAaA,IAXIsR,IACFpH,EAAIuC,EACJA,EAAKC,EACLA,EAAKxC,EACLla,EAAE+O,GAAK/O,EAAE+O,GAGXyN,EAAMC,EAAGj0B,OAIJsM,EAAI4nB,EAAGl0B,OAASg0B,EAAK1nB,EAAI,IAAKA,EAAG2nB,EAAGD,KAAS,EAGlD,IAAK1nB,EAAI4nB,EAAGl0B,OAAQsM,EAAIkb,GAAI,CAC1B,GAAIyM,IAAK3nB,GAAK4nB,EAAG5nB,GAAI,CACnB,IAAKxF,EAAIwF,EAAGxF,GAAiB,IAAZmtB,IAAKntB,IAAWmtB,EAAGntB,GAAKjQ,EAAO,IAC9Co9B,EAAGntB,GACLmtB,EAAG3nB,IAAMzV,CACX,CAEAo9B,EAAG3nB,IAAM4nB,EAAG5nB,EACd,CAGA,KAAqB,IAAd2nB,IAAKD,IAAaC,EAAG/wB,MAG5B,KAAiB,IAAV+wB,EAAG,GAAUA,EAAGtC,UAAW3B,EAGlC,OAAKiE,EAAG,IAERzc,EAAEka,EAAIuC,EACNzc,EAAEwY,EAAIA,EAGCsD,EAAWjD,EAAM7Y,EAAG4c,GAAM5c,GANd,IAAI2c,EAAK,EAO9B,CAGA,SAAS92B,EAASsG,EAAGo1B,EAAOjG,GAC1B,IAAItL,EACFwI,EAAIqF,EAAkB1xB,GACtB+wB,EAAMH,EAAe5wB,EAAE+tB,GACvBsC,EAAMU,EAAI10B,OAwBZ,OAtBI+4B,GACEjG,IAAOtL,EAAIsL,EAAKkB,GAAO,EACzBU,EAAMA,EAAI9f,OAAO,GAAK,IAAM8f,EAAItrB,MAAM,GAAKwrB,EAAcpN,GAChDwM,EAAM,IACfU,EAAMA,EAAI9f,OAAO,GAAK,IAAM8f,EAAItrB,MAAM,IAGxCsrB,EAAMA,GAAO1E,EAAI,EAAI,IAAM,MAAQA,GAC1BA,EAAI,GACb0E,EAAM,KAAOE,GAAe5E,EAAI,GAAK0E,EACjC5B,IAAOtL,EAAIsL,EAAKkB,GAAO,IAAGU,GAAOE,EAAcpN,KAC1CwI,GAAKgE,GACdU,GAAOE,EAAc5E,EAAI,EAAIgE,GACzBlB,IAAOtL,EAAIsL,EAAK9C,EAAI,GAAK,IAAG0E,EAAMA,EAAM,IAAME,EAAcpN,OAE3DA,EAAIwI,EAAI,GAAKgE,IAAKU,EAAMA,EAAItrB,MAAM,EAAGoe,GAAK,IAAMkN,EAAItrB,MAAMoe,IAC3DsL,IAAOtL,EAAIsL,EAAKkB,GAAO,IACrBhE,EAAI,IAAMgE,IAAKU,GAAO,KAC1BA,GAAOE,EAAcpN,KAIlB7jB,EAAE4iB,EAAI,EAAI,IAAMmO,EAAMA,CAC/B,CAIA,SAASyC,EAAS6B,EAAKhF,GACrB,GAAIgF,EAAIh5B,OAASg0B,EAEf,OADAgF,EAAIh5B,OAASg0B,GACN,CAEX,CAiBA,SAASiF,EAAM7pB,GACb,IAAI9C,EAAG4sB,EAAGC,EASV,SAASr+B,EAAQnF,GACf,IAAIgO,EAAI5O,KAGR,KAAM4O,aAAa7I,GAAU,OAAO,IAAIA,EAAQnF,GAOhD,GAHAgO,EAAEuB,YAAcpK,EAGZnF,aAAiBmF,EAInB,OAHA6I,EAAE4iB,EAAI5wB,EAAM4wB,EACZ5iB,EAAEqsB,EAAIr6B,EAAMq6B,OACZrsB,EAAE+tB,GAAK/7B,EAAQA,EAAM+7B,GAAK/7B,EAAMyT,QAAUzT,GAI5C,GAAqB,kBAAVA,EAAoB,CAG7B,GAAY,EAARA,IAAc,EAChB,MAAMF,MAAM+9B,EAAkB79B,GAGhC,GAAIA,EAAQ,EACVgO,EAAE4iB,EAAI,MACD,MAAI5wB,EAAQ,GAOjB,OAHAgO,EAAE4iB,EAAI,EACN5iB,EAAEqsB,EAAI,OACNrsB,EAAE+tB,EAAI,CAAC,IALP/7B,GAASA,EACTgO,EAAE4iB,GAAK,CAMT,CAGA,OAAI5wB,MAAYA,GAASA,EAAQ,KAC/BgO,EAAEqsB,EAAI,OACNrsB,EAAE+tB,EAAI,CAAC/7B,KAIF8iC,EAAa90B,EAAGhO,EAAM0H,WAC/B,CAAO,GAAqB,kBAAV1H,EAChB,MAAMF,MAAM+9B,EAAkB79B,GAWhC,GAP4B,KAAxBA,EAAM+iC,WAAW,IACnB/iC,EAAQA,EAAMyT,MAAM,GACpBzF,EAAE4iB,GAAK,GAEP5iB,EAAE4iB,EAAI,GAGJqN,EAAUvyB,KAAK1L,GACd,MAAMF,MAAM+9B,EAAkB79B,GADR8iC,EAAa90B,EAAGhO,EAE7C,CAkBA,GAhBAmF,EAAQkB,UAAY2zB,EAEpB70B,EAAQS,SAAW,EACnBT,EAAQO,WAAa,EACrBP,EAAQs+B,WAAa,EACrBt+B,EAAQu+B,YAAc,EACtBv+B,EAAQQ,cAAgB,EACxBR,EAAQw+B,gBAAkB,EAC1Bx+B,EAAQy+B,gBAAkB,EAC1Bz+B,EAAQ0+B,gBAAkB,EAC1B1+B,EAAQ2+B,iBAAmB,EAE3B3+B,EAAQm+B,MAAQA,EAChBn+B,EAAQ4+B,OAAS5+B,EAAQoC,IAAMw8B,OAEnB,IAARtqB,IAAgBA,EAAM,CAAC,GACvBA,EAEF,IADA+pB,EAAK,CAAC,YAAa,WAAY,WAAY,WAAY,QAClD7sB,EAAI,EAAGA,EAAI6sB,EAAGn5B,QAAcoP,EAAIV,eAAewqB,EAAIC,EAAG7sB,QAAO8C,EAAI8pB,GAAKnkC,KAAKmkC,IAKlF,OAFAp+B,EAAQ4+B,OAAOtqB,GAERtU,CACT,CAgBA,SAAS4+B,EAAOtqB,GACd,IAAKA,GAAsB,kBAARA,EACjB,MAAM3Z,MAAM89B,EAAe,mBAE7B,IAAIjnB,EAAG4sB,EAAG5S,EACR6S,EAAK,CACH,YAAa,EAAGjG,EAChB,WAAY,EAAG,EACf,YAAY,IAAQ,EACpB,WAAY,EAAG,KAGnB,IAAK5mB,EAAI,EAAGA,EAAI6sB,EAAGn5B,OAAQsM,GAAK,EAC9B,QAA6B,KAAxBga,EAAIlX,EAAI8pB,EAAIC,EAAG7sB,KAAiB,CACnC,KAAIonB,EAAUpN,KAAOA,GAAKA,GAAK6S,EAAG7sB,EAAI,IAAMga,GAAK6S,EAAG7sB,EAAI,IACnD,MAAM7W,MAAM+9B,EAAkB0F,EAAI,KAAO5S,GADcvxB,KAAKmkC,GAAK5S,CAExE,CAGF,QAA8B,KAAzBA,EAAIlX,EAAI8pB,EAAI,SAAqB,CAClC,GAAI5S,GAAK9iB,KAAK6vB,KACT,MAAM59B,MAAM+9B,EAAkB0F,EAAI,KAAO5S,GAD1BvxB,KAAKmkC,GAAK,IAAInkC,KAAKuxB,EAE3C,CAEA,OAAOvxB,IACT,CAIA+F,EAAUm+B,EAAMn+B,GAEhBA,EAAQ,WAAaA,EAAQA,QAAUA,EAGvCuI,EAAM,IAAIvI,EAAQ,GAQhBqU,EAAAA,WACE,OAAOrU,CACR,yCAeJ,CA59DA,E,qHC23DiB0I,KAAKm2B,KAAArxB,EANJ9E,KAAKo2B,MAAAxY,EAl6BL5d,KAAKotB,IAAAZ,EAjoBGxsB,KAAK0W,IAAA2f,EArTGr2B,KAAKC,MAjBxC,MAAMq2B,UAAal6B,MACjBsF,WAAAA,CAAYoH,EAAwBhE,GAElC,GADA,MAAMgE,GAD4B,KAAAyqB,KAAAzuB,EAE9BgE,EAASwtB,EAAKC,aAChB,MAAM,IAAIC,WAAW,+BAExB,CAEY,aAANtW,CAAOpX,GAAD,IAAAhE,EASJtL,OAAOi9B,SARd,GAAmB,iBAAR3tB,EAAkB,CAC3B,GAAY,IAARA,EAAW,OAAOwtB,EAAKI,SAC3B,GAAIJ,EAAKK,gBAAgB7tB,GAAzB,OACY,EAANA,EACKwtB,EAAKM,YAAY9tB,GAAjB,GAEFwtB,EAAKM,WAAW9tB,GAAhB,GAET,IAAKhE,EAAgBgE,IAAQutB,EAAWvtB,KAASA,EAC/C,MAAM,IAAI0tB,WAAW,cAAgB1tB,EAAhB,+DAGvB,OAAOwtB,EAAKO,aAAa/tB,EAC1B,CAAM,GAAmB,iBAARA,EAAkB,CAClC,MAAMhE,EAASwxB,EAAKQ,aAAahuB,GACjC,GAAe,OAAXhE,EACF,MAAM,IAAIiyB,YAAY,kBAAoBjuB,EAAM,gBAElD,OAAOhE,CACR,CAAM,GAAmB,kBAARgE,EAAX,OACD,IAAAA,EACKwtB,EAAKM,WAAW,GAAhB,GAEFN,EAAKI,SACP,GAAmB,iBAAR5tB,EAAkB,CAClC,GAAIA,EAAIpH,cAAgB40B,EAAM,OAAOxtB,EACrC,MAAMhE,EAAYwxB,EAAKU,cAAcluB,GACrC,OAAOwtB,EAAKpW,OAAOpb,EACpB,CACD,MAAM,IAAIoK,UAAU,kBAAoBpG,EAAM,eAC/C,CAEDmuB,aAAAA,GACE,MAAMnuB,EAAS,CAAC,WAChB,IAAK,MAAMhE,KAAS,KAClBgE,EAAO1J,MAAM0F,GAASA,IAAU,GAAGjL,SAAS,IAAMiL,GAAS,MAG7D,OADAgE,EAAO1J,KAAK,KACL0J,EAAOqkB,KAAK,GACpB,CAEQtzB,QAAAA,CAASiP,EAAgB,IAChC,GAAY,EAARA,GAAqB,GAARA,EACf,MAAM,IAAI0tB,WACN,sDADJ,OAGkB,IAAhB,KAAKh6B,OAAqB,IACA,IAAzBsM,EAASA,EAAQ,GACbwtB,EAAKY,yBAAyB,KAAMpuB,GAEtCwtB,EAAKa,kBAAkB,KAAMruB,GAA7B,EACR,CAIc,eAARuqB,CAASvqB,GACd,MAAMhE,EAAUgE,EAAEtM,OAClB,GAAgB,IAAZsI,EAAe,OAAO,EAC1B,GAAgB,IAAZA,EAAe,CACjB,MAAMA,EAAQgE,EAAEsuB,gBAAgB,GAChC,OAAOtuB,EAAEyqB,MAAQzuB,EAAQA,CAC1B,OACK8Y,EAAO9U,EAAEuuB,QAAQvyB,EAAU,GAC3B0nB,EAAkB8J,EAAKgB,QAAQ1Z,GAC/B2O,EAAuB,GAAVznB,EAAe0nB,EAClC,GAAiB,KAAbD,EAAmB,OAAOzjB,EAAEyqB,MAAQgE,IAAV,IAAP,IACnBlB,EAAW9J,EAAa,EACxBxJ,EAAenF,EACfhD,EAAa9V,EAAU,EAC3B,MAAMuT,EAAQmU,EAAkB,EAChC,IAAIrY,EAA0B,KAAVkE,EAAgB,EAAI0K,GAAgB1K,EACxDlE,KAAkB,GAClB,MAAMqjB,EAAwBnf,EAAQ,GAAtC,IACI6V,EAAwB,IAAT7V,EAAe,EAAK0K,GAAiB,GAAK1K,EACzDof,EAAuB,GAAKpf,EAAA,IACJ,EAAxBmf,GAA0C,EAAb5c,IAC/BA,IACAmI,EAAeja,EAAEuuB,QAAQzc,GACzBzG,GAAiB4O,IAAkB,GAAKyU,EACxCtJ,EAAcnL,GAAgByU,EAAwB,EACtDC,EAAuBD,EAAwB,GAEnB,EAAvBC,GAAyC,EAAb7c,GACjCA,IACAmI,EAAeja,EAAEuuB,QAAQzc,GAEvBsT,GAD0B,IAAxBuJ,EACc1U,GAAiB0U,EAAuB,GAExC1U,IAAkB,GAAK0U,EAEzCA,GAAwB,GAE1B,MAAMC,EAAWpB,EAAKqB,iBAAiB7uB,EAAG2uB,EACtC7c,EAAYmI,GAChB,IAAiB,IAAb2U,GAAgC,IAAbA,GAAwC,IAAP,EAAdxJ,MACxCA,EAAeA,EAAc,IAAO,EAChB,IAAhBA,IAEF/Z,IAC8B,GAAzBA,IAAiB,KAEpBA,EAAe,EACfkiB,IACe,KAAXA,KAEF,OAAOvtB,EAAEyqB,MAAQgE,IAAV,IAKf,MAAMnjB,EAAUtL,EAAEyqB,MAAF,WAAqB,EAIrC,OAHA8C,EAAYA,EAAW,MAAU,GACjCC,EAAKsB,qBAAqB,GAAKxjB,EAAUiiB,EAAWliB,EACpDmiB,EAAKsB,qBAAqB,GAAK1J,EACxBoI,EAAKuB,uBAAuB,EACpC,CAIgB,iBAAVC,CAAWhvB,GAChB,GAAiB,IAAbA,EAAEtM,OAAc,OAAOsM,EAC3B,MAAMhE,EAASgE,EAAEivB,SAEjB,OADAjzB,EAAOyuB,MAAQzqB,EAAEyqB,KACVzuB,CACR,CAEgB,iBAAVkzB,CAAWlvB,GAAD,OACXA,EAAEyqB,KAEG+C,EAAK2B,iBAAiBnvB,GAAGovB,SAG3B5B,EAAK6B,iBAAiBrvB,GAAtB,EACR,CAEkB,mBAAZsvB,CAAatvB,EAAShE,GAC3B,GAAIA,EAAEyuB,KACJ,MAAM,IAAIiD,WAAW,6BAEvB,GAAiB,IAAb1xB,EAAEtI,OACJ,OAAO85B,EAAKM,WAAW,GAAhB,GAET,GAAiB,IAAb9tB,EAAEtM,OAAc,OAAOsM,EAC3B,GAAiB,IAAbA,EAAEtM,QAAiC,IAAjBsM,EAAEuuB,QAAQ,GAAhC,OAEMvuB,EAAEyqB,MAA+B,IAAP,EAAfzuB,EAAEuyB,QAAQ,IAChBf,EAAKwB,WAAWhvB,GAGlBA,EAIT,GAAe,EAAXhE,EAAEtI,OAAY,MAAM,IAAIg6B,WAAW,kBACvC,IAAI5Y,EAAW9Y,EAAEsyB,gBAAgB,GACjC,GAAiB,IAAbxZ,EAAgB,OAAO9U,EAC3B,GAAI8U,GAAY0Y,EAAK+B,iBACnB,MAAM,IAAI7B,WAAW,kBAEvB,GAAiB,IAAb1tB,EAAEtM,QAAiC,IAAjBsM,EAAEuuB,QAAQ,GAAU,OAElCvyB,EAAe,GAAuB,EAAjB8Y,EAAW,IAChC4O,EAAO1jB,EAAEyqB,MAA4B,IAAP,EAAX3V,GACnB2O,EAAS,IAAI+J,EAAKxxB,EAAc0nB,GACtCD,EAAO+L,qBAEP,MAAMjC,EAAM,GAAMzY,EAAW,GAE7B,OADA2O,EAAOgM,WAAWzzB,EAAe,EAAGuxB,GAC7B9J,CACR,KACGC,EAAS,KACTD,EAAgBzjB,EAIpB,IAFuB,IAAP,EAAX8U,KAAqB4O,EAAS1jB,GACnC8U,IAAa,EACO,IAAbA,EAAgBA,IAAa,EAClC2O,EAAgB+J,EAAKr9B,SAASszB,EAAeA,GACtB,IAAP,EAAX3O,KAED4O,EADa,OAAXA,EACOD,EAEA+J,EAAKr9B,SAASuzB,EAAQD,IAKrC,OAAOC,CACR,CAEc,eAARvzB,CAAS6L,EAAS8Y,GACvB,GAAiB,IAAb9Y,EAAEtI,OAAc,OAAOsI,EAC3B,GAAiB,IAAb8Y,EAAEphB,OAAc,OAAOohB,EAC3B,IAAI9U,EAAehE,EAAEtI,OAASohB,EAAEphB,OACG,IAA/BsI,EAAE0zB,WAAa5a,EAAE4a,YACnB1vB,IAEF,MAAM0jB,EAAS,IAAI8J,EAAKxtB,EAAchE,EAAEyuB,OAAS3V,EAAE2V,MACnD/G,EAAO8L,qBACP,IAAK,IAAI/L,EAAI,EAAGA,EAAIznB,EAAEtI,OAAQ+vB,IAC5B+J,EAAKmC,qBAAqB7a,EAAG9Y,EAAEuyB,QAAQ9K,GAAIC,EAAQD,GAErD,OAAOC,EAAO0L,QACf,CAEY,aAANh/B,CAAO4P,EAAShE,GACrB,GAAiB,IAAbA,EAAEtI,OAAc,MAAM,IAAIg6B,WAAW,oBACzC,GAAmC,EAA/BF,EAAKoC,kBAAkB5vB,EAAGhE,GAAQ,OAAOwxB,EAAKI,SAAZ,MAChC9Y,EAAa9U,EAAEyqB,OAASzuB,EAAEyuB,KAC1B/G,EAAU1nB,EAAEsyB,gBAAgB,GAClC,IAAI7K,EACJ,GAAiB,IAAbznB,EAAEtI,QAA2B,OAAXgwB,EAAmB,CACvC,GAAgB,IAAZA,EACF,OAAO5O,IAAe9U,EAAEyqB,KAAOzqB,EAAIwtB,EAAKwB,WAAWhvB,GAErDyjB,EAAW+J,EAAKqC,mBAAmB7vB,EAAG0jB,EAAS,KAChD,MACCD,EAAW+J,EAAKsC,mBAAmB9vB,EAAGhE,GAA3B,MAGb,OADAynB,EAASgH,KAAO3V,EACT2O,EAAS2L,QACjB,CAEe,gBAATW,CAAU/vB,EAAShE,GACxB,GAAiB,IAAbA,EAAEtI,OAAc,MAAM,IAAIg6B,WAAW,oBACzC,GAAmC,EAA/BF,EAAKoC,kBAAkB5vB,EAAGhE,GAAQ,OAAOgE,EAC7C,MAAM8U,EAAU9Y,EAAEsyB,gBAAgB,GAClC,GAAiB,IAAbtyB,EAAEtI,QAA2B,OAAXohB,EAAmB,CACvC,GAAgB,IAAZA,EAAe,OAAO0Y,EAAKI,SAC/B,MAAM5xB,EAAiBwxB,EAAKwC,mBAAmBhwB,EAAG8U,GAFX,OAGhB,IAAnB9Y,EAA6BwxB,EAAKI,SAC/BJ,EAAKM,WAAW9xB,EAAgBgE,EAAEyqB,KAC1C,CACD,MAAM/G,EAAY8J,EAAKsC,mBAAmB9vB,EAAGhE,GAA3B,MAElB,OADA0nB,EAAU+G,KAAOzqB,EAAEyqB,KACZ/G,EAAU0L,QAClB,CAES,UAAHx/B,CAAIoQ,EAAShE,GAClB,MAAM8Y,EAAO9U,EAAEyqB,KAAf,OACI3V,IAAS9Y,EAAEyuB,KAGN+C,EAAKyC,cAAcjwB,EAAGhE,EAAG8Y,GAIE,GAAhC0Y,EAAKoC,kBAAkB5vB,EAAGhE,GACrBwxB,EAAK0C,cAAclwB,EAAGhE,EAAG8Y,GAE3B0Y,EAAK0C,cAAcl0B,EAAGgE,GAAI8U,EAClC,CAEc,eAAR/kB,CAASiQ,EAAShE,GACvB,MAAM8Y,EAAO9U,EAAEyqB,KAAf,OACI3V,IAAS9Y,EAAEyuB,KAOqB,GAAhC+C,EAAKoC,kBAAkB5vB,EAAGhE,GACrBwxB,EAAK0C,cAAclwB,EAAGhE,EAAG8Y,GAE3B0Y,EAAK0C,cAAcl0B,EAAGgE,GAAI8U,GAPxB0Y,EAAKyC,cAAcjwB,EAAGhE,EAAG8Y,EAQnC,CAEe,gBAATqb,CAAUnwB,EAAShE,GAAV,OACG,IAAbA,EAAEtI,QAA6B,IAAbsM,EAAEtM,OAAqBsM,EACzChE,EAAEyuB,KAAa+C,EAAK4C,uBAAuBpwB,EAAGhE,GAC3CwxB,EAAK6C,sBAAsBrwB,EAAGhE,EACtC,CAEsB,uBAAhBs0B,CAAiBtwB,EAAShE,GAAV,OACJ,IAAbA,EAAEtI,QAA6B,IAAbsM,EAAEtM,OAAqBsM,EACzChE,EAAEyuB,KAAa+C,EAAK6C,sBAAsBrwB,EAAGhE,GAC1CwxB,EAAK4C,uBAAuBpwB,EAAGhE,EACvC,CAEwB,yBAAlBu0B,GACL,MAAM,IAAInqB,UACN,uDACL,CAEc,eAARpW,CAASgQ,EAAShE,GACvB,OAAsC,EAA/BwxB,EAAKgD,kBAAkBxwB,EAAGhE,EAClC,CAEqB,sBAAfy0B,CAAgBzwB,EAAShE,GAC9B,OAAuC,GAAhCwxB,EAAKgD,kBAAkBxwB,EAAGhE,EAClC,CAEiB,kBAAX9L,CAAY8P,EAAShE,GAC1B,OAAsC,EAA/BwxB,EAAKgD,kBAAkBxwB,EAAGhE,EAClC,CAEwB,yBAAlB00B,CAAmB1wB,EAAShE,GACjC,OAAuC,GAAhCwxB,EAAKgD,kBAAkBxwB,EAAGhE,EAClC,CAEW,YAAL20B,CAAM30B,EAAS8Y,GACpB,GAAI9Y,EAAEyuB,OAAS3V,EAAE2V,KAAM,SACvB,GAAIzuB,EAAEtI,SAAWohB,EAAEphB,OAAQ,SAC3B,IAAK,IAAIgwB,EAAI,EAAGA,EAAI1nB,EAAEtI,OAAQgwB,IAC5B,GAAI1nB,EAAEuyB,QAAQ7K,KAAO5O,EAAEyZ,QAAQ7K,GAAI,SAErC,QACD,CAEc,eAARkN,CAAS5wB,EAAShE,GACvB,OAAQwxB,EAAKmD,MAAM3wB,EAAGhE,EACvB,CAEgB,iBAAV60B,CAAW7wB,EAAShE,GACzB,IAAKgE,EAAEyqB,OAASzuB,EAAEyuB,KAChB,OAAO+C,EAAKsD,cAAc9wB,EAAGhE,GAAGozB,SAC3B,GAAIpvB,EAAEyqB,MAAQzuB,EAAEyuB,KAAM,CAC3B,MAAM3V,EAAe4O,EAAS1jB,EAAEtM,OAAQsI,EAAEtI,QAAU,EAGpD,IAAI+vB,EAAS+J,EAAK2B,iBAAiBnvB,EAAG8U,GACtC,MAAMyY,EAAKC,EAAK2B,iBAAiBnzB,GAEjC,OADAynB,EAAS+J,EAAKuD,aAAatN,EAAQ8J,EAAI9J,GAChC+J,EAAK6B,iBAAiB5L,GAAtB,EAAoCA,GAAQ2L,QACpD,CAMD,OAJIpvB,EAAEyqB,QACHzqB,EAAGhE,GAAK,CAACA,EAAGgE,IAGRwtB,EAAKwD,iBAAiBhxB,EAAGwtB,EAAK2B,iBAAiBnzB,IAAIozB,QAC3D,CAEgB,iBAAV6B,CAAWjxB,EAAShE,GACzB,IAAKgE,EAAEyqB,OAASzuB,EAAEyuB,KAChB,OAAO+C,EAAK0D,cAAclxB,EAAGhE,GAAGozB,SAC3B,GAAIpvB,EAAEyqB,MAAQzuB,EAAEyuB,KAAM,OAErB3V,EAAe4O,EAAS1jB,EAAEtM,OAAQsI,EAAEtI,QACpC+vB,EAAS+J,EAAK2B,iBAAiBnvB,EAAG8U,GAClCyY,EAAKC,EAAK2B,iBAAiBnzB,GACjC,OAAOwxB,EAAK0D,cAAczN,EAAQ8J,EAAI9J,GAAQ2L,QAC/C,CACD,MAAMta,EAAe4O,EAAS1jB,EAAEtM,OAAQsI,EAAEtI,QAAU,EAEhDsM,EAAEyqB,QACHzqB,EAAGhE,GAAK,CAACA,EAAGgE,IAGf,IAAIyjB,EAAS+J,EAAK2B,iBAAiBnzB,EAAG8Y,GAEtC,OADA2O,EAAS+J,EAAK0D,cAAczN,EAAQzjB,EAAGyjB,GAChC+J,EAAK6B,iBAAiB5L,GAAtB,EAAoCA,GAAQ2L,QACpD,CAEe,gBAAT+B,CAAUnxB,EAAShE,GACxB,MAAM8Y,EAAe4O,EAAS1jB,EAAEtM,OAAQsI,EAAEtI,QAC1C,IAAKsM,EAAEyqB,OAASzuB,EAAEyuB,KAChB,OAAO+C,EAAKuD,aAAa/wB,EAAGhE,GAAGozB,SAC1B,GAAIpvB,EAAEyqB,MAAQzuB,EAAEyuB,KAAM,CAG3B,IAAI/G,EAAS8J,EAAK2B,iBAAiBnvB,EAAG8U,GACtC,MAAM2O,EAAK+J,EAAK2B,iBAAiBnzB,GAEjC,OADA0nB,EAAS8J,EAAKsD,cAAcpN,EAAQD,EAAIC,GACjC8J,EAAK6B,iBAAiB3L,GAAtB,EAAoCA,GAAQ0L,QACpD,CAEGpvB,EAAEyqB,QACHzqB,EAAGhE,GAAK,CAACA,EAAGgE,IAGf,IAAIyjB,EAAS+J,EAAK2B,iBAAiBnzB,EAAG8Y,GAEtC,OADA2O,EAAS+J,EAAKwD,iBAAiBvN,EAAQzjB,EAAGyjB,GACnC+J,EAAK6B,iBAAiB5L,GAAtB,EAAoCA,GAAQ2L,QACpD,CAEY,aAANgC,CAAOp1B,EAAW8Y,GACvB,GAAiB,IAAbA,EAAEphB,OAAc,OAAOohB,EAE3B,GADA9Y,EAAIuxB,EAAWvxB,GACP,EAAJA,EACF,MAAM,IAAI0xB,WACN,sDAEN,GAAU,IAAN1xB,EAAS,OAAOwxB,EAAKI,SAEzB,GAAI5xB,GAAKwxB,EAAK+B,iBAAkB,OAAOza,EACvC,MAAM4O,EAAiC,GAAhB1nB,EAAI,IAAM,GACjC,GAAI8Y,EAAEphB,OAASgwB,EAAc,OAAO5O,EAAP,MACvBmF,EAAWnF,EAAEwZ,gBAAgB5K,EAAe,GAC5C5R,EAAe,IAAO9V,EAAI,GAAK,GACrC,GAAI8Y,EAAEphB,SAAWgwB,GAAgBzJ,EAAWnI,EAAc,OAAOgD,EAGjE,IADgBmF,EAAWnI,KAAkBA,EAChC,OAAO0b,EAAK6D,kBAAkBr1B,EAAG8Y,GAC9C,IAAKA,EAAE2V,KAAM,OAAO+C,EAAK8D,+BAA+Bt1B,EAAG8Y,GAAvC,GACpB,GAAwC,IAAnCmF,EAAYnI,EAAe,GAAW,CACzC,IAAK,IAAI2R,EAAIC,EAAe,EAAQ,GAALD,EAAQA,IACrC,GAAqB,IAAjB3O,EAAEyZ,QAAQ9K,GACZ,OAAO+J,EAAK8D,+BAA+Bt1B,EAAG8Y,GAAvC,GAH8B,OAMrCA,EAAEphB,SAAWgwB,GAAgBzJ,IAAanI,EAAqBgD,EAC5D0Y,EAAK6D,kBAAkBr1B,EAAG8Y,EAClC,CACD,OAAO0Y,EAAK8D,+BAA+Bt1B,EAAG8Y,GAAvC,EACR,CAEa,cAAPyc,CAAQvxB,EAAWhE,GACxB,GAAiB,IAAbA,EAAEtI,OAAc,OAAOsI,EAE3B,GADAgE,EAAIutB,EAAWvtB,GACP,EAAJA,EACF,MAAM,IAAI0tB,WACN,sDAEN,GAAU,IAAN1tB,EAAS,OAAOwtB,EAAKI,SAEzB,GAAI5xB,EAAEyuB,KAAM,CACV,GAAIzqB,EAAIwtB,EAAK+B,iBACX,MAAM,IAAI7B,WAAW,kBAEvB,OAAOF,EAAK8D,+BAA+BtxB,EAAGhE,GAAvC,EACR,CAED,GAAIgE,GAAKwtB,EAAK+B,iBAAkB,OAAOvzB,EACvC,MAAM8Y,EAAiC,GAAhB9U,EAAI,IAAM,GACjC,GAAIhE,EAAEtI,OAASohB,EAAc,OAAO9Y,EACpC,MAAM0nB,EAAiB1jB,EAAI,GAC3B,GAAIhE,EAAEtI,QAAUohB,EAAc,CAC5B,GAAuB,IAAnB4O,EAAsB,OAAO1nB,EACjC,MAAMgE,EAAWhE,EAAEuyB,QAAQzZ,EAAe,GAC1C,GAAsC,GAAjC9U,IAAa0jB,EAAuB,OAAO1nB,CACjD,CAED,OAAOwxB,EAAK6D,kBAAkBrxB,EAAGhE,EAClC,CAIS,UAAHw1B,CAAIxxB,EAAQhE,GAGjB,GAFAgE,EAAIwtB,EAAKU,cAAcluB,GACvBhE,EAAIwxB,EAAKU,cAAclyB,GACN,iBAANgE,EAET,MADiB,iBAANhE,IAAgBA,EAAIA,EAAEjL,YAC1BiP,EAAIhE,EAEb,GAAiB,iBAANA,EACT,OAAOgE,EAAEjP,WAAaiL,EAIxB,GAFAgE,EAAIwtB,EAAKiE,YAAYzxB,GACrBhE,EAAIwxB,EAAKiE,YAAYz1B,GACjBwxB,EAAKkE,WAAW1xB,IAAMwtB,EAAKkE,WAAW11B,GACxC,OAAOwxB,EAAK59B,IAAIoQ,EAAGhE,GAErB,GAAiB,iBAANgE,GAA+B,iBAANhE,EAClC,OAAOgE,EAAIhE,EAEb,MAAM,IAAIoK,UACN,8DACL,CAEQ,SAAFurB,CAAG3xB,EAAQhE,GAChB,OAAOwxB,EAAKoE,UAAU5xB,EAAGhE,EAAG,EAC7B,CACQ,SAAF61B,CAAG7xB,EAAQhE,GAChB,OAAOwxB,EAAKoE,UAAU5xB,EAAGhE,EAAG,EAC7B,CACQ,SAAF81B,CAAG9xB,EAAQhE,GAChB,OAAOwxB,EAAKoE,UAAU5xB,EAAGhE,EAAG,EAC7B,CACQ,SAAF+1B,CAAG/xB,EAAQhE,GAChB,OAAOwxB,EAAKoE,UAAU5xB,EAAGhE,EAAG,EAC7B,CAEQ,SAAFg2B,CAAGhyB,EAAQhE,GAAT,QAEL,GAAIwxB,EAAKkE,WAAW1xB,GAApB,OACMwtB,EAAKkE,WAAW11B,GAAWwxB,EAAKmD,MAAM3wB,EAAGhE,GACtCwxB,EAAKwE,GAAGh2B,EAAGgE,GACb,GAAiB,iBAANA,EAAgB,CAChC,GAAIwtB,EAAKkE,WAAW11B,GAAI,OAAOwxB,EAAKyE,gBAAgBj2B,EAAGgE,GACvD,GAAiB,iBAANhE,EAAgB,OAAOgE,GAAKhE,EACvCA,EAAIwxB,EAAKU,cAAclyB,EACxB,MAAM,GAAiB,iBAANgE,EAAgB,CAChC,GAAIwtB,EAAKkE,WAAW11B,GAApB,OACEgE,EAAIwtB,EAAKQ,aAAahuB,GACZ,OAANA,GACGwtB,EAAKmD,MAAM3wB,EAAGhE,GAEvB,GAAiB,iBAANA,EAAgB,OAAOgE,GAAKhE,EACvCA,EAAIwxB,EAAKU,cAAclyB,EACxB,MAAM,GAAiB,kBAANgE,EAAiB,CACjC,GAAIwtB,EAAKkE,WAAW11B,GAAI,OAAOwxB,EAAKyE,gBAAgBj2B,GAAIgE,GACxD,GAAiB,iBAANhE,EAAgB,OAAOgE,GAAKhE,EACvCA,EAAIwxB,EAAKU,cAAclyB,EACxB,MAAM,GAAiB,iBAANgE,EAAgB,CAChC,GAAIwtB,EAAKkE,WAAW11B,GAAI,SACxB,GAAiB,iBAANA,EAAgB,OAAOgE,GAAKhE,EACvCA,EAAIwxB,EAAKU,cAAclyB,EACxB,KAAM,IAAiB,iBAANgE,EAIhB,OAAOA,GAAKhE,EAHZ,GAAiB,iBAANA,GAAkBA,EAAEpD,cAAgB40B,EAAM,OAAOxtB,GAAKhE,EACjEgE,EAAIwtB,EAAKU,cAAcluB,EAEX,EAGjB,CAEQ,SAAF8iB,CAAG9iB,EAAQhE,GAChB,OAAQwxB,EAAKwE,GAAGhyB,EAAGhE,EACpB,CAIY,aAAN4xB,GACL,OAAO,IAAIJ,EAAK,GAAT,EACR,CAEgB,iBAAVM,CAAW9tB,EAAehE,GAC/B,MAAM8Y,EAAS,IAAI0Y,EAAK,EAAGxxB,GAE3B,OADA8Y,EAAO2a,WAAW,EAAGzvB,GACd8U,CACR,CAEDma,MAAAA,GACE,MAAMjzB,EAAS,IAAIwxB,EAAK,KAAK95B,OAAQ,KAAK+2B,MAC1C,IAAK,IAAI3V,EAAI,EAAGA,EAAI,KAAKphB,OAAQohB,IAC/B9Y,EAAO8Y,GAAK,KAAKA,GAEnB,OAAO9Y,CACR,CAEDozB,MAAAA,GAAM,IACApvB,EAAY,KAAKtM,OACjBsI,EAAO,KAAKgE,EAAY,GAAjB,KACK,IAAThE,GACLgE,IACAhE,EAAO,KAAKgE,EAAY,GACxB,KAAKpJ,MAGP,OADkB,IAAdoJ,IAAiB,KAAKyqB,MAAL,GACd,IACR,CAED+E,kBAAAA,GACE,IAAK,IAAIxzB,EAAI,EAAGA,EAAI,KAAKtI,OAAQsI,IAC/B,KAAKA,GAAK,CAEb,CAEsB,uBAAhB6yB,CAAiB7uB,EAAShE,EAC7B8Y,EAAoB4O,GACtB,GAAwB,EAApB1nB,EAAuB,OAAQ,EACnC,IAAIynB,EACJ,GAAwB,EAApBznB,EACFynB,GAAoBznB,EAAoB,MACnC,CAEL,GAAmB,IAAf8Y,EAAkB,OAAQ,EAC9BA,IACA4O,EAAe1jB,EAAEuuB,QAAQzZ,GACzB2O,EAAmB,EACpB,CAED,IAAI8J,EAAO,GAAK9J,EAChB,GAA8B,IAAzBC,EAAe6J,GAAa,OAAQ,EAGzC,GADAA,GAAQ,EACsB,IAAzB7J,EAAe6J,GAAa,OAAO,EAAP,KACb,EAAbzY,GAEL,GADAA,IAC8B,IAA1B9U,EAAEuuB,QAAQzZ,GAAmB,OAAO,EAE1C,OAAO,CACR,CAEkB,mBAAZiZ,CAAa/tB,GAElBwtB,EAAKuB,uBAAuB,GAAK/uB,EAAA,MAC3BhE,EAAsD,KAAvCwxB,EAAKsB,qBAAqB,KAAO,GAChDha,EAAW9Y,EAAc,KACzB0nB,EAAiC,GAAL,EAAjB5O,EAAW,IACtB2O,EAAS,IAAI+J,EAAK9J,EALH,EAAR1jB,GAKE,IAEXutB,EAA+C,QAA/BC,EAAKsB,qBAAqB,GAD3B,QAEf7U,EAAcuT,EAAKsB,qBAAqB,GAA1B,MACZhd,EAAsB,GAEtBvC,EAAYuF,EAAW,OAKzBzJ,EAFAqjB,EAAwB,EAI5B,GAAI,GAAAnf,EAAiC,CACnC,MAAMvP,EAAQ8R,EAAsBvC,EACpCmf,EAAwB1uB,EAAQ,GAChCqL,EAAQkiB,IAAiBvtB,EACzButB,EAAgBA,GAAiB,GAAKvtB,EAAWia,IAAgBja,EACjEia,IAA8B,GAAKja,CACpC,MAAM,GAAI,KAAAuP,EACTmf,EAAwB,GACxBrjB,EAAQkiB,EACRA,EAAetT,EACfA,EAAc,MACT,CACL,MAAMja,EAAQuP,EAAYuC,EAC1B4c,EAAwB,GAAK1uB,EAC7BqL,EAASkiB,GAAgBvtB,EAAUia,IAAiB,GAAKja,EACzDutB,EAAetT,GAAeja,EAC9Bia,EAAc,CACf,CACDwJ,EAAOgM,WAAW/L,EAAS,EAAGrY,GAE9B,IAAK,IAAIrP,EAAa0nB,EAAS,EAAiB,GAAd1nB,EAAiBA,IACrB,EAAxB0yB,GACFA,GAAyB,GACzBrjB,EAAQkiB,IAAiB,EACzBA,EAAgBA,GAAgB,GAAOtT,IAAgB,EACvDA,IAA8B,IAE9B5O,EAAQ,EAEVoY,EAAOgM,WAAWzzB,EAAYqP,GAEhC,OAAOoY,EAAO2L,QACf,CAEoB,qBAAd8C,CAAelyB,GAAD,SACV,IAALA,GAAkB,GAALA,KACR,KAALA,EAAwB,IAANA,EACb,QAALA,EACW,KAANA,GAAoB,MAANA,EAEd,QAALA,GACFA,GAAK,OACO,IAALA,GAAmB,IAANA,GAAoB,IAANA,GAAoB,IAANA,GACnC,IAANA,GAAoB,MAANA,GAEV,OAANA,EACR,CAEkB,mBAAZguB,CAAahuB,EAAgBhE,EAAe,GACjD,IAAI8Y,EAAO,EAEX,MAAM4O,EAAS1jB,EAAOtM,OACtB,IAAI+vB,EAAS,EACb,GAAIA,IAAWC,EAAQ,OAAO8J,EAAKI,SACnC,IAAIL,EAAUvtB,EAAOosB,WAAW3I,GAAhC,KAEO+J,EAAK0E,eAAe3E,IAAU,CACnC,KAAM9J,IAAWC,EAAQ,OAAO8J,EAAKI,SACrCL,EAAUvtB,EAAOosB,WAAW3I,EAC7B,CAGD,GAAgB,KAAZ8J,EAAkB,CACpB,KAAM9J,IAAWC,EAAQ,OAAO,KAChC6J,EAAUvtB,EAAOosB,WAAW3I,GAC5B3O,EAAO,CACR,MAAM,GAAgB,KAAZyY,EAAkB,CAC3B,KAAM9J,IAAWC,EAAQ,OAAO,KAChC6J,EAAUvtB,EAAOosB,WAAW3I,GAC5B3O,GAAQ,CACT,CAED,GAAc,IAAV9Y,GAEF,GADAA,EAAQ,GACQ,KAAZuxB,EAAkB,CACpB,KAAM9J,IAAWC,EAAQ,OAAO8J,EAAKI,SAErC,GADAL,EAAUvtB,EAAOosB,WAAW3I,GACZ,KAAZ8J,GAAgC,MAAZA,EAAkB,CAExC,GADAvxB,EAAQ,KACFynB,IAAWC,EAAQ,OAAO,KAChC6J,EAAUvtB,EAAOosB,WAAW3I,EAC7B,MAAM,GAAgB,KAAZ8J,GAAgC,MAAZA,EAAkB,CAE/C,GADAvxB,EAAQ,IACFynB,IAAWC,EAAQ,OAAO,KAChC6J,EAAUvtB,EAAOosB,WAAW3I,EAC7B,MAAM,GAAgB,KAAZ8J,GAAgC,KAAZA,EAAkB,CAE/C,GADAvxB,EAAQ,IACFynB,IAAWC,EAAQ,OAAO,KAChC6J,EAAUvtB,EAAOosB,WAAW3I,EAG7B,CACF,OACI,GAAc,KAAVznB,GACO,KAAZuxB,EAAkB,CAEpB,KAAM9J,IAAWC,EAAQ,OAAO8J,EAAKI,SAErC,GADAL,EAAUvtB,EAAOosB,WAAW3I,GACZ,KAAZ8J,GAAgC,MAAZA,EAAkB,CACxC,KAAM9J,IAAWC,EAAQ,OAAO,KAChC6J,EAAUvtB,EAAOosB,WAAW3I,EAG7B,CACF,CAEH,GAAa,GAAT3O,GAAwB,KAAV9Y,EAAc,OAAO,KAAP,KAEb,KAAZuxB,GAAkB,CAEvB,KAAM9J,IAAWC,EAAQ,OAAO8J,EAAKI,SACrCL,EAAUvtB,EAAOosB,WAAW3I,EAC7B,CAGD,MAAMxJ,EAAQyJ,EAASD,EAAvB,IACI3R,EAAc0b,EAAK2E,kBAAkBn2B,GACrCuT,EAAUie,EAAK4E,8BAAgC,EACnD,GAAInY,EAAQ,WAAYnI,EAAa,OAAO,KAAP,MAC/BzG,EACDyG,EAAcmI,EAAQ1K,IAAaie,EAAK6E,yBAEvC3D,EAAS,IAAIlB,EAD0B,GAAtBniB,EAAU,IAAM,IACxB,GAGTsjB,EAAmB,GAAR3yB,EAAaA,EAAQ,GAChCsP,EAAmB,GAARtP,EAAaA,EAAQ,GAAK,EAE3C,GAA8B,IAAzBA,EAASA,EAAQ,GAAW,CAE/B8V,IAAgB0b,EAAK6E,yBAFU,MAGzBr2B,EAAQ,GACR8Y,EAAY,GAClB,IAAImF,GAAI,EACR,EAAG,KACGuT,EAAO,EACPje,EAAO,EAFV,OAGY,CACX,IAAIvT,EACJ,GAAMuxB,EAAU,KAAQ,EAAKoB,EAC3B3yB,EAAIuxB,EAAU,OACT,OAAiB,GAAVA,GAAgB,KAAQ,EAAKjiB,GAEpC,CACL2O,GAAI,EACJ,KACD,CAJCje,GAAe,GAAVuxB,GAAgB,EAItB,CAGD,GAFAhe,GAAQuC,EACR0b,EAAQA,GAAQ1b,EAAe9V,IACzBynB,IAAWC,EAAQ,CACvBzJ,GAAI,EACJ,KACD,CAED,GADAsT,EAAUvtB,EAAOosB,WAAW3I,GACH,GAArBlU,EAAOuC,EAAkB,KAC9B,CACD9V,EAAM1F,KAAKk3B,GACX1Y,EAAUxe,KAAKiZ,EAChB,QAAS0K,GACVuT,EAAK8E,gBAAgB5D,EAAQ1yB,EAAO8Y,EACrC,KAAM,CACL4Z,EAAOc,qBADF,IAED1a,GAAI,EACJmF,EAAa,EACjB,EAAG,KACG5O,EAAO,EACPknB,EAAa,EAFhB,OAGY,CACX,IAAI/E,EACJ,GAAMD,EAAU,KAAQ,EAAKoB,EAC3BnB,EAAID,EAAU,OACT,OAAiB,GAAVA,GAAgB,KAAQ,EAAKjiB,GAEpC,CACLwJ,GAAI,EACJ,KACD,CAJC0Y,GAAe,GAAVD,GAAgB,EAItB,CAED,MAAMzb,EAAIygB,EAAav2B,EACvB,GAAQ,WAAJ8V,EAAgB,MAIpB,GAHAygB,EAAazgB,EACbzG,EAAOA,EAAOrP,EAAQwxB,EACtBvT,MACMwJ,IAAWC,EAAQ,CACvB5O,GAAI,EACJ,KACD,CACDyY,EAAUvtB,EAAOosB,WAAW3I,EAC7B,CACDlU,EAA+C,GAArCie,EAAK4E,8BAAqC,EACpD,MAAMzO,EACsD,GADrC7R,EAAcmI,EAAa1K,IAC7Bie,EAAK6E,0BAA4B,GACtD3D,EAAO8D,qBAAqBD,EAAYlnB,EAAMsY,EAC/C,QAAS7O,EACX,CAED,GAAI2O,IAAWC,EAAQ,CACrB,IAAK8J,EAAK0E,eAAe3E,GAAU,OAAO,KAC1C,IAAK9J,IAAUA,EAASC,EAAQD,IAE9B,GADA8J,EAAUvtB,EAAOosB,WAAW3I,IACvB+J,EAAK0E,eAAe3E,GAAU,OAAO,IAE7C,CAID,OADAmB,EAAOjE,MAAkB,GAAV3V,EACR4Z,EAAOU,QACf,CAEqB,sBAAfkD,CAAgBt2B,EAAc8Y,EAAiB4O,GAAhC,IAEhBD,EAAa,EACb8J,EAAQ,EACRC,EAAc,EAClB,IAAK,IAAIvT,EAAInF,EAAMphB,OAAS,EAAQ,GAALumB,EAAQA,IAAK,OACpCja,EAAO8U,EAAMmF,GACbnI,EAAW4R,EAAUzJ,GAC3BsT,GAAUvtB,GAAQwtB,EAClBA,GAAe1b,EACK,KAAhB0b,GACFxxB,EAAOyzB,WAAWhM,IAAc8J,GAChCC,EAAc,EACdD,EAAQ,GACe,GAAdC,IACTxxB,EAAOyzB,WAAWhM,IAAsB,WAAR8J,GAChCC,GAAe,GACfD,EAAQvtB,IAAU8R,EAAW0b,EAEhC,CACD,GAAc,IAAVD,EAAa,CACf,GAAI9J,GAAcznB,EAAOtI,OAAQ,MAAM,IAAIvK,MAAM,sBACjD6S,EAAOyzB,WAAWhM,IAAc8J,EACjC,CACD,KAAO9J,EAAaznB,EAAOtI,OAAQ+vB,IACjCznB,EAAOyzB,WAAWhM,EAAY,EAEjC,CAE8B,+BAAxB2K,CAAyBpyB,EAASgE,GACvC,MAAM8U,EAAS9Y,EAAEtI,OACjB,IAAIgwB,EAAO1jB,EAAQ,EACnB0jB,GAAuB,GAAdA,IAAS,IAAqB,GAAPA,GAChCA,GAAuB,GAAdA,IAAS,IAAqB,GAAPA,GAChCA,GAAuB,GAAdA,IAAS,IAAqB,GAAPA,GAAzB,MACDD,EAAcC,EACd6J,EAAWvtB,EAAQ,EACnBia,EAAMje,EAAEuyB,QAAQzZ,EAAS,GACzBhD,EAAkB0b,EAAKgB,QAAQvU,GAErC,IAAI1K,EACgD,GAFzB,GAATuF,EAAchD,EAEd2R,EAAc,GAAKA,EAErC,GADIznB,EAAEyuB,MAAMlb,IACR,UAAAA,EAA2B,MAAM,IAAIpmB,MAAM,mBAC/C,MAAMkiB,EAAa/X,MAAMic,GAAzB,IACImf,EAAMnf,EAAgB,EACtB6V,EAAQ,EACRuJ,EAAgB,EACpB,IAAK,IAAIjL,EAAI,EAAGA,EAAI5O,EAAS,EAAG4O,IAAK,OAC7B1jB,EAAWhE,EAAEuyB,QAAQ7K,GACrB5O,GAAWsQ,EAASplB,GAAY2uB,GAAkBpB,EACxDliB,EAAOqjB,KAASlB,EAAKiF,mBAAmB3d,GACxC,MAAMmF,EAAewJ,EAAckL,EAJA,IAKnCvJ,EAAQplB,IAAaia,EACrB0U,EAAgB,GAAK1U,EACd0U,GAAiBlL,GACtBpY,EAAOqjB,KAASlB,EAAKiF,mBAAmBrN,EAAQmI,GAChDnI,KAAW3B,EACXkL,GAAiBlL,CAEpB,CACD,MAAMmL,GAAWxJ,EAASnL,GAAO0U,GAAkBpB,EAAnD,IACAliB,EAAOqjB,KAASlB,EAAKiF,mBAAmB7D,GACxCxJ,EAAQnL,IAASwJ,EAAckL,EACd,IAAVvJ,GACL/Z,EAAOqjB,KAASlB,EAAKiF,mBAAmBrN,EAAQmI,GAChDnI,KAAW3B,EAGb,GADIznB,EAAEyuB,OAAMpf,EAAOqjB,KAAS,MACf,GAATA,EAAY,MAAM,IAAIvlC,MAAM,sBAChC,OAAOkiB,EAAOgZ,KAAK,GACpB,CAEuB,wBAAjBgK,CAAkBryB,EAASgE,EAAe8U,GAE/C,MAAM4O,EAAS1nB,EAAEtI,OACjB,GAAe,IAAXgwB,EAAc,MAAO,GACzB,GAAe,IAAXA,EAAc,CAChB,IAAIA,EAAS1nB,EAAEsyB,gBAAgB,GAAGv9B,SAASiP,GAI3C,OAHI,IAAA8U,GAA6B9Y,EAAEyuB,OACjC/G,EAAS,IAAMA,GAEVA,CACR,OACKD,EAAqB,GAATC,EAAc8J,EAAKgB,QAAQxyB,EAAEuyB,QAAQ7K,EAAS,IAC1D6J,EAAiBC,EAAK2E,kBAAkBnyB,GACxCia,EAAiBsT,EAAiB,EACxC,IAAIzb,EAAgB2R,EAAY+J,EAAK4E,8BACrCtgB,GAAiBmI,EAAiB,EAClCnI,EAAmD,EAAlCA,EAAgBmI,EAAA,MAC3B1K,EAAmBuC,EAAgB,GAAM,EAGzCzG,EAAYmiB,EAAK8B,aAAa9B,EAAKM,WAAW9tB,GAAhB,GAChCwtB,EAAKM,WAAWve,GAAhB,IADc,IAEdmf,EACAtJ,EACJ,MAAMuJ,EAAUtjB,EAAUijB,gBAAgB,GAC1C,GAAyB,IAArBjjB,EAAU3X,QAA2B,OAAXi7B,EAAmB,CAC/CD,EAAW,IAAIlB,EAAKxxB,EAAEtI,QAAX,GACXg7B,EAASc,qBACT,IAAI1a,EAAY,EAChB,IAAK,IAAI4O,EAAe,EAAX1nB,EAAEtI,OAAa,EAAQ,GAALgwB,EAAQA,IAAK,CAC1C,MAAM1jB,EAAS8U,GAAa,GAAM9Y,EAAE02B,YAAYhP,GAChDgL,EAASiE,eAAejP,EAAuB,EAAnB1jB,EAAQ2uB,GACpC7Z,EAAgC,EAAnB9U,EAAQ2uB,CACtB,CACDvJ,EAAatQ,EAAU/jB,SAASiP,EACjC,KAAM,CACL,MAAM8U,EAAiB0Y,EAAKsC,mBAAmB9zB,EAAGqP,GAA3B,MACvBqjB,EAAW5Z,EAAehkB,SAC1B,MAAM4yB,EAAY5O,EAAeib,UAAUX,SAC3ChK,EAAaoI,EAAKa,kBAAkB3K,EAAW1jB,GAAlC,EACd,CACD0uB,EAASU,SACT,IAAIR,EAAYpB,EAAKa,kBAAkBK,EAAU1uB,GAAjC,GAAhB,KACOolB,EAAW1xB,OAAS6b,GACzB6V,EAAa,IAAMA,EAKrB,OAHI,IAAAtQ,GAA6B9Y,EAAEyuB,OACjCmE,EAAY,IAAMA,GAEbA,EAAYxJ,CACpB,CAEmB,oBAAbwN,CAAc5yB,GACnB,OAAOA,GAAgB,EAAI,CAC5B,CACuB,wBAAjB6yB,CAAkB7yB,GACvB,OAAOA,GAAgB,EAAI,CAC5B,CACoB,qBAAd8yB,CAAe9yB,GACpB,OAAOA,EAAe,GAAK,CAC5B,CAEuB,wBAAjBwwB,CAAkBxwB,EAAShE,GAChC,MAAM8Y,EAAQ9U,EAAEyqB,KAChB,GAAI3V,IAAU9Y,EAAEyuB,KAAM,OAAO+C,EAAKoF,cAAc9d,GAChD,MAAM4O,EAAS8J,EAAKoC,kBAAkB5vB,EAAGhE,GAAzC,OACa,EAAT0nB,EAAmB8J,EAAKqF,kBAAkB/d,GACjC,EAAT4O,EAAmB8J,EAAKsF,eAAehe,GACpC,CACR,CAEuB,wBAAjBie,CAAkB/yB,EAAShE,GAChC,GAAIwxB,EAAKK,gBAAgB7xB,GAAI,OACrB0nB,EAAQ1jB,EAAEyqB,KACVhH,EAAa,EAAJznB,EACf,GAAI0nB,IAAUD,EAAO,OAAO+J,EAAKoF,cAAclP,GAC/C,GAAiB,IAAb1jB,EAAEtM,OAAc,CAClB,GAAI+vB,EAAO,MAAM,IAAIt6B,MAAM,sBAC3B,OAAa,IAAN6S,EAAU,GAAK,CACvB,CAED,GAAe,EAAXgE,EAAEtM,OAAY,OAAO85B,EAAKqF,kBAAkBnP,GATrB,MAUrB6J,EAAOzY,EAAS9Y,GAChBie,EAASja,EAAEsuB,gBAAgB,GAXN,OAYvBrU,EAASsT,EAAaC,EAAKqF,kBAAkBnP,GAC7CzJ,EAASsT,EAAaC,EAAKsF,eAAepP,GACvC,CACR,CACD,OAAO8J,EAAKwF,kBAAkBhzB,EAAGhE,EAClC,CAEuB,wBAAjBg3B,CAAkBhzB,EAAShE,GAChC,GAAIA,IAAMA,EAAG,OAAOA,EACpB,GAAIA,IAAC,IAAe,OAAQ,EAC5B,GAAIA,KAAOyyB,IAAU,OAAO,EAAP,MACf3Z,EAAQ9U,EAAEyqB,KAEhB,GAAI3V,IADe,EAAJ9Y,EACM,OAAOwxB,EAAKoF,cAAc9d,GAC/C,GAAU,IAAN9Y,EACF,MAAM,IAAI7S,MAAM,mDAElB,GAAiB,IAAb6W,EAAEtM,OAAc,OAAQ,EAC5B85B,EAAKuB,uBAAuB,GAAK/yB,EACjC,MAAM0nB,EAAsD,KAAvC8J,EAAKsB,qBAAqB,KAAO,GACtD,GAAoB,MAAhBpL,EACF,MAAM,IAAIv6B,MAAM,yCAElB,MAAMs6B,EAAWC,EAAc,KAC/B,GAAe,EAAXD,EAGF,OAAO+J,EAAKqF,kBAAkB/d,GAEhC,MAAMyY,EAAUvtB,EAAEtM,OAClB,IAAIumB,EAAOja,EAAEuuB,QAAQhB,EAAU,GAA/B,MACMzb,EAAkB0b,EAAKgB,QAAQvU,GAC/B1K,EAAuB,GAAVge,EAAezb,EAC5BzG,EAAaoY,EAAW,EAC9B,GAAIlU,EAAalE,EAAY,OAAOmiB,EAAKsF,eAAehe,GACxD,GAAIvF,EAAalE,EAAY,OAAOmiB,EAAKqF,kBAAkB/d,GAA9B,IAIzB4Z,EAAe,QAAgC,QAA/BlB,EAAKsB,qBAAqB,GAC1C1J,EAAcoI,EAAKsB,qBAAqB,GAA1B,MACZH,EAAsB,GACtBC,EAAY,GAAK9c,EACvB,GAAI8c,KAAyC,GAAxBrf,EAAa,GAAK,IACrC,MAAM,IAAIpmB,MAAM,sBAAhB,IAEEmiB,EACAinB,EAAwB,EAE5B,GAAI,GAAA3D,EAAiC,CACnC,MAAM5uB,EAAQ2uB,EAAsBC,EACpC2D,EAAwBvyB,EAAQ,GAChCsL,EAAkBojB,IAAiB1uB,EACnC0uB,EAAgBA,GAAiB,GAAK1uB,EAAWolB,IAAgBplB,EACjEolB,IAA8B,GAAKplB,CACpC,MAAM,GAAI,KAAA4uB,EACT2D,EAAwB,GACxBjnB,EAAkBojB,EAClBA,EAAetJ,EACfA,EAAc,MACT,CACL,MAAMplB,EAAQ4uB,EAAYD,EAC1B4D,EAAwB,GAAKvyB,EAC7BsL,EACKojB,GAAgB1uB,EAAUolB,IAAiB,GAAKplB,EACrD0uB,EAAetJ,GAAeplB,EAC9BolB,EAAc,CACf,CAGD,GAFAnL,KAAgB,EAChB3O,KAAsC,EAClC2O,EAAO3O,EAAiB,OAAOkiB,EAAKqF,kBAAkB/d,GAC1D,GAAImF,EAAO3O,EAAiB,OAAOkiB,EAAKsF,eAAehe,GAEvD,IAAK,IAAI4O,EAAa6J,EAAU,EAAiB,GAAd7J,EAAiBA,IAAc,CACpC,EAAxB6O,GACFA,GAAyB,GACzBjnB,EAAkBojB,IAAiB,EACnCA,EAAgBA,GAAgB,GAAOtJ,IAAgB,EACvDA,IAA8B,IAE9B9Z,EAAkB,EAEpB,MAAMtP,EAAQgE,EAAEsuB,gBAAgB5K,GAChC,GAAI1nB,EAAQsP,EAAiB,OAAOkiB,EAAKqF,kBAAkB/d,GAC3D,GAAI9Y,EAAQsP,EAAiB,OAAOkiB,EAAKsF,eAAehe,EACzD,CAED,GAAqB,IAAjB4Z,GAAsC,IAAhBtJ,EAAmB,CAC3C,GAA8B,IAA1BmN,EAA6B,MAAM,IAAIppC,MAAM,sBACjD,OAAOqkC,EAAKsF,eAAehe,EAC5B,CACD,OAAO,CACR,CAEqB,sBAAfmd,CAAgBjyB,EAAShE,GAAV,OAChBwxB,EAAKK,gBAAgB7xB,GACb,IAANA,EAA6B,IAAbgE,EAAEtM,OAED,IAAbsM,EAAEtM,QAAkBsM,EAAEyqB,OAAc,EAAJzuB,GAChCgE,EAAEsuB,gBAAgB,KAAOxZ,EAAS9Y,GAEJ,IAAjCwxB,EAAKwF,kBAAkBhzB,EAAGhE,EAClC,CAO8B,+BAAxBi3B,CAAyBjzB,EAAgBhE,GAAjB,OAEtB,IADCA,EACkB,EAATgE,EACV,IAFChE,EAEmB,GAAVgE,EACV,IAHChE,EAGkB,EAATgE,EACV,IAJChE,EAImB,GAAVgE,OAAA,CAElB,CAEe,gBAAT4xB,CAAU5xB,EAAQhE,EAAQ8Y,GAG/B,GAFA9U,EAAIwtB,EAAKU,cAAcluB,GACvBhE,EAAIwxB,EAAKU,cAAclyB,GACN,iBAANgE,GAA+B,iBAANhE,EAClC,OAAQ8Y,GACN,KAAK,EAAG,OAAO9U,EAAIhE,EACnB,KAAK,EAAG,OAAOgE,GAAKhE,EACpB,KAAK,EAAG,OAAOgE,EAAIhE,EACnB,KAAK,EAAG,OAAOgE,GAAKhE,EAGxB,GAAIwxB,EAAKkE,WAAW1xB,IAAmB,iBAANhE,EAAjC,OACEA,EAAIwxB,EAAKQ,aAAahyB,GACZ,OAANA,GACGwxB,EAAKyF,yBAAyBzF,EAAKgD,kBAAkBxwB,EAAGhE,GAAI8Y,GAErE,GAAiB,iBAAN9U,GAAkBwtB,EAAKkE,WAAW11B,GAA7C,OACEgE,EAAIwtB,EAAKQ,aAAahuB,GACZ,OAANA,GACGwtB,EAAKyF,yBAAyBzF,EAAKgD,kBAAkBxwB,EAAGhE,GAAI8Y,GAIrE,GAFA9U,EAAIwtB,EAAKiE,YAAYzxB,GACrBhE,EAAIwxB,EAAKiE,YAAYz1B,GACjBwxB,EAAKkE,WAAW1xB,GAAI,CACtB,GAAIwtB,EAAKkE,WAAW11B,GAClB,OAAOwxB,EAAKyF,yBAAyBzF,EAAKgD,kBAAkBxwB,EAAGhE,GAAI8Y,GAErE,GAAiB,iBAAN9Y,EAAgB,MAAM,IAAI7S,MAAM,sBAC3C,OAAOqkC,EAAKyF,yBAAyBzF,EAAKuF,kBAAkB/yB,EAAGhE,GAAI8Y,EACpE,CACD,GAAiB,iBAAN9U,EAAgB,MAAM,IAAI7W,MAAM,sBAC3C,GAAIqkC,EAAKkE,WAAW11B,GAElB,OAAOwxB,EAAKyF,yBAAyBzF,EAAKuF,kBAAkB/2B,EAAGgE,GACrD,EAAL8U,GAEP,GAAiB,iBAAN9Y,EAAgB,MAAM,IAAI7S,MAAM,sBAAhB,OAEpB,IADC2rB,EACS9U,EAAIhE,EACd,IAFC8Y,EAES9U,GAAKhE,EACf,IAHC8Y,EAGS9U,EAAIhE,EACd,IAJC8Y,EAIS9U,GAAKhE,OAAA,CAEvB,CAED0zB,QAAAA,GACE,OAAOlC,EAAKgB,QAAQ,KAAKD,QAAQ,KAAK76B,OAAS,GAChD,CAEmB,oBAAbu8B,CAAcj0B,EAAS8Y,EAAS4O,GACrC,GAAI1nB,EAAEtI,OAASohB,EAAEphB,OAAQ,OAAO85B,EAAKyC,cAAcnb,EAAG9Y,EAAG0nB,GACzD,GAAiB,IAAb1nB,EAAEtI,OAAc,OAAOsI,EAC3B,GAAiB,IAAb8Y,EAAEphB,OAAc,OAAOsI,EAAEyuB,OAAS/G,EAAa1nB,EAAIwxB,EAAKwB,WAAWhzB,GACvE,IAAIynB,EAAeznB,EAAEtI,QACA,IAAjBsI,EAAE0zB,YAAqB5a,EAAEphB,SAAWsI,EAAEtI,QAA2B,IAAjBohB,EAAE4a,aACpDjM,IAEF,MAAM8J,EAAS,IAAIC,EAAK/J,EAAcC,GAAtC,IACIzJ,EAAQ,EACRnI,EAAI,EACR,KAAOA,EAAIgD,EAAEphB,OAAQoe,IAAK,CACxB,MAAM9R,EAAIhE,EAAEuyB,QAAQzc,GAAKgD,EAAEyZ,QAAQzc,GAAKmI,EACxCA,EAAQja,IAAM,GACdutB,EAAOkC,WAAW3d,EAAO,WAAJ9R,EACtB,CACD,KAAO8R,EAAI9V,EAAEtI,OAAQoe,IAAK,CACxB,MAAM9R,EAAIhE,EAAEuyB,QAAQzc,GAAKmI,EACzBA,EAAQja,IAAM,GACdutB,EAAOkC,WAAW3d,EAAO,WAAJ9R,EACtB,CAID,OAHI8R,EAAIyb,EAAO75B,QACb65B,EAAOkC,WAAW3d,EAAGmI,GAEhBsT,EAAO6B,QACf,CAEmB,oBAAbc,CAAcl0B,EAAS8Y,EAAS4O,GACrC,GAAiB,IAAb1nB,EAAEtI,OAAc,OAAOsI,EAC3B,GAAiB,IAAb8Y,EAAEphB,OAAc,OAAOsI,EAAEyuB,OAAS/G,EAAa1nB,EAAIwxB,EAAKwB,WAAWhzB,GACvE,MAAMynB,EAAS,IAAI+J,EAAKxxB,EAAEtI,OAAQgwB,GAAlC,IACI6J,EAAS,EACTtT,EAAI,EACR,KAAOA,EAAInF,EAAEphB,OAAQumB,IAAK,CACxB,MAAMja,EAAIhE,EAAEuyB,QAAQtU,GAAKnF,EAAEyZ,QAAQtU,GAAKsT,EACxCA,EAAsB,EAAZvtB,IAAM,GAChByjB,EAAOgM,WAAWxV,EAAO,WAAJja,EACtB,CACD,KAAOia,EAAIje,EAAEtI,OAAQumB,IAAK,CACxB,MAAMja,EAAIhE,EAAEuyB,QAAQtU,GAAKsT,EACzBA,EAAsB,EAAZvtB,IAAM,GAChByjB,EAAOgM,WAAWxV,EAAO,WAAJja,EACtB,CACD,OAAOyjB,EAAO2L,QACf,CAEsB,uBAAhBC,CAAiBrzB,EAASgE,EAAe8U,EAAoB,MAClE,MAAM4O,EAAc1nB,EAAEtI,OACP,OAAXohB,EACFA,EAAS,IAAI0Y,EAAK9J,EAAa1jB,GAE/B8U,EAAO2V,KAAOzqB,EAEhB,IAAIyjB,EAAQ,EACZ,IAAK,IAAI8J,EAAI,EAAGA,EAAI7J,EAAa6J,IAAK,CACpC,MAAMvtB,EAAIhE,EAAEuyB,QAAQhB,GAAK9J,EACzBA,EAAQzjB,IAAM,GACd8U,EAAO2a,WAAWlC,EAAO,WAAJvtB,EACtB,CAID,OAHc,GAAVyjB,GACF3O,EAAOoe,eAAexP,EAAa,GAE9B5O,CACR,CAEsB,uBAAhBqa,CAAiBnzB,EAAS8Y,GAC/B,MAAM4O,EAAS1nB,EAAEtI,OACjBohB,EAAeA,GAAgB4O,EAC/B,MAAMD,EAAS,IAAI+J,EAAK1Y,GAAT,GACf,IAAIyY,EAAS,EACb,IAAK,IAAIC,EAAI,EAAGA,EAAI9J,EAAQ8J,IAAK,CAC/B,MAAMxtB,EAAIhE,EAAEuyB,QAAQf,GAAKD,EACzBA,EAAsB,EAAZvtB,IAAM,GAChByjB,EAAOgM,WAAWjC,EAAO,WAAJxtB,EACtB,CACD,GAAe,GAAXutB,EAAc,MAAM,IAAIpkC,MAAM,sBAClC,IAAK,IAAIokC,EAAI7J,EAAQ6J,EAAIzY,EAAcyY,IACrC9J,EAAOgM,WAAWlC,EAAG,GAEvB,OAAO9J,CACR,CAEmB,oBAAbqN,CAAc90B,EAAS8Y,EAAS4O,EAAoB,MAAvC,IACdD,EAAUznB,EAAEtI,OACZ65B,EAAUzY,EAAEphB,OACZumB,EAAWsT,EACf,GAAI9J,EAAU8J,EAAS,CACrBtT,EAAWwJ,EADU,MAEfzjB,EAAMhE,EACN0nB,EAAYD,EAClBznB,EAAI8Y,EACJ2O,EAAU8J,EACVzY,EAAI9U,EACJutB,EAAU7J,CACX,CACD,IAAI5R,EAAemI,EACJ,OAAXyJ,EACFA,EAAS,IAAI8J,EAAK1b,GAAT,GAETA,EAAe4R,EAAOhwB,OAExB,IAAI6b,EAAI,EACR,KAAOA,EAAI0K,EAAU1K,IACnBmU,EAAO+L,WAAWlgB,EAAGvT,EAAEuyB,QAAQhf,GAAKuF,EAAEyZ,QAAQhf,IAEhD,KAAOA,EAAIuC,EAAcvC,IACvBmU,EAAO+L,WAAWlgB,EAAG,GAEvB,OAAOmU,CACR,CAEsB,uBAAhBsN,CAAiBh1B,EAAS8Y,EAAS4O,EAAoB,MAAvC,MACfD,EAAUznB,EAAEtI,OACZ65B,EAAUzY,EAAEphB,OAClB,IAAIumB,EAAWsT,EACX9J,EAAU8J,IACZtT,EAAWwJ,GAEb,IAAI3R,EAAe2R,EACJ,OAAXC,EACFA,EAAS,IAAI8J,EAAK1b,GAAT,GAETA,EAAe4R,EAAOhwB,OAExB,IAAI6b,EAAI,EACR,KAAOA,EAAI0K,EAAU1K,IACnBmU,EAAO+L,WAAWlgB,EAAGvT,EAAEuyB,QAAQhf,IAAMuF,EAAEyZ,QAAQhf,IAEjD,KAAOA,EAAIkU,EAASlU,IAClBmU,EAAO+L,WAAWlgB,EAAGvT,EAAEuyB,QAAQhf,IAEjC,KAAOA,EAAIuC,EAAcvC,IACvBmU,EAAO+L,WAAWlgB,EAAG,GAEvB,OAAOmU,CACR,CAEkB,mBAAZqN,CAAa/0B,EAAS8Y,EAAS4O,EAAoB,MAAvC,IACbD,EAAUznB,EAAEtI,OACZ65B,EAAUzY,EAAEphB,OACZumB,EAAWsT,EACf,GAAI9J,EAAU8J,EAAS,CACrBtT,EAAWwJ,EADU,MAEfzjB,EAAMhE,EACN0nB,EAAYD,EAClBznB,EAAI8Y,EACJ2O,EAAU8J,EACVzY,EAAI9U,EACJutB,EAAU7J,CACX,CACD,IAAI5R,EAAe2R,EACJ,OAAXC,EACFA,EAAS,IAAI8J,EAAK1b,GAAT,GAETA,EAAe4R,EAAOhwB,OAExB,IAAI6b,EAAI,EACR,KAAOA,EAAI0K,EAAU1K,IACnBmU,EAAO+L,WAAWlgB,EAAGvT,EAAEuyB,QAAQhf,GAAKuF,EAAEyZ,QAAQhf,IAEhD,KAAOA,EAAIkU,EAASlU,IAClBmU,EAAO+L,WAAWlgB,EAAGvT,EAAEuyB,QAAQhf,IAEjC,KAAOA,EAAIuC,EAAcvC,IACvBmU,EAAO+L,WAAWlgB,EAAG,GAEvB,OAAOmU,CACR,CAEmB,oBAAbwN,CAAcl1B,EAAS8Y,EAAS4O,EAAoB,MAAvC,IACdD,EAAUznB,EAAEtI,OACZ65B,EAAUzY,EAAEphB,OACZumB,EAAWsT,EACf,GAAI9J,EAAU8J,EAAS,CACrBtT,EAAWwJ,EADU,MAEfzjB,EAAMhE,EACN0nB,EAAYD,EAClBznB,EAAI8Y,EACJ2O,EAAU8J,EACVzY,EAAI9U,EACJutB,EAAU7J,CACX,CACD,IAAI5R,EAAe2R,EACJ,OAAXC,EACFA,EAAS,IAAI8J,EAAK1b,GAAT,GAETA,EAAe4R,EAAOhwB,OAExB,IAAI6b,EAAI,EACR,KAAOA,EAAI0K,EAAU1K,IACnBmU,EAAO+L,WAAWlgB,EAAGvT,EAAEuyB,QAAQhf,GAAKuF,EAAEyZ,QAAQhf,IAEhD,KAAOA,EAAIkU,EAASlU,IAClBmU,EAAO+L,WAAWlgB,EAAGvT,EAAEuyB,QAAQhf,IAEjC,KAAOA,EAAIuC,EAAcvC,IACvBmU,EAAO+L,WAAWlgB,EAAG,GAEvB,OAAOmU,CACR,CAEuB,wBAAjBkM,CAAkB5zB,EAAS8Y,GAChC,MAAM4O,EAAO1nB,EAAEtI,OAASohB,EAAEphB,OAC1B,GAAa,GAATgwB,EAAY,OAAOA,EACvB,IAAID,EAAIznB,EAAEtI,OAAS,EAAnB,KACY,GAAL+vB,GAAUznB,EAAEuyB,QAAQ9K,KAAO3O,EAAEyZ,QAAQ9K,IAAIA,IAAC,OACzC,EAAJA,EAAc,EACXznB,EAAEsyB,gBAAgB7K,GAAK3O,EAAEwZ,gBAAgB7K,GAAK,GAAK,CAC3D,CAE0B,2BAApBkM,CAAqB3zB,EAAoB8Y,EAC5C4O,EAAmBD,GACrB,GAAmB,IAAf3O,EAAkB,aAChByY,EAAqB,MAAbzY,EACRmF,EAASnF,IAAe,OAC1BhD,EAAQ,EACRvC,EAAO,EACX,IAAK,IACClE,EADGqjB,EAAI,EAAGA,EAAI1yB,EAAatI,OAAQg7B,IAAKjL,IAAoB,CAC5DpY,EAAMqY,EAAY6K,QAAQ9K,GADkC,MAE1DzjB,EAAKhE,EAAauyB,QAAQG,GAC1B5Z,EAAa,MAAL9U,EACRolB,EAASplB,IAAO,GAChB2uB,EAAOnB,EAAK2F,OAAOre,EAAOyY,GAC1BqB,EAAQpB,EAAK2F,OAAOre,EAAOmF,GAC3B3O,EAAQkiB,EAAK2F,OAAO/N,EAAQmI,GAC5BgF,EAAQ/E,EAAK2F,OAAO/N,EAAQnL,GAClC5O,GAAOkE,EAAOof,EAAO7c,EACrBA,EAAQzG,IAAQ,GAChBA,GAAO,WACPA,KAAiB,MAARujB,IAAmB,MAAgB,MAARtjB,IAAmB,IACvDwG,GAASzG,IAAQ,GACjBkE,EAAOgjB,GAAS3D,IAAU,KAAOtjB,IAAU,IAC3CoY,EAAY+L,WAAWhM,EAAwB,WAANpY,EAC1C,CACD,KAAiB,GAAVyG,GAAwB,IAATvC,EAAYkU,IAAoB,CACpD,IAAIzjB,EAAM0jB,EAAY6K,QAAQ9K,GAC9BzjB,GAAO8R,EAAQvC,EACfA,EAAO,EACPuC,EAAQ9R,IAAQ,GAChB0jB,EAAY+L,WAAWhM,EAAwB,WAANzjB,EAC1C,CACF,CAE2B,4BAArBozB,CAAsBp3B,EAAc8Y,EAAgB4O,EACvD6J,EAAWtT,GADa,IAEtBnI,EAAQ4R,EACRrY,EAAO,EACX,IAAK,IAAIoY,EAAI,EAAGA,EAAI8J,EAAG9J,IAAK,OACpBzjB,EAAQhE,EAAOuyB,QAAQ9K,GACvBC,EAAK8J,EAAK2F,OAAe,MAARnzB,EAAgB8U,GACjCyY,EAAKC,EAAK2F,OAAOnzB,IAAU,GAAI8U,GAC/B4Z,EAAIhL,IAAY,MAAL6J,IAAgB,IAAMliB,EAAOyG,EAC9CA,EAAQ4c,IAAM,GACdrjB,EAAOkiB,IAAO,GACdtT,EAAOwV,WAAWhM,EAAO,WAAJiL,EACtB,CACD,GAAIzU,EAAOvmB,OAAS65B,EAApB,IACEtT,EAAOwV,WAAWlC,IAAKzb,EAAQzG,GACxBkiB,EAAItT,EAAOvmB,QAChBumB,EAAOwV,WAAWlC,IAAK,QAGzB,GAAqB,IAAjBzb,EAAQzG,EAAY,MAAM,IAAIliB,MAAM,qBAE3C,CAEDqpC,oBAAAA,CAAqBxyB,EAAoBhE,EAAiB8Y,GAEpDA,EAAS,KAAKphB,SAAQohB,EAAS,KAAKphB,QAAA,MAClCgwB,EAAoB,MAAb1jB,EACPyjB,EAAQzjB,IAAe,OACzButB,EAAQ,EACRtT,EAAOje,EACX,IAAK,IAAI8V,EAAI,EAAGA,EAAIgD,EAAQhD,IAAK,OACzB9R,EAAI,KAAKuuB,QAAQzc,GACjB9V,EAAW,MAAJgE,EACP8U,EAAQ9U,IAAM,GACduP,EAAOie,EAAK2F,OAAOn3B,EAAM0nB,GACzBrY,EAAQmiB,EAAK2F,OAAOn3B,EAAMynB,GAC1BiL,EAAQlB,EAAK2F,OAAOre,EAAO4O,GAC3B0B,EAAQoI,EAAK2F,OAAOre,EAAO2O,GACjC,IAAIkL,EAAS1U,EAAO1K,EAAOge,EAC3BA,EAAQoB,IAAW,GACnBA,GAAU,WACVA,KAAoB,MAARtjB,IAAmB,MAAgB,MAARqjB,IAAmB,IAC1DnB,GAASoB,IAAW,GACpB1U,EAAOmL,GAAS/Z,IAAU,KAAOqjB,IAAU,IAC3C,KAAKe,WAAW3d,EAAY,WAAT6c,EACpB,CACD,GAAc,GAAVpB,GAAwB,IAATtT,EACjB,MAAM,IAAI9wB,MAAM,qBAEnB,CAEwB,yBAAlB0mC,CAAmB7zB,EAAS8Y,EAC/B4O,EAAsB,MACP,OAAbA,IAAmBA,EAAW,IAAI8J,EAAKxxB,EAAEtI,QAAX,IAClC,IAAI+vB,EAAY,EAChB,IAAK,IACC8J,EADGC,EAAe,EAAXxxB,EAAEtI,OAAa,EAAQ,GAAL85B,EAAQA,GAAK,EAAG,CACzCD,GAAU9J,GAAa,GAAMznB,EAAE02B,YAAYlF,MAAQ,EACvD,MAAMxtB,EAAgC,EAAnButB,EAAQzY,EAC3B2O,EAAgC,EAAnB8J,EAAQzY,EACrByY,GAAU9J,GAAa,GAAMznB,EAAE02B,YAAYlF,EAAI,MAAQ,EACvD,MAAMvT,EAAgC,EAAnBsT,EAAQzY,EAC3B2O,EAAgC,EAAnB8J,EAAQzY,EACrB4O,EAAS+L,WAAWjC,IAAM,EAAIxtB,GAAa,GAAMia,EAClD,CACD,OAAOyJ,CACR,CAEwB,yBAAlBsM,CAAmBh0B,EAAS8Y,GACjC,IAAI4O,EAAY,EAChB,IAAK,IAAID,EAAe,EAAXznB,EAAEtI,OAAa,EAAQ,GAAL+vB,EAAQA,IAAK,CAC1C,MAAMzjB,GAAU0jB,GAAa,GAAM1nB,EAAE02B,YAAYjP,MAAQ,EACzDC,EAAgC,EAAnB1jB,EAAQ8U,CACtB,CACD,OAAO4O,CACR,CAQwB,yBAAlBoM,CAAmB9vB,EAAgBhE,EACtC8Y,EAAuB4O,GADF,MAGjB6J,EAAIvxB,EAAQq3B,oBACZ5P,EAAKznB,EAAQtI,OACbumB,EAAIja,EAASqzB,oBAAsB9F,EACzC,IAAIzb,EAAI,KACJgD,IACFhD,EAAI,IAAI0b,EAAMvT,EAAI,IAAO,GAArB,GACJnI,EAAE0d,sBAEJ,MAAMjgB,EAAQ,IAAIie,EAAMD,EAAI,IAAO,GAArB,GACdhe,EAAMigB,qBAEN,MAAMnkB,EAAQmiB,EAAK8F,QAAQt3B,EAAQ02B,YAAYnF,EAAI,IACvC,EAARliB,IACFrP,EAAUwxB,EAAK+F,mBAAmBv3B,EAASqP,EAAO,IAAxC,MAEN+Z,EAAIoI,EAAK+F,mBAAmBvzB,EAAUqL,EAAO,GAE7CqjB,EAAM1yB,EAAQ02B,YAAYnF,EAAI,GACpC,IAAIoB,EAAkB,EACtB,IAAK,IAECtjB,EAFGujB,EAAI3U,EAAQ,GAAL2U,EAAQA,IAAK,CAEvBvjB,EAAO,MACX,MAAMrL,EAAMolB,EAAEsN,YAAY9D,EAAIrB,GAC9B,GAAIvtB,IAAQ0uB,EAAK,CACf,MAAM5Z,GAAU9U,GAAO,GAAMolB,EAAEsN,YAAY9D,EAAIrB,EAAI,MAAQ,EAC3DliB,EAAuB,EAAfyJ,EAAQ4Z,EAChB,IAAIhL,EAAuB,EAAf5O,EAAQ4Z,EAHL,MAITjL,EAAMznB,EAAQ02B,YAAYnF,EAAI,GAC9BtT,EAAOmL,EAAEsN,YAAY9D,EAAIrB,EAAI,GALpB,KAMPC,EAAK2F,OAAO9nB,EAAMoY,KAAS,GAAQC,GAAQ,GAAMzJ,KAAU,IACjE5O,IACAqY,GAAQgL,IACG,MAAPhL,MAEP,CAED8J,EAAK4F,sBAAsBp3B,EAASqP,EAAM,EAAGoY,EAAIlU,GACjD,IAAImU,EAAI0B,EAAEoO,aAAajkB,EAAOqf,EAAGrB,EAAI,GAC3B,IAAN7J,IACFA,EAAI0B,EAAEqO,aAAaz3B,EAAS4yB,EAAGrB,GAC/BnI,EAAEuN,eAAe/D,EAAIrB,EAAgC,MAA5BnI,EAAEsN,YAAY9D,EAAIrB,GAAK7J,GAChDrY,KAEEyJ,IACM,EAAJ8Z,EACFD,EAAkBtjB,GAAQ,GAGzByG,EAAW2d,WAAWb,IAAM,EAAGD,EAAkBtjB,GAGvD,CACD,GAAIqY,EAAJ,OACE0B,EAAEsO,oBAAoBroB,GAClByJ,EACK,CAAChkB,SAAWghB,EAAYie,UAAW3K,GAErCA,EAET,GAAItQ,EAAc,OAAQhD,EAE1B,MAAM,IAAI3oB,MAAM,cACjB,CAEa,cAAPmqC,CAAQtzB,GACb,OAAOwtB,EAAKgB,QAAQxuB,GAAS,EAC9B,CAGDyzB,YAAAA,CAAaz3B,EAAe8Y,EAAoB4O,GAC9C,IAAID,EAAQ,EACZ,IAAK,IAAI8J,EAAI,EAAGA,EAAI7J,EAAY6J,IAAK,CACnC,MAAMvtB,EAAM,KAAK0yB,YAAY5d,EAAayY,GAChCvxB,EAAQ02B,YAAYnF,GACpB9J,EACVA,EAAQzjB,IAAQ,GAChB,KAAK2yB,eAAe7d,EAAayY,EAAS,MAANvtB,EACrC,CACD,OAAOyjB,CACR,CAED+P,YAAAA,CAAax3B,EAAkB8Y,EAAoB4O,GAGjD,IAAID,EAAS,EACb,GAAiB,EAAb3O,EAAgB,CAGlBA,IAAe,EAHG,IAIdyY,EAAU,KAAKgB,QAAQzZ,GACvB0Y,EAAe,MAAVD,EACLtT,EAAI,EACR,KAAOA,EATUyJ,EAAa,IAAO,EASfzJ,IAAK,OACnBja,EAAMhE,EAAWuyB,QAAQtU,GACzByJ,GAAO6J,IAAY,KAAa,MAANvtB,GAAgByjB,EAChDA,EAAwB,EAAdC,IAAQ,GAClB,KAAK+L,WAAW3a,EAAamF,GAAW,MAANyJ,IAAiB,GAAY,MAAL8J,GAC1DD,EAAU,KAAKgB,QAAQzZ,EAAamF,EAAI,GACxCuT,GAAgB,MAAVD,IAAqBvtB,IAAQ,IAAMyjB,EACzCA,EAAuB,EAAb+J,IAAO,EAClB,CAfiB,MAiBZxtB,EAAMhE,EAAWuyB,QAAQtU,GACzBnI,GAAOyb,IAAY,KAAa,MAANvtB,GAAgByjB,EAIhD,GAHAA,EAAwB,EAAd3R,IAAQ,GAClB,KAAK2d,WAAW3a,EAAamF,GAAW,MAANnI,IAAiB,GAAY,MAAL0b,GAEtD1Y,EAAamF,EAAI,GAAK,KAAKvmB,OAC7B,MAAM,IAAIg6B,WAAW,iBAEE,IAAP,EAAbhK,KACH6J,EAAU,KAAKgB,QAAQzZ,EAAamF,EAAI,GACxCuT,GAAgB,MAAVD,IANOvtB,IAAQ,IAMcyjB,EACnCA,EAAuB,EAAb+J,IAAO,GACjB,KAAKiC,WAAW3a,EAAa9Y,EAAWtI,OACzB,WAAV65B,EAA8B,MAALC,GAEjC,KAAM,CACL1Y,IAAe,EACf,IAAIyY,EAAI,EACR,KAAOA,EAAIvxB,EAAWtI,OAAS,EAAG65B,IAAK,OAC/BvtB,EAAU,KAAKuuB,QAAQzZ,EAAayY,GACpC7J,EAAM1nB,EAAWuyB,QAAQhB,GACzBC,GAAgB,MAAVxtB,IAA2B,MAAN0jB,GAAgBD,EACjDA,EAAuB,EAAb+J,IAAO,GACjB,MAAMvT,GAAOja,IAAY,KAAO0jB,IAAQ,IAAMD,EAC9CA,EAAwB,EAAdxJ,IAAQ,GAClB,KAAKwV,WAAW3a,EAAayY,GAAW,MAANtT,IAAiB,GAAY,MAALuT,EAC3D,CAXI,MAYCxtB,EAAU,KAAKuuB,QAAQzZ,EAAayY,GACpCC,EAAMxxB,EAAWuyB,QAAQhB,GACzBtT,GAAgB,MAAVja,IAA2B,MAANwtB,GAAgB/J,EACjDA,EAAuB,EAAbxJ,IAAO,GACjB,IAAInI,EAAM,EACe,IAAP,EAAb4R,KACH5R,GAAO9R,IAAY,KAAOwtB,IAAQ,IAAM/J,EACxCA,EAAwB,EAAd3R,IAAQ,IAEpB,KAAK2d,WAAW3a,EAAayY,GAAW,MAANzb,IAAiB,GAAY,MAALmI,EAC3D,CACD,OAAOwJ,CACR,CAEDiQ,mBAAAA,CAAoB13B,GAClB,GAAc,IAAVA,EAAa,OACjB,IAAI8Y,EAAQ,KAAKyZ,QAAQ,KAAOvyB,EAChC,MAAM0nB,EAAO,KAAKhwB,OAAS,EAC3B,IAAK,IAAI+vB,EAAI,EAAGA,EAAIC,EAAMD,IAAK,CAC7B,MAAMzjB,EAAI,KAAKuuB,QAAQ9K,EAAI,GAC3B,KAAKgM,WAAWhM,EAA0B,WAArBzjB,GAAM,GAAKhE,EAAwB8Y,GACxDA,EAAQ9U,IAAMhE,CACf,CACD,KAAKyzB,WAAW/L,EAAM5O,EACvB,CAEwB,yBAAlBye,CAAmBv3B,EAAS8Y,EAAe4O,GAAzB,MACjB6J,EAAIvxB,EAAEtI,OAEN+vB,EAAS,IAAI+J,EADED,EAAI7J,GACV,GACf,GAAc,IAAV5O,EAAa,CACf,IAAK,IAAIA,EAAI,EAAGA,EAAIyY,EAAGzY,IAAK2O,EAAOgM,WAAW3a,EAAG9Y,EAAEuyB,QAAQzZ,IAE3D,OADe,EAAX4O,GAAcD,EAAOgM,WAAWlC,EAAG,GAChC9J,CACR,CACD,IAAIxJ,EAAQ,EACZ,IAAK,IAAIuT,EAAI,EAAGA,EAAID,EAAGC,IAAK,CAC1B,MAAMxtB,EAAIhE,EAAEuyB,QAAQf,GACpB/J,EAAOgM,WAAWjC,EAAmB,WAAdxtB,GAAK8U,EAAuBmF,GACnDA,EAAQja,IAAO,GAAK8U,CACrB,CAID,OAHe,EAAX4O,GACFD,EAAOgM,WAAWlC,EAAGtT,GAEhBwJ,CACR,CAE2B,4BAArB4M,CAAsBr0B,EAASgE,GACpC,MAAM8U,EAAQ0Y,EAAKmG,gBAAgB3zB,GACnC,GAAY,EAAR8U,EAAW,MAAM,IAAI4Y,WAAW,kBAArB,MACThK,EAA4B,EAAd5O,EAAQ,GACtB2O,EAAY3O,EAAQ,GACpByY,EAASvxB,EAAEtI,OACXumB,EAAqB,IAAdwJ,GACiD,GAAhDznB,EAAEuyB,QAAQhB,EAAS,KAAQ,GAAK9J,EACxC3R,EAAeyb,EAAS7J,GAAczJ,EAAO,EAAI,GACjD1K,EAAS,IAAIie,EAAK1b,EAAc9V,EAAEyuB,MACxC,GAAkB,IAAdhH,EAAiB,CACnB,IAAI3O,EAAI,EACR,KAAOA,EAAI4O,EAAY5O,IAAKvF,EAAOkgB,WAAW3a,EAAG,GACjD,KAAOA,EAAIhD,EAAcgD,IACvBvF,EAAOkgB,WAAW3a,EAAG9Y,EAAEuyB,QAAQzZ,EAAI4O,GAEtC,KAAM,CACL,IAAI5O,EAAQ,EACZ,IAAK,IAAI9Y,EAAI,EAAGA,EAAI0nB,EAAY1nB,IAAKuT,EAAOkgB,WAAWzzB,EAAG,GAC1D,IAAK,IAAIwxB,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAC/B,MAAMxtB,EAAIhE,EAAEuyB,QAAQf,GACpBje,EAAOkgB,WACHjC,EAAI9J,EAAgC,WAAlB1jB,GAAKyjB,EAA2B3O,GACtDA,EAAQ9U,IAAO,GAAKyjB,CACrB,CACD,GAAIxJ,EACF1K,EAAOkgB,WAAWlC,EAAS7J,EAAY5O,QAEvC,GAAc,IAAVA,EAAa,MAAM,IAAI3rB,MAAM,qBAEpC,CACD,OAAOomB,EAAO6f,QACf,CAE4B,6BAAtBgB,CAAuBp0B,EAASgE,GAAV,MACrB8U,EAAS9Y,EAAEtI,OACXgwB,EAAO1nB,EAAEyuB,KACThH,EAAQ+J,EAAKmG,gBAAgB3zB,GACnC,GAAY,EAARyjB,EAAW,OAAO+J,EAAKoG,sBAAsBlQ,GAAlC,MACT6J,EAA4B,EAAd9J,EAAQ,GACtBxJ,EAAYwJ,EAAQ,GAC1B,IAAI3R,EAAegD,EAASyY,EAC5B,GAAoB,GAAhBzb,EAAmB,OAAO0b,EAAKoG,sBAAsBlQ,GAKzD,IAAInU,GAAa,EACjB,GAAImU,EAEF,GAAuC,IAAlC1nB,EAAEuyB,QAAQhB,IADD,GAAKtT,GAAa,GAE9B1K,GAAa,OAEb,IAAK,IAAIuF,EAAI,EAAGA,EAAIyY,EAAYzY,IAC9B,GAAqB,IAAjB9Y,EAAEuyB,QAAQzZ,GAAU,CACtBvF,GAAa,EACb,KACD,CAKP,GAAIA,GAA+B,IAAd0K,EAAiB,OAE9Bja,EAAMhE,EAAEuyB,QAAQzZ,EAAS,GACM,IAAR9U,GACJ8R,GAC1B,CACD,IAAIzG,EAAS,IAAImiB,EAAK1b,EAAc4R,GACpC,GAAkB,IAAdzJ,EAAiB,CAEnB5O,EAAOokB,WAAW3d,EAAe,EAAG,GACpC,IAAK,IAAI4R,EAAI6J,EAAY7J,EAAI5O,EAAQ4O,IACnCrY,EAAOokB,WAAW/L,EAAI6J,EAAYvxB,EAAEuyB,QAAQ7K,GAE/C,KAAM,CACL,IAAIA,EAAQ1nB,EAAEuyB,QAAQhB,KAAgBtT,EACtC,MAAMwJ,EAAO3O,EAASyY,EAAa,EACnC,IAAK,IAAIzY,EAAI,EAAGA,EAAI2O,EAAM3O,IAAK,CAC7B,MAAM9U,EAAIhE,EAAEuyB,QAAQzZ,EAAIyY,EAAa,GACrCliB,EAAOokB,WAAW3a,EAA8B,WAAzB9U,GAAM,GAAKia,EAA4ByJ,GAC9DA,EAAQ1jB,IAAMia,CACf,CACD5O,EAAOokB,WAAWhM,EAAMC,EACzB,CAMD,OALInU,IAGFlE,EAASmiB,EAAK6B,iBAAiBhkB,GAAtB,EAAoCA,IAExCA,EAAO+jB,QACf,CAE2B,4BAArBwE,CAAsB5zB,GAAD,OACtBA,EACKwtB,EAAKM,WAAW,GAAhB,GAEFN,EAAKI,QACb,CAEqB,sBAAf+F,CAAgB3zB,GACrB,GAAe,EAAXA,EAAEtM,OAAY,OAAQ,EAC1B,MAAMsI,EAAQgE,EAAEsuB,gBAAgB,GAAhC,OACItyB,EAAQwxB,EAAK+B,kBAA0B,EACpCvzB,CACR,CAEmB,oBAAbkyB,CAAcluB,EAAUhE,EAAK,WAClC,GAAmB,iBAARgE,EAAkB,OAAOA,EACpC,GAAIA,EAAIpH,cAAgB40B,EAAM,OAAOxtB,EACrC,GAAsB,oBAAXsC,QACyB,iBAAvBA,OAAOuxB,YAA0B,CAC5C,MAAM/e,EAAe9U,EAAIsC,OAAOuxB,aAChC,GAAI/e,EAAc,CAChB,MAAM9U,EAAY8U,EAAa9Y,GAC/B,GAAyB,iBAAdgE,EAAwB,OAAOA,EAC1C,MAAM,IAAIoG,UAAU,2CACrB,CACF,CACD,MAAM0O,EAAU9U,EAAIymB,QACpB,GAAI3R,EAAS,CACX,MAAM9Y,EAAY8Y,EAAQhjB,KAAKkO,GAC/B,GAAyB,iBAAdhE,EAAwB,OAAOA,CAC3C,CACD,MAAM0nB,EAAW1jB,EAAIjP,SACrB,GAAI2yB,EAAU,CACZ,MAAM1nB,EAAY0nB,EAAS5xB,KAAKkO,GAChC,GAAyB,iBAAdhE,EAAwB,OAAOA,CAC3C,CACD,MAAM,IAAIoK,UAAU,2CACrB,CAEiB,kBAAXqrB,CAAYzxB,GAAD,OACZwtB,EAAKkE,WAAW1xB,GAAeA,GAC1BA,CACV,CAEgB,iBAAV0xB,CAAW1xB,GAChB,MAAwB,iBAAVA,GAAgC,OAAVA,GAC7BA,EAAMpH,cAAgB40B,CAC9B,CAEuB,wBAAjB6D,CAAkBrxB,EAAWhE,GAAZ,MAChB8Y,EAAiC,GAAhB9U,EAAI,IAAM,GAC3B0jB,EAAS,IAAI8J,EAAK1Y,EAAc9Y,EAAEyuB,MAClChH,EAAO3O,EAAe,EAC5B,IAAK,IAAIA,EAAI,EAAGA,EAAI2O,EAAM3O,IACxB4O,EAAO+L,WAAW3a,EAAG9Y,EAAEuyB,QAAQzZ,IAEjC,IAAIyY,EAAMvxB,EAAEuyB,QAAQ9K,GACpB,GAAiB,GAAZzjB,EAAI,GAAW,CAClB,MAAMhE,EAAO,GAAMgE,EAAI,GACvButB,EAAOA,GAAOvxB,IAAUA,CACzB,CAED,OADA0nB,EAAO+L,WAAWhM,EAAM8J,GACjB7J,EAAO0L,QACf,CAEoC,qCAA9BkC,CAA+Bt1B,EAAW8Y,EAC7C4O,GADiC,IAAAD,EAOrBvsB,KAAKqX,IAAA,MALbgf,EAAiC,GAAhBvxB,EAAI,IAAM,GAC3Bie,EAAS,IAAIuT,EAAKD,EAAc7J,GACtC,IAAI5R,EAAI,EACR,MAAMvC,EAAOge,EAAe,EAC5B,IAAIliB,EAAS,EAEb,IADA,MAAMrL,EAAQyjB,EAASlU,EAAMuF,EAAEphB,QACxBoe,EAAI9R,EAAO8R,IAAK,CACrB,MAAM9R,EAAI,EAAI8U,EAAEyZ,QAAQzc,GAAKzG,EAC7BA,EAAsB,EAAZrL,IAAM,GAChBia,EAAOwV,WAAW3d,EAAO,WAAJ9R,EACtB,CACD,KAAO8R,EAAIvC,EAAMuC,IACfmI,EAAOwV,WAAW3d,EAA4B,EAAd,YAATzG,GAEzB,IAAIqjB,EAAMnf,EAAOuF,EAAEphB,OAASohB,EAAEyZ,QAAQhf,GAAQ,EAC9C,MAAM6V,EAAkBppB,EAAI,GAC5B,IAAI2yB,EACJ,GAAwB,GAApBvJ,EACFuJ,EAAY,EAAID,EAAMrjB,EACtBsjB,GAAa,eACR,CACL,MAAM3uB,EAAO,GAAKolB,EAClBsJ,EAAOA,GAAO1uB,IAAUA,EACxB,MAAMhE,EAAa,GAAM,GAAKgE,EAC9B2uB,EAAY3yB,EAAa0yB,EAAMrjB,EAC/BsjB,GAAc3yB,EAAa,CAC5B,CAED,OADAie,EAAOwV,WAAWlgB,EAAMof,GACjB1U,EAAOmV,QACf,CAGDb,OAAAA,CAAQvyB,GACN,OAAO,KAAKA,EACb,CACDsyB,eAAAA,CAAgBtyB,GACd,OAAO,KAAKA,KAAO,CACpB,CACDyzB,UAAAA,CAAWzzB,EAAWgE,GACpB,KAAKhE,GAAa,EAARgE,CACX,CACDkzB,cAAAA,CAAel3B,EAAWgE,GACxB,KAAKhE,GAAa,EAARgE,CACX,CACDqzB,iBAAAA,GACE,MAAMrzB,EAAM,KAAKtM,OAAjB,OACqC,OAAjC,KAAK46B,gBAAgBtuB,EAAM,GAA2B,EAANA,EAAU,EACnD,EAAJA,CACR,CACD0yB,WAAAA,CAAY12B,GACV,OAA4C,MAApC,KAAKA,IAAM,KAAkB,IAAL,EAAJA,EAC7B,CACD22B,cAAAA,CAAe32B,EAAWgE,GAAZ,MACN8U,EAAa9Y,IAAM,EACnB0nB,EAAW,KAAK6K,QAAQzZ,GACxB2O,EAAe,EAAJznB,EAAqB,MAAX0nB,EAAsB1jB,GAAS,GACpB,WAAX0jB,EAAkC,MAAR1jB,EACrD,KAAKyvB,WAAW3a,EAAY2O,EAC7B,CAEgB,iBAAVqQ,CAAW9zB,EAAchE,GAC9B,IAAI8Y,EAAS,EAAb,KACkB,EAAX9Y,GACU,EAAXA,IAAc8Y,GAAU9U,GAC5BhE,KAAc,EACdgE,GAAQA,EAEV,OAAO8U,CACR,CAsCqB,sBAAf+Y,CAAgB7tB,GACrB,OAAY,WAAJA,KAAoBA,CAC7B,SAtCMwtB,EAAAC,aAAA,SACAD,EAAA+B,iBAAmB/B,EAAKC,cAAgB,EAQxCD,EAAA2E,kBAAoB,CACzB,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC9B,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,KAGV3E,EAAA6E,yBAA2B,EAC3B7E,EAAA4E,8BAAgC,GAAK5E,EAAK6E,yBAC1C7E,EAAAiF,mBAAA,kJACAjF,EAAAuG,uBAAyB,IAAIC,YAAY,GACzCxG,EAAAuB,uBAAyB,IAAIkF,aAAazG,EAAKuG,wBAC/CvG,EAAAsB,qBAAuB,IAAIoF,WAAW1G,EAAKuG,wBAK3CvG,EAAAgB,QAAUxyB,EAAa,SAASgE,GACrC,OAAOhE,EAAWgE,GAAK,CACxB,EAAG,SAASA,GAAT,IAAAhE,EAE+B9E,KAAKi9B,IAAArf,EAAzB5d,KAAKoJ,IAAA,OADR,IAANN,EAAgB,GAC6B,EAA1C,IAAqC,EAA/B8U,EAAS9U,IAAM,GAAfhE,EACd,EACMwxB,EAAA2F,OAASnzB,GAAa,SAASA,EAAWhE,GAC/C,OAAiB,EAATgE,EAAIhE,CACb,EAAAwxB,CAAA,G,mBCn3DH,SAAS/+B,EAASo5B,GAChB,aAyLA,OAvIAA,EAAKn4B,UAAUjB,SAAW,SAAkBu1B,EAAIC,EAAImQ,GAElD,IAAK3rC,KAAKi7B,GAAgB,IAAXj7B,KAAKi7B,EAAS,OAAOj7B,KAAKsI,WAEzC,IAAI27B,EAAK2H,EAAIC,EAAIt0B,EACf0uB,EACA6F,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAAOxsC,KAAK8H,QAAU,CAAC,EACvB2kC,EAAOzsC,KAAKmQ,YAAYrI,QAAU,CAAC,EAyCrC,GAvCIyzB,GAAM0K,EACS,iBAAN1K,GACToQ,EAAMpQ,EACNA,EAAK0K,GACIzK,GAAMyK,EACE,iBAANzK,GACTmQ,EAAMnQ,EACNA,EAAKyK,GACkB,iBAAP0F,IAChBA,EAAM,CAAC,GAGTA,EAAM,CAAC,EAGTA,EAAM,CAAC,EAGT1H,EAAMjkC,KAAK0I,QAAQ6yB,EAAIC,GAAIzoB,MAAM,KACjCi5B,EAAO/H,EAAI,GACXgI,EAAQhI,EAAI,GACZ8H,EAAO/rC,KAAKwxB,EAAI,EAAIwa,EAAK33B,MAAM,GAAK23B,EACpCF,EAAKC,EAAK9gC,OAEVihC,EAAOP,EAAIe,iBACPR,GAAQjG,IACViG,EAAOM,EAAKE,iBACRR,GAAQjG,IACViG,EAAOO,EAAKC,iBACRR,GAAQjG,IAAGiG,EAAO,OAI1BC,EAAOR,EAAI3jC,eACPmkC,GAAQlG,IACVkG,EAAOK,EAAKxkC,eACRmkC,GAAQlG,IAAGkG,EAAOM,EAAKzkC,iBAGzBmkC,IACFC,EAAQT,EAAIgB,UACRP,GAASnG,IACXmG,EAAQI,EAAKG,UACTP,GAASnG,IACXmG,EAAQK,EAAKE,UACTP,GAASnG,IAAGmG,EAAQ,KAI5BC,EAASV,EAAIiB,mBACTP,GAAUpG,IACZoG,EAASG,EAAKI,mBACVP,GAAUpG,IACZoG,EAASI,EAAKG,mBACVP,GAAUpG,IAAGoG,EAAS,KAI1BA,GACFT,GAAMS,EACNR,GAAMO,EACNN,GAAMD,IAEND,GAAMQ,EACNP,GAAMQ,GAGJT,EAAK,GAAKE,EAAK,GAAG,CAGpB,IAFAv0B,EAAIu0B,EAAKF,GAAMA,EACfI,EAAOD,EAAKc,OAAO,EAAGt1B,GACfA,EAAIu0B,EAAIv0B,GAAKq0B,EAAII,GAAQG,EAAOJ,EAAKc,OAAOt1B,EAAGq0B,GAClDC,EAAK,IAAGG,GAAQG,EAAOJ,EAAK13B,MAAMkD,IAClCvX,KAAKwxB,EAAI,IAAGwa,EAAO,IAAMA,EAC/B,CAGF,OAAIC,GACFK,EAAQX,EAAImB,uBACRR,GAASrG,IACXqG,EAAQE,EAAKM,uBACTR,GAASrG,IAAGqG,EAAQG,EAAKK,yBAG3BR,IACFC,EAASZ,EAAIoB,kBACTR,GAAUtG,IACZsG,EAASC,EAAKO,kBACVR,GAAUtG,IACZsG,EAASE,EAAKM,kBACVR,GAAUtG,IAAGsG,EAAS,KAI9BA,GAAUA,EAENA,IACFN,EAAQA,EAAM7Q,QAAQ,IAAI/iB,OAAO,OAASk0B,EAAS,OAAQ,KAAM,KAAOD,KAIrEN,EAAOE,EAAOD,GAGdD,CAEX,EAEA5M,EAAKt3B,OAAS,CACZ4kC,iBAAkB,IAClB1kC,eAAgB,IAChB2kC,UAAW,EACXC,mBAAoB,EACpBE,uBAAwB,GACxBC,kBAAmB,GAGd3N,CACT,CAEqCve,EAAOtH,UAASsH,EAAOtH,QAAUvT,E","sources":["webpack://interest/./src/views/uni.vue","webpack://interest/./node_modules/tiny-invariant/dist/esm/tiny-invariant.js","webpack://interest/../src/chains.ts","webpack://interest/../src/addresses.ts","webpack://interest/../src/constants.ts","webpack://interest/../src/entities/fractions/fraction.ts","webpack://interest/../src/entities/fractions/currencyAmount.ts","webpack://interest/../src/entities/fractions/percent.ts","webpack://interest/../src/entities/fractions/price.ts","webpack://interest/../src/entities/baseCurrency.ts","webpack://interest/../src/entities/nativeCurrency.ts","webpack://interest/../src/utils/validateAndParseAddress.ts","webpack://interest/../src/entities/token.ts","webpack://interest/../src/entities/weth9.ts","webpack://interest/../src/entities/ether.ts","webpack://interest/../src/utils/computePriceImpact.ts","webpack://interest/../src/utils/sortedInsert.ts","webpack://interest/../src/utils/sqrt.ts","webpack://interest/../src.ts/id.ts","webpack://interest/../src.ts/interface.ts","webpack://interest/../src.ts/_version.ts","webpack://interest/../src.ts/index.ts","webpack://interest/../node_modules/regenerator-runtime/runtime.js","webpack://interest/../src/internalConstants.ts","webpack://interest/../src/utils/computePoolAddress.ts","webpack://interest/../src/utils/liquidityMath.ts","webpack://interest/../src/utils/fullMath.ts","webpack://interest/../src/utils/sqrtPriceMath.ts","webpack://interest/../src/utils/swapMath.ts","webpack://interest/../src/utils/mostSignificantBit.ts","webpack://interest/../src/utils/tickMath.ts","webpack://interest/../src/entities/tickDataProvider.ts","webpack://interest/../src/utils/isSorted.ts","webpack://interest/../src/utils/tickList.ts","webpack://interest/../src/utils/calldata.ts","webpack://interest/../src/utils/encodeRouteToPath.ts","webpack://interest/../src/utils/encodeSqrtRatioX96.ts","webpack://interest/../src/utils/maxLiquidityForAmounts.ts","webpack://interest/../src/utils/priceTickConversions.ts","webpack://interest/../src/utils/tickLibrary.ts","webpack://interest/../src/entities/tick.ts","webpack://interest/../src/entities/tickListDataProvider.ts","webpack://interest/../src/entities/pool.ts","webpack://interest/../src/entities/position.ts","webpack://interest/../src/entities/trade.ts","webpack://interest/../src/multicall.ts","webpack://interest/../src/selfPermit.ts","webpack://interest/../src/payments.ts","webpack://interest/../src/nonfungiblePositionManager.ts","webpack://interest/../src/quoter.ts","webpack://interest/../src/staker.ts","webpack://interest/../src/swapRouter.ts","webpack://interest/src/views/uni.vue","webpack://interest/./src/views/uni.vue?b8b4","webpack://interest/./src/views/uni.vue?e970","webpack://interest/./node_modules/big.js/big.js","webpack://interest/./node_modules/decimal.js-light/decimal.js","webpack://interest/../lib/jsbi.ts","webpack://interest/./node_modules/toformat/toFormat.js"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div')\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var provided = typeof message === 'function' ? message() : message;\n    var value = provided ? \"\".concat(prefix, \": \").concat(provided) : prefix;\n    throw new Error(value);\n}\n\nexport { invariant as default };\n","export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI\n] as const\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX'\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  v1MixedRouteQuoterAddress?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = constructSameAddressMap(V2_FACTORY_ADDRESS)\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = constructSameAddressMap(V2_ROUTER_ADDRESS)\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E'\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e'\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573'\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2'\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e'\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8'\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07'\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE'\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481'\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d'\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {})\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {})\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6'\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3'\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e'\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8'\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {})\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e')\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd'\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress\n  if (v1MixedRouteQuoterAddress) {\n    memo[chainId] = v1MixedRouteQuoterAddress\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (chainId == ChainId.BNB) {\n    return CHAIN_TO_ADDRESSES_MAP[chainId].swapRouter02Address\n  }\n  return '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n",null,null,null,null,"/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import JSBI from 'jsbi'\n\n// constants used internally but not expected to be used externally\nexport const NEGATIVE_ONE = JSBI.BigInt(-1)\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\n\n// used in liquidity amount math\nexport const Q96 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(96))\nexport const Q192 = JSBI.exponentiate(Q96, JSBI.BigInt(2))\n","import { defaultAbiCoder } from '@ethersproject/abi'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { keccak256 } from '@ethersproject/solidity'\nimport { Token } from '@uniswap/sdk-core'\nimport { FeeAmount, POOL_INIT_CODE_HASH } from '../constants'\n\n/**\n * Computes a pool address\n * @param factoryAddress The Uniswap V3 factory address\n * @param tokenA The first token of the pair, irrespective of sort order\n * @param tokenB The second token of the pair, irrespective of sort order\n * @param fee The fee tier of the pool\n * @param initCodeHashManualOverride Override the init code hash used to compute the pool address if necessary\n * @returns The pool address\n */\nexport function computePoolAddress({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  fee,\n  initCodeHashManualOverride\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n  fee: FeeAmount\n  initCodeHashManualOverride?: string\n}): string {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(\n      ['bytes'],\n      [defaultAbiCoder.encode(['address', 'address', 'uint24'], [token0.address, token1.address, fee])]\n    ),\n    initCodeHashManualOverride ?? POOL_INIT_CODE_HASH\n  )\n}\n","import JSBI from 'jsbi'\nimport { NEGATIVE_ONE, ZERO } from '../internalConstants'\n\nexport abstract class LiquidityMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static addDelta(x: JSBI, y: JSBI): JSBI {\n    if (JSBI.lessThan(y, ZERO)) {\n      return JSBI.subtract(x, JSBI.multiply(y, NEGATIVE_ONE))\n    } else {\n      return JSBI.add(x, y)\n    }\n  }\n}\n","import JSBI from 'jsbi'\nimport { ONE, ZERO } from '../internalConstants'\n\nexport abstract class FullMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static mulDivRoundingUp(a: JSBI, b: JSBI, denominator: JSBI): JSBI {\n    const product = JSBI.multiply(a, b)\n    let result = JSBI.divide(product, denominator)\n    if (JSBI.notEqual(JSBI.remainder(product, denominator), ZERO)) result = JSBI.add(result, ONE)\n    return result\n  }\n}\n","import { MaxUint256 } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO, Q96 } from '../internalConstants'\nimport { FullMath } from './fullMath'\n\nconst MaxUint160 = JSBI.subtract(JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(160)), ONE)\n\nfunction multiplyIn256(x: JSBI, y: JSBI): JSBI {\n  const product = JSBI.multiply(x, y)\n  return JSBI.bitwiseAnd(product, MaxUint256)\n}\n\nfunction addIn256(x: JSBI, y: JSBI): JSBI {\n  const sum = JSBI.add(x, y)\n  return JSBI.bitwiseAnd(sum, MaxUint256)\n}\n\nexport abstract class SqrtPriceMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static getAmount0Delta(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, liquidity: JSBI, roundUp: boolean): JSBI {\n    if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n      ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n    }\n\n    const numerator1 = JSBI.leftShift(liquidity, JSBI.BigInt(96))\n    const numerator2 = JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96)\n\n    return roundUp\n      ? FullMath.mulDivRoundingUp(FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96), ONE, sqrtRatioAX96)\n      : JSBI.divide(JSBI.divide(JSBI.multiply(numerator1, numerator2), sqrtRatioBX96), sqrtRatioAX96)\n  }\n\n  public static getAmount1Delta(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, liquidity: JSBI, roundUp: boolean): JSBI {\n    if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n      ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n    }\n\n    return roundUp\n      ? FullMath.mulDivRoundingUp(liquidity, JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96), Q96)\n      : JSBI.divide(JSBI.multiply(liquidity, JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96)), Q96)\n  }\n\n  public static getNextSqrtPriceFromInput(sqrtPX96: JSBI, liquidity: JSBI, amountIn: JSBI, zeroForOne: boolean): JSBI {\n    invariant(JSBI.greaterThan(sqrtPX96, ZERO))\n    invariant(JSBI.greaterThan(liquidity, ZERO))\n\n    return zeroForOne\n      ? this.getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\n      : this.getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true)\n  }\n\n  public static getNextSqrtPriceFromOutput(\n    sqrtPX96: JSBI,\n    liquidity: JSBI,\n    amountOut: JSBI,\n    zeroForOne: boolean\n  ): JSBI {\n    invariant(JSBI.greaterThan(sqrtPX96, ZERO))\n    invariant(JSBI.greaterThan(liquidity, ZERO))\n\n    return zeroForOne\n      ? this.getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\n      : this.getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false)\n  }\n\n  private static getNextSqrtPriceFromAmount0RoundingUp(\n    sqrtPX96: JSBI,\n    liquidity: JSBI,\n    amount: JSBI,\n    add: boolean\n  ): JSBI {\n    if (JSBI.equal(amount, ZERO)) return sqrtPX96\n    const numerator1 = JSBI.leftShift(liquidity, JSBI.BigInt(96))\n\n    if (add) {\n      let product = multiplyIn256(amount, sqrtPX96)\n      if (JSBI.equal(JSBI.divide(product, amount), sqrtPX96)) {\n        const denominator = addIn256(numerator1, product)\n        if (JSBI.greaterThanOrEqual(denominator, numerator1)) {\n          return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator)\n        }\n      }\n\n      return FullMath.mulDivRoundingUp(numerator1, ONE, JSBI.add(JSBI.divide(numerator1, sqrtPX96), amount))\n    } else {\n      let product = multiplyIn256(amount, sqrtPX96)\n\n      invariant(JSBI.equal(JSBI.divide(product, amount), sqrtPX96))\n      invariant(JSBI.greaterThan(numerator1, product))\n      const denominator = JSBI.subtract(numerator1, product)\n      return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator)\n    }\n  }\n\n  private static getNextSqrtPriceFromAmount1RoundingDown(\n    sqrtPX96: JSBI,\n    liquidity: JSBI,\n    amount: JSBI,\n    add: boolean\n  ): JSBI {\n    if (add) {\n      const quotient = JSBI.lessThanOrEqual(amount, MaxUint160)\n        ? JSBI.divide(JSBI.leftShift(amount, JSBI.BigInt(96)), liquidity)\n        : JSBI.divide(JSBI.multiply(amount, Q96), liquidity)\n\n      return JSBI.add(sqrtPX96, quotient)\n    } else {\n      const quotient = FullMath.mulDivRoundingUp(amount, Q96, liquidity)\n\n      invariant(JSBI.greaterThan(sqrtPX96, quotient))\n      return JSBI.subtract(sqrtPX96, quotient)\n    }\n  }\n}\n","import JSBI from 'jsbi'\nimport { FeeAmount } from '../constants'\nimport { NEGATIVE_ONE, ZERO } from '../internalConstants'\nimport { FullMath } from './fullMath'\nimport { SqrtPriceMath } from './sqrtPriceMath'\n\nconst MAX_FEE = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(6))\n\nexport abstract class SwapMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static computeSwapStep(\n    sqrtRatioCurrentX96: JSBI,\n    sqrtRatioTargetX96: JSBI,\n    liquidity: JSBI,\n    amountRemaining: JSBI,\n    feePips: FeeAmount\n  ): [JSBI, JSBI, JSBI, JSBI] {\n    const returnValues: Partial<{\n      sqrtRatioNextX96: JSBI\n      amountIn: JSBI\n      amountOut: JSBI\n      feeAmount: JSBI\n    }> = {}\n\n    const zeroForOne = JSBI.greaterThanOrEqual(sqrtRatioCurrentX96, sqrtRatioTargetX96)\n    const exactIn = JSBI.greaterThanOrEqual(amountRemaining, ZERO)\n\n    if (exactIn) {\n      const amountRemainingLessFee = JSBI.divide(\n        JSBI.multiply(amountRemaining, JSBI.subtract(MAX_FEE, JSBI.BigInt(feePips))),\n        MAX_FEE\n      )\n      returnValues.amountIn = zeroForOne\n        ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\n        : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true)\n      if (JSBI.greaterThanOrEqual(amountRemainingLessFee, returnValues.amountIn!)) {\n        returnValues.sqrtRatioNextX96 = sqrtRatioTargetX96\n      } else {\n        returnValues.sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\n          sqrtRatioCurrentX96,\n          liquidity,\n          amountRemainingLessFee,\n          zeroForOne\n        )\n      }\n    } else {\n      returnValues.amountOut = zeroForOne\n        ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\n        : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false)\n      if (JSBI.greaterThanOrEqual(JSBI.multiply(amountRemaining, NEGATIVE_ONE), returnValues.amountOut)) {\n        returnValues.sqrtRatioNextX96 = sqrtRatioTargetX96\n      } else {\n        returnValues.sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\n          sqrtRatioCurrentX96,\n          liquidity,\n          JSBI.multiply(amountRemaining, NEGATIVE_ONE),\n          zeroForOne\n        )\n      }\n    }\n\n    const max = JSBI.equal(sqrtRatioTargetX96, returnValues.sqrtRatioNextX96)\n\n    if (zeroForOne) {\n      returnValues.amountIn =\n        max && exactIn\n          ? returnValues.amountIn\n          : SqrtPriceMath.getAmount0Delta(returnValues.sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true)\n      returnValues.amountOut =\n        max && !exactIn\n          ? returnValues.amountOut\n          : SqrtPriceMath.getAmount1Delta(returnValues.sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false)\n    } else {\n      returnValues.amountIn =\n        max && exactIn\n          ? returnValues.amountIn\n          : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, returnValues.sqrtRatioNextX96, liquidity, true)\n      returnValues.amountOut =\n        max && !exactIn\n          ? returnValues.amountOut\n          : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, returnValues.sqrtRatioNextX96, liquidity, false)\n    }\n\n    if (!exactIn && JSBI.greaterThan(returnValues.amountOut!, JSBI.multiply(amountRemaining, NEGATIVE_ONE))) {\n      returnValues.amountOut = JSBI.multiply(amountRemaining, NEGATIVE_ONE)\n    }\n\n    if (exactIn && JSBI.notEqual(returnValues.sqrtRatioNextX96, sqrtRatioTargetX96)) {\n      // we didn't reach the target, so take the remainder of the maximum input as fee\n      returnValues.feeAmount = JSBI.subtract(amountRemaining, returnValues.amountIn!)\n    } else {\n      returnValues.feeAmount = FullMath.mulDivRoundingUp(\n        returnValues.amountIn!,\n        JSBI.BigInt(feePips),\n        JSBI.subtract(MAX_FEE, JSBI.BigInt(feePips))\n      )\n    }\n\n    return [returnValues.sqrtRatioNextX96!, returnValues.amountIn!, returnValues.amountOut!, returnValues.feeAmount!]\n  }\n}\n","import { MaxUint256 } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ZERO } from '../internalConstants'\n\nconst TWO = JSBI.BigInt(2)\nconst POWERS_OF_2 = [128, 64, 32, 16, 8, 4, 2, 1].map((pow: number): [number, JSBI] => [\n  pow,\n  JSBI.exponentiate(TWO, JSBI.BigInt(pow))\n])\n\nexport function mostSignificantBit(x: JSBI): number {\n  invariant(JSBI.greaterThan(x, ZERO), 'ZERO')\n  invariant(JSBI.lessThanOrEqual(x, MaxUint256), 'MAX')\n\n  let msb: number = 0\n  for (const [power, min] of POWERS_OF_2) {\n    if (JSBI.greaterThanOrEqual(x, min)) {\n      x = JSBI.signedRightShift(x, JSBI.BigInt(power))\n      msb += power\n    }\n  }\n  return msb\n}\n","import { MaxUint256 } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../internalConstants'\nimport { mostSignificantBit } from './mostSignificantBit'\n\nfunction mulShift(val: JSBI, mulBy: string): JSBI {\n  return JSBI.signedRightShift(JSBI.multiply(val, JSBI.BigInt(mulBy)), JSBI.BigInt(128))\n}\n\nconst Q32 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(32))\n\nexport abstract class TickMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * The minimum tick that can be used on any pool.\n   */\n  public static MIN_TICK: number = -887272\n  /**\n   * The maximum tick that can be used on any pool.\n   */\n  public static MAX_TICK: number = -TickMath.MIN_TICK\n\n  /**\n   * The sqrt ratio corresponding to the minimum tick that could be used on any pool.\n   */\n  public static MIN_SQRT_RATIO: JSBI = JSBI.BigInt('4295128739')\n  /**\n   * The sqrt ratio corresponding to the maximum tick that could be used on any pool.\n   */\n  public static MAX_SQRT_RATIO: JSBI = JSBI.BigInt('1461446703485210103287273052203988822378723970342')\n\n  /**\n   * Returns the sqrt ratio as a Q64.96 for the given tick. The sqrt ratio is computed as sqrt(1.0001)^tick\n   * @param tick the tick for which to compute the sqrt ratio\n   */\n  public static getSqrtRatioAtTick(tick: number): JSBI {\n    invariant(tick >= TickMath.MIN_TICK && tick <= TickMath.MAX_TICK && Number.isInteger(tick), 'TICK')\n    const absTick: number = tick < 0 ? tick * -1 : tick\n\n    let ratio: JSBI =\n      (absTick & 0x1) != 0\n        ? JSBI.BigInt('0xfffcb933bd6fad37aa2d162d1a594001')\n        : JSBI.BigInt('0x100000000000000000000000000000000')\n    if ((absTick & 0x2) != 0) ratio = mulShift(ratio, '0xfff97272373d413259a46990580e213a')\n    if ((absTick & 0x4) != 0) ratio = mulShift(ratio, '0xfff2e50f5f656932ef12357cf3c7fdcc')\n    if ((absTick & 0x8) != 0) ratio = mulShift(ratio, '0xffe5caca7e10e4e61c3624eaa0941cd0')\n    if ((absTick & 0x10) != 0) ratio = mulShift(ratio, '0xffcb9843d60f6159c9db58835c926644')\n    if ((absTick & 0x20) != 0) ratio = mulShift(ratio, '0xff973b41fa98c081472e6896dfb254c0')\n    if ((absTick & 0x40) != 0) ratio = mulShift(ratio, '0xff2ea16466c96a3843ec78b326b52861')\n    if ((absTick & 0x80) != 0) ratio = mulShift(ratio, '0xfe5dee046a99a2a811c461f1969c3053')\n    if ((absTick & 0x100) != 0) ratio = mulShift(ratio, '0xfcbe86c7900a88aedcffc83b479aa3a4')\n    if ((absTick & 0x200) != 0) ratio = mulShift(ratio, '0xf987a7253ac413176f2b074cf7815e54')\n    if ((absTick & 0x400) != 0) ratio = mulShift(ratio, '0xf3392b0822b70005940c7a398e4b70f3')\n    if ((absTick & 0x800) != 0) ratio = mulShift(ratio, '0xe7159475a2c29b7443b29c7fa6e889d9')\n    if ((absTick & 0x1000) != 0) ratio = mulShift(ratio, '0xd097f3bdfd2022b8845ad8f792aa5825')\n    if ((absTick & 0x2000) != 0) ratio = mulShift(ratio, '0xa9f746462d870fdf8a65dc1f90e061e5')\n    if ((absTick & 0x4000) != 0) ratio = mulShift(ratio, '0x70d869a156d2a1b890bb3df62baf32f7')\n    if ((absTick & 0x8000) != 0) ratio = mulShift(ratio, '0x31be135f97d08fd981231505542fcfa6')\n    if ((absTick & 0x10000) != 0) ratio = mulShift(ratio, '0x9aa508b5b7a84e1c677de54f3e99bc9')\n    if ((absTick & 0x20000) != 0) ratio = mulShift(ratio, '0x5d6af8dedb81196699c329225ee604')\n    if ((absTick & 0x40000) != 0) ratio = mulShift(ratio, '0x2216e584f5fa1ea926041bedfe98')\n    if ((absTick & 0x80000) != 0) ratio = mulShift(ratio, '0x48a170391f7dc42444e8fa2')\n\n    if (tick > 0) ratio = JSBI.divide(MaxUint256, ratio)\n\n    // back to Q96\n    return JSBI.greaterThan(JSBI.remainder(ratio, Q32), ZERO)\n      ? JSBI.add(JSBI.divide(ratio, Q32), ONE)\n      : JSBI.divide(ratio, Q32)\n  }\n\n  /**\n   * Returns the tick corresponding to a given sqrt ratio, s.t. #getSqrtRatioAtTick(tick) <= sqrtRatioX96\n   * and #getSqrtRatioAtTick(tick + 1) > sqrtRatioX96\n   * @param sqrtRatioX96 the sqrt ratio as a Q64.96 for which to compute the tick\n   */\n  public static getTickAtSqrtRatio(sqrtRatioX96: JSBI): number {\n    invariant(\n      JSBI.greaterThanOrEqual(sqrtRatioX96, TickMath.MIN_SQRT_RATIO) &&\n        JSBI.lessThan(sqrtRatioX96, TickMath.MAX_SQRT_RATIO),\n      'SQRT_RATIO'\n    )\n\n    const sqrtRatioX128 = JSBI.leftShift(sqrtRatioX96, JSBI.BigInt(32))\n\n    const msb = mostSignificantBit(sqrtRatioX128)\n\n    let r: JSBI\n    if (JSBI.greaterThanOrEqual(JSBI.BigInt(msb), JSBI.BigInt(128))) {\n      r = JSBI.signedRightShift(sqrtRatioX128, JSBI.BigInt(msb - 127))\n    } else {\n      r = JSBI.leftShift(sqrtRatioX128, JSBI.BigInt(127 - msb))\n    }\n\n    let log_2: JSBI = JSBI.leftShift(JSBI.subtract(JSBI.BigInt(msb), JSBI.BigInt(128)), JSBI.BigInt(64))\n\n    for (let i = 0; i < 14; i++) {\n      r = JSBI.signedRightShift(JSBI.multiply(r, r), JSBI.BigInt(127))\n      const f = JSBI.signedRightShift(r, JSBI.BigInt(128))\n      log_2 = JSBI.bitwiseOr(log_2, JSBI.leftShift(f, JSBI.BigInt(63 - i)))\n      r = JSBI.signedRightShift(r, f)\n    }\n\n    const log_sqrt10001 = JSBI.multiply(log_2, JSBI.BigInt('255738958999603826347141'))\n\n    const tickLow = JSBI.toNumber(\n      JSBI.signedRightShift(\n        JSBI.subtract(log_sqrt10001, JSBI.BigInt('3402992956809132418596140100660247210')),\n        JSBI.BigInt(128)\n      )\n    )\n    const tickHigh = JSBI.toNumber(\n      JSBI.signedRightShift(\n        JSBI.add(log_sqrt10001, JSBI.BigInt('291339464771989622907027621153398088495')),\n        JSBI.BigInt(128)\n      )\n    )\n\n    return tickLow === tickHigh\n      ? tickLow\n      : JSBI.lessThanOrEqual(TickMath.getSqrtRatioAtTick(tickHigh), sqrtRatioX96)\n      ? tickHigh\n      : tickLow\n  }\n}\n","import { BigintIsh } from '@uniswap/sdk-core'\n\n/**\n * Provides information about ticks\n */\nexport interface TickDataProvider {\n  /**\n   * Return information corresponding to a specific tick\n   * @param tick the tick to load\n   */\n  getTick(tick: number): Promise<{ liquidityNet: BigintIsh }>\n\n  /**\n   * Return the next tick that is initialized within a single word\n   * @param tick The current tick\n   * @param lte Whether the next tick should be lte the current tick\n   * @param tickSpacing The tick spacing of the pool\n   */\n  nextInitializedTickWithinOneWord(tick: number, lte: boolean, tickSpacing: number): Promise<[number, boolean]>\n}\n\n/**\n * This tick data provider does not know how to fetch any tick data. It throws whenever it is required. Useful if you\n * do not need to load tick data for your use case.\n */\nexport class NoTickDataProvider implements TickDataProvider {\n  private static ERROR_MESSAGE = 'No tick data provider was given'\n  async getTick(_tick: number): Promise<{ liquidityNet: BigintIsh }> {\n    throw new Error(NoTickDataProvider.ERROR_MESSAGE)\n  }\n\n  async nextInitializedTickWithinOneWord(\n    _tick: number,\n    _lte: boolean,\n    _tickSpacing: number\n  ): Promise<[number, boolean]> {\n    throw new Error(NoTickDataProvider.ERROR_MESSAGE)\n  }\n}\n","/**\n * Determines if a tick list is sorted\n * @param list The tick list\n * @param comparator The comparator\n * @returns true if sorted\n */\nexport function isSorted<T>(list: Array<T>, comparator: (a: T, b: T) => number): boolean {\n  for (let i = 0; i < list.length - 1; i++) {\n    if (comparator(list[i], list[i + 1]) > 0) {\n      return false\n    }\n  }\n  return true\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { Tick } from '../entities/tick'\nimport { ZERO } from '../internalConstants'\nimport { isSorted } from './isSorted'\n\nfunction tickComparator(a: Tick, b: Tick) {\n  return a.index - b.index\n}\n\n/**\n * Utility methods for interacting with sorted lists of ticks\n */\nexport abstract class TickList {\n  /**\n   * Cannot be constructed\n   */\n  private constructor() {}\n\n  public static validateList(ticks: Tick[], tickSpacing: number) {\n    invariant(tickSpacing > 0, 'TICK_SPACING_NONZERO')\n    // ensure ticks are spaced appropriately\n    invariant(\n      ticks.every(({ index }) => index % tickSpacing === 0),\n      'TICK_SPACING'\n    )\n\n    // ensure tick liquidity deltas sum to 0\n    invariant(\n      JSBI.equal(\n        ticks.reduce((accumulator, { liquidityNet }) => JSBI.add(accumulator, liquidityNet), ZERO),\n        ZERO\n      ),\n      'ZERO_NET'\n    )\n\n    invariant(isSorted(ticks, tickComparator), 'SORTED')\n  }\n\n  public static isBelowSmallest(ticks: readonly Tick[], tick: number): boolean {\n    invariant(ticks.length > 0, 'LENGTH')\n    return tick < ticks[0].index\n  }\n\n  public static isAtOrAboveLargest(ticks: readonly Tick[], tick: number): boolean {\n    invariant(ticks.length > 0, 'LENGTH')\n    return tick >= ticks[ticks.length - 1].index\n  }\n\n  public static getTick(ticks: readonly Tick[], index: number): Tick {\n    const tick = ticks[this.binarySearch(ticks, index)]\n    invariant(tick.index === index, 'NOT_CONTAINED')\n    return tick\n  }\n\n  /**\n   * Finds the largest tick in the list of ticks that is less than or equal to tick\n   * @param ticks list of ticks\n   * @param tick tick to find the largest tick that is less than or equal to tick\n   * @private\n   */\n  private static binarySearch(ticks: readonly Tick[], tick: number): number {\n    invariant(!this.isBelowSmallest(ticks, tick), 'BELOW_SMALLEST')\n\n    let l = 0\n    let r = ticks.length - 1\n    let i\n    while (true) {\n      i = Math.floor((l + r) / 2)\n\n      if (ticks[i].index <= tick && (i === ticks.length - 1 || ticks[i + 1].index > tick)) {\n        return i\n      }\n\n      if (ticks[i].index < tick) {\n        l = i + 1\n      } else {\n        r = i - 1\n      }\n    }\n  }\n\n  public static nextInitializedTick(ticks: readonly Tick[], tick: number, lte: boolean): Tick {\n    if (lte) {\n      invariant(!TickList.isBelowSmallest(ticks, tick), 'BELOW_SMALLEST')\n      if (TickList.isAtOrAboveLargest(ticks, tick)) {\n        return ticks[ticks.length - 1]\n      }\n      const index = this.binarySearch(ticks, tick)\n      return ticks[index]\n    } else {\n      invariant(!this.isAtOrAboveLargest(ticks, tick), 'AT_OR_ABOVE_LARGEST')\n      if (this.isBelowSmallest(ticks, tick)) {\n        return ticks[0]\n      }\n      const index = this.binarySearch(ticks, tick)\n      return ticks[index + 1]\n    }\n  }\n\n  public static nextInitializedTickWithinOneWord(\n    ticks: readonly Tick[],\n    tick: number,\n    lte: boolean,\n    tickSpacing: number\n  ): [number, boolean] {\n    const compressed = Math.floor(tick / tickSpacing) // matches rounding in the code\n\n    if (lte) {\n      const wordPos = compressed >> 8\n      const minimum = (wordPos << 8) * tickSpacing\n\n      if (TickList.isBelowSmallest(ticks, tick)) {\n        return [minimum, false]\n      }\n\n      const index = TickList.nextInitializedTick(ticks, tick, lte).index\n      const nextInitializedTick = Math.max(minimum, index)\n      return [nextInitializedTick, nextInitializedTick === index]\n    } else {\n      const wordPos = (compressed + 1) >> 8\n      const maximum = (((wordPos + 1) << 8) - 1) * tickSpacing\n\n      if (this.isAtOrAboveLargest(ticks, tick)) {\n        return [maximum, false]\n      }\n\n      const index = this.nextInitializedTick(ticks, tick, lte).index\n      const nextInitializedTick = Math.min(maximum, index)\n      return [nextInitializedTick, nextInitializedTick === index]\n    }\n  }\n}\n","import { BigintIsh } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\n/**\n * Generated method parameters for executing a call.\n */\nexport interface MethodParameters {\n  /**\n   * The hex encoded calldata to perform the given operation\n   */\n  calldata: string\n  /**\n   * The amount of ether (wei) to send in hex.\n   */\n  value: string\n}\n\n/**\n * Converts a big int to a hex string\n * @param bigintIsh\n * @returns The hex encoded calldata\n */\nexport function toHex(bigintIsh: BigintIsh) {\n  const bigInt = JSBI.BigInt(bigintIsh)\n  let hex = bigInt.toString(16)\n  if (hex.length % 2 !== 0) {\n    hex = `0${hex}`\n  }\n  return `0x${hex}`\n}\n","import { pack } from '@ethersproject/solidity'\nimport { Currency, Token } from '@uniswap/sdk-core'\nimport { Pool } from '../entities/pool'\nimport { Route } from '../entities/route'\n\n/**\n * Converts a route to a hex encoded path\n * @param route the v3 path to convert to an encoded path\n * @param exactOutput whether the route should be encoded in reverse, for making exact output swaps\n */\nexport function encodeRouteToPath(route: Route<Currency, Currency>, exactOutput: boolean): string {\n  const firstInputToken: Token = route.input.wrapped\n\n  const { path, types } = route.pools.reduce(\n    (\n      { inputToken, path, types }: { inputToken: Token; path: (string | number)[]; types: string[] },\n      pool: Pool,\n      index\n    ): { inputToken: Token; path: (string | number)[]; types: string[] } => {\n      const outputToken: Token = pool.token0.equals(inputToken) ? pool.token1 : pool.token0\n      if (index === 0) {\n        return {\n          inputToken: outputToken,\n          types: ['address', 'uint24', 'address'],\n          path: [inputToken.address, pool.fee, outputToken.address]\n        }\n      } else {\n        return {\n          inputToken: outputToken,\n          types: [...types, 'uint24', 'address'],\n          path: [...path, pool.fee, outputToken.address]\n        }\n      }\n    },\n    { inputToken: firstInputToken, path: [], types: [] }\n  )\n\n  return exactOutput ? pack(types.reverse(), path.reverse()) : pack(types, path)\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, sqrt } from '@uniswap/sdk-core'\n\n/**\n * Returns the sqrt ratio as a Q64.96 corresponding to a given ratio of amount1 and amount0\n * @param amount1 The numerator amount i.e., the amount of token1\n * @param amount0 The denominator amount i.e., the amount of token0\n * @returns The sqrt ratio\n */\n\nexport function encodeSqrtRatioX96(amount1: BigintIsh, amount0: BigintIsh): JSBI {\n  const numerator = JSBI.leftShift(JSBI.BigInt(amount1), JSBI.BigInt(192))\n  const denominator = JSBI.BigInt(amount0)\n  const ratioX192 = JSBI.divide(numerator, denominator)\n  return sqrt(ratioX192)\n}\n","import { BigintIsh } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport { Q96 } from '../internalConstants'\n\n/**\n * Returns an imprecise maximum amount of liquidity received for a given amount of token 0.\n * This function is available to accommodate LiquidityAmounts#getLiquidityForAmount0 in the v3 periphery,\n * which could be more precise by at least 32 bits by dividing by Q64 instead of Q96 in the intermediate step,\n * and shifting the subtracted ratio left by 32 bits. This imprecise calculation will likely be replaced in a future\n * v3 router contract.\n * @param sqrtRatioAX96 The price at the lower boundary\n * @param sqrtRatioBX96 The price at the upper boundary\n * @param amount0 The token0 amount\n * @returns liquidity for amount0, imprecise\n */\nfunction maxLiquidityForAmount0Imprecise(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, amount0: BigintIsh): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n  }\n  const intermediate = JSBI.divide(JSBI.multiply(sqrtRatioAX96, sqrtRatioBX96), Q96)\n  return JSBI.divide(JSBI.multiply(JSBI.BigInt(amount0), intermediate), JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96))\n}\n\n/**\n * Returns a precise maximum amount of liquidity received for a given amount of token 0 by dividing by Q64 instead of Q96 in the intermediate step,\n * and shifting the subtracted ratio left by 32 bits.\n * @param sqrtRatioAX96 The price at the lower boundary\n * @param sqrtRatioBX96 The price at the upper boundary\n * @param amount0 The token0 amount\n * @returns liquidity for amount0, precise\n */\nfunction maxLiquidityForAmount0Precise(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, amount0: BigintIsh): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n  }\n\n  const numerator = JSBI.multiply(JSBI.multiply(JSBI.BigInt(amount0), sqrtRatioAX96), sqrtRatioBX96)\n  const denominator = JSBI.multiply(Q96, JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96))\n\n  return JSBI.divide(numerator, denominator)\n}\n\n/**\n * Computes the maximum amount of liquidity received for a given amount of token1\n * @param sqrtRatioAX96 The price at the lower tick boundary\n * @param sqrtRatioBX96 The price at the upper tick boundary\n * @param amount1 The token1 amount\n * @returns liquidity for amount1\n */\nfunction maxLiquidityForAmount1(sqrtRatioAX96: JSBI, sqrtRatioBX96: JSBI, amount1: BigintIsh): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n  }\n  return JSBI.divide(JSBI.multiply(JSBI.BigInt(amount1), Q96), JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96))\n}\n\n/**\n * Computes the maximum amount of liquidity received for a given amount of token0, token1,\n * and the prices at the tick boundaries.\n * @param sqrtRatioCurrentX96 the current price\n * @param sqrtRatioAX96 price at lower boundary\n * @param sqrtRatioBX96 price at upper boundary\n * @param amount0 token0 amount\n * @param amount1 token1 amount\n * @param useFullPrecision if false, liquidity will be maximized according to what the router can calculate,\n * not what core can theoretically support\n */\nexport function maxLiquidityForAmounts(\n  sqrtRatioCurrentX96: JSBI,\n  sqrtRatioAX96: JSBI,\n  sqrtRatioBX96: JSBI,\n  amount0: BigintIsh,\n  amount1: BigintIsh,\n  useFullPrecision: boolean\n): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    ;[sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96]\n  }\n\n  const maxLiquidityForAmount0 = useFullPrecision ? maxLiquidityForAmount0Precise : maxLiquidityForAmount0Imprecise\n\n  if (JSBI.lessThanOrEqual(sqrtRatioCurrentX96, sqrtRatioAX96)) {\n    return maxLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0)\n  } else if (JSBI.lessThan(sqrtRatioCurrentX96, sqrtRatioBX96)) {\n    const liquidity0 = maxLiquidityForAmount0(sqrtRatioCurrentX96, sqrtRatioBX96, amount0)\n    const liquidity1 = maxLiquidityForAmount1(sqrtRatioAX96, sqrtRatioCurrentX96, amount1)\n    return JSBI.lessThan(liquidity0, liquidity1) ? liquidity0 : liquidity1\n  } else {\n    return maxLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1)\n  }\n}\n","import { Price, Token } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport { Q192 } from '../internalConstants'\nimport { encodeSqrtRatioX96 } from './encodeSqrtRatioX96'\nimport { TickMath } from './tickMath'\n\n/**\n * Returns a price object corresponding to the input tick and the base/quote token\n * Inputs must be tokens because the address order is used to interpret the price represented by the tick\n * @param baseToken the base token of the price\n * @param quoteToken the quote token of the price\n * @param tick the tick for which to return the price\n */\nexport function tickToPrice(baseToken: Token, quoteToken: Token, tick: number): Price<Token, Token> {\n  const sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick)\n\n  const ratioX192 = JSBI.multiply(sqrtRatioX96, sqrtRatioX96)\n\n  return baseToken.sortsBefore(quoteToken)\n    ? new Price(baseToken, quoteToken, Q192, ratioX192)\n    : new Price(baseToken, quoteToken, ratioX192, Q192)\n}\n\n/**\n * Returns the first tick for which the given price is greater than or equal to the tick price\n * @param price for which to return the closest tick that represents a price less than or equal to the input price,\n * i.e. the price of the returned tick is less than or equal to the input price\n */\nexport function priceToClosestTick(price: Price<Token, Token>): number {\n  const sorted = price.baseCurrency.sortsBefore(price.quoteCurrency)\n\n  const sqrtRatioX96 = sorted\n    ? encodeSqrtRatioX96(price.numerator, price.denominator)\n    : encodeSqrtRatioX96(price.denominator, price.numerator)\n\n  let tick = TickMath.getTickAtSqrtRatio(sqrtRatioX96)\n  const nextTickPrice = tickToPrice(price.baseCurrency, price.quoteCurrency, tick + 1)\n  if (sorted) {\n    if (!price.lessThan(nextTickPrice)) {\n      tick++\n    }\n  } else {\n    if (!price.greaterThan(nextTickPrice)) {\n      tick++\n    }\n  }\n  return tick\n}\n","import JSBI from 'jsbi'\nimport { ZERO } from '../internalConstants'\n\ninterface FeeGrowthOutside {\n  feeGrowthOutside0X128: JSBI\n  feeGrowthOutside1X128: JSBI\n}\n\nconst Q256 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(256))\n\nexport function subIn256(x: JSBI, y: JSBI): JSBI {\n  const difference = JSBI.subtract(x, y)\n\n  if (JSBI.lessThan(difference, ZERO)) {\n    return JSBI.add(Q256, difference)\n  } else {\n    return difference\n  }\n}\n\nexport abstract class TickLibrary {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static getFeeGrowthInside(\n    feeGrowthOutsideLower: FeeGrowthOutside,\n    feeGrowthOutsideUpper: FeeGrowthOutside,\n    tickLower: number,\n    tickUpper: number,\n    tickCurrent: number,\n    feeGrowthGlobal0X128: JSBI,\n    feeGrowthGlobal1X128: JSBI\n  ) {\n    let feeGrowthBelow0X128: JSBI\n    let feeGrowthBelow1X128: JSBI\n    if (tickCurrent >= tickLower) {\n      feeGrowthBelow0X128 = feeGrowthOutsideLower.feeGrowthOutside0X128\n      feeGrowthBelow1X128 = feeGrowthOutsideLower.feeGrowthOutside1X128\n    } else {\n      feeGrowthBelow0X128 = subIn256(feeGrowthGlobal0X128, feeGrowthOutsideLower.feeGrowthOutside0X128)\n      feeGrowthBelow1X128 = subIn256(feeGrowthGlobal1X128, feeGrowthOutsideLower.feeGrowthOutside1X128)\n    }\n\n    let feeGrowthAbove0X128: JSBI\n    let feeGrowthAbove1X128: JSBI\n    if (tickCurrent < tickUpper) {\n      feeGrowthAbove0X128 = feeGrowthOutsideUpper.feeGrowthOutside0X128\n      feeGrowthAbove1X128 = feeGrowthOutsideUpper.feeGrowthOutside1X128\n    } else {\n      feeGrowthAbove0X128 = subIn256(feeGrowthGlobal0X128, feeGrowthOutsideUpper.feeGrowthOutside0X128)\n      feeGrowthAbove1X128 = subIn256(feeGrowthGlobal1X128, feeGrowthOutsideUpper.feeGrowthOutside1X128)\n    }\n\n    return [\n      subIn256(subIn256(feeGrowthGlobal0X128, feeGrowthBelow0X128), feeGrowthAbove0X128),\n      subIn256(subIn256(feeGrowthGlobal1X128, feeGrowthBelow1X128), feeGrowthAbove1X128)\n    ]\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { BigintIsh } from '@uniswap/sdk-core'\nimport { TickMath } from '../utils'\n\nexport interface TickConstructorArgs {\n  index: number\n  liquidityGross: BigintIsh\n  liquidityNet: BigintIsh\n}\n\nexport class Tick {\n  public readonly index: number\n  public readonly liquidityGross: JSBI\n  public readonly liquidityNet: JSBI\n\n  constructor({ index, liquidityGross, liquidityNet }: TickConstructorArgs) {\n    invariant(index >= TickMath.MIN_TICK && index <= TickMath.MAX_TICK, 'TICK')\n    this.index = index\n    this.liquidityGross = JSBI.BigInt(liquidityGross)\n    this.liquidityNet = JSBI.BigInt(liquidityNet)\n  }\n}\n","import { BigintIsh } from '@uniswap/sdk-core'\nimport { TickList } from '../utils/tickList'\nimport { Tick, TickConstructorArgs } from './tick'\nimport { TickDataProvider } from './tickDataProvider'\n\n/**\n * A data provider for ticks that is backed by an in-memory array of ticks.\n */\nexport class TickListDataProvider implements TickDataProvider {\n  private ticks: readonly Tick[]\n\n  constructor(ticks: (Tick | TickConstructorArgs)[], tickSpacing: number) {\n    const ticksMapped: Tick[] = ticks.map(t => (t instanceof Tick ? t : new Tick(t)))\n    TickList.validateList(ticksMapped, tickSpacing)\n    this.ticks = ticksMapped\n  }\n\n  async getTick(tick: number): Promise<{ liquidityNet: BigintIsh; liquidityGross: BigintIsh }> {\n    return TickList.getTick(this.ticks, tick)\n  }\n\n  async nextInitializedTickWithinOneWord(tick: number, lte: boolean, tickSpacing: number): Promise<[number, boolean]> {\n    return TickList.nextInitializedTickWithinOneWord(this.ticks, tick, lte, tickSpacing)\n  }\n}\n","import { BigintIsh, CurrencyAmount, Price, Token } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { FACTORY_ADDRESS, FeeAmount, TICK_SPACINGS } from '../constants'\nimport { NEGATIVE_ONE, ONE, Q192, ZERO } from '../internalConstants'\nimport { computePoolAddress } from '../utils/computePoolAddress'\nimport { LiquidityMath } from '../utils/liquidityMath'\nimport { SwapMath } from '../utils/swapMath'\nimport { TickMath } from '../utils/tickMath'\nimport { Tick, TickConstructorArgs } from './tick'\nimport { NoTickDataProvider, TickDataProvider } from './tickDataProvider'\nimport { TickListDataProvider } from './tickListDataProvider'\n\ninterface StepComputations {\n  sqrtPriceStartX96: JSBI\n  tickNext: number\n  initialized: boolean\n  sqrtPriceNextX96: JSBI\n  amountIn: JSBI\n  amountOut: JSBI\n  feeAmount: JSBI\n}\n\n/**\n * By default, pools will not allow operations that require ticks.\n */\nconst NO_TICK_DATA_PROVIDER_DEFAULT = new NoTickDataProvider()\n\n/**\n * Represents a V3 pool\n */\nexport class Pool {\n  public readonly token0: Token\n  public readonly token1: Token\n  public readonly fee: FeeAmount\n  public readonly sqrtRatioX96: JSBI\n  public readonly liquidity: JSBI\n  public readonly tickCurrent: number\n  public readonly tickDataProvider: TickDataProvider\n\n  private _token0Price?: Price<Token, Token>\n  private _token1Price?: Price<Token, Token>\n\n  public static getAddress(\n    tokenA: Token,\n    tokenB: Token,\n    fee: FeeAmount,\n    initCodeHashManualOverride?: string,\n    factoryAddressOverride?: string\n  ): string {\n    return computePoolAddress({\n      factoryAddress: factoryAddressOverride ?? FACTORY_ADDRESS,\n      fee,\n      tokenA,\n      tokenB,\n      initCodeHashManualOverride\n    })\n  }\n\n  /**\n   * Construct a pool\n   * @param tokenA One of the tokens in the pool\n   * @param tokenB The other token in the pool\n   * @param fee The fee in hundredths of a bips of the input amount of every swap that is collected by the pool\n   * @param sqrtRatioX96 The sqrt of the current ratio of amounts of token1 to token0\n   * @param liquidity The current value of in range liquidity\n   * @param tickCurrent The current tick of the pool\n   * @param ticks The current state of the pool ticks or a data provider that can return tick data\n   */\n  public constructor(\n    tokenA: Token,\n    tokenB: Token,\n    fee: FeeAmount,\n    sqrtRatioX96: BigintIsh,\n    liquidity: BigintIsh,\n    tickCurrent: number,\n    ticks: TickDataProvider | (Tick | TickConstructorArgs)[] = NO_TICK_DATA_PROVIDER_DEFAULT\n  ) {\n    invariant(Number.isInteger(fee) && fee < 1_000_000, 'FEE')\n\n    const tickCurrentSqrtRatioX96 = TickMath.getSqrtRatioAtTick(tickCurrent)\n    const nextTickSqrtRatioX96 = TickMath.getSqrtRatioAtTick(tickCurrent + 1)\n    invariant(\n      JSBI.greaterThanOrEqual(JSBI.BigInt(sqrtRatioX96), tickCurrentSqrtRatioX96) &&\n        JSBI.lessThanOrEqual(JSBI.BigInt(sqrtRatioX96), nextTickSqrtRatioX96),\n      'PRICE_BOUNDS'\n    )\n    // always create a copy of the list since we want the pool's tick list to be immutable\n    ;[this.token0, this.token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n    this.fee = fee\n    this.sqrtRatioX96 = JSBI.BigInt(sqrtRatioX96)\n    this.liquidity = JSBI.BigInt(liquidity)\n    this.tickCurrent = tickCurrent\n    this.tickDataProvider = Array.isArray(ticks) ? new TickListDataProvider(ticks, TICK_SPACINGS[fee]) : ticks\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token The token to check\n   * @returns True if token is either token0 or token\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pool in terms of token0, i.e. the ratio of token1 over token0\n   */\n  public get token0Price(): Price<Token, Token> {\n    return (\n      this._token0Price ??\n      (this._token0Price = new Price(\n        this.token0,\n        this.token1,\n        Q192,\n        JSBI.multiply(this.sqrtRatioX96, this.sqrtRatioX96)\n      ))\n    )\n  }\n\n  /**\n   * Returns the current mid price of the pool in terms of token1, i.e. the ratio of token0 over token1\n   */\n  public get token1Price(): Price<Token, Token> {\n    return (\n      this._token1Price ??\n      (this._token1Price = new Price(\n        this.token1,\n        this.token0,\n        JSBI.multiply(this.sqrtRatioX96, this.sqrtRatioX96),\n        Q192\n      ))\n    )\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pool.\n   * @param token The token to return price of\n   * @returns The price of the given token, in terms of the other.\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pool.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  /**\n   * Given an input amount of a token, return the computed output amount, and a pool with state updated after the trade\n   * @param inputAmount The input amount for which to quote the output amount\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit\n   * @returns The output amount and the pool with updated state\n   */\n  public async getOutputAmount(\n    inputAmount: CurrencyAmount<Token>,\n    sqrtPriceLimitX96?: JSBI\n  ): Promise<[CurrencyAmount<Token>, Pool]> {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n\n    const zeroForOne = inputAmount.currency.equals(this.token0)\n\n    const { amountCalculated: outputAmount, sqrtRatioX96, liquidity, tickCurrent } = await this.swap(\n      zeroForOne,\n      inputAmount.quotient,\n      sqrtPriceLimitX96\n    )\n    const outputToken = zeroForOne ? this.token1 : this.token0\n    return [\n      CurrencyAmount.fromRawAmount(outputToken, JSBI.multiply(outputAmount, NEGATIVE_ONE)),\n      new Pool(this.token0, this.token1, this.fee, sqrtRatioX96, liquidity, tickCurrent, this.tickDataProvider)\n    ]\n  }\n\n  /**\n   * Given a desired output amount of a token, return the computed input amount and a pool with state updated after the trade\n   * @param outputAmount the output amount for which to quote the input amount\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\n   * @returns The input amount and the pool with updated state\n   */\n  public async getInputAmount(\n    outputAmount: CurrencyAmount<Token>,\n    sqrtPriceLimitX96?: JSBI\n  ): Promise<[CurrencyAmount<Token>, Pool]> {\n    invariant(outputAmount.currency.isToken && this.involvesToken(outputAmount.currency), 'TOKEN')\n\n    const zeroForOne = outputAmount.currency.equals(this.token1)\n\n    const { amountCalculated: inputAmount, sqrtRatioX96, liquidity, tickCurrent } = await this.swap(\n      zeroForOne,\n      JSBI.multiply(outputAmount.quotient, NEGATIVE_ONE),\n      sqrtPriceLimitX96\n    )\n    const inputToken = zeroForOne ? this.token0 : this.token1\n    return [\n      CurrencyAmount.fromRawAmount(inputToken, inputAmount),\n      new Pool(this.token0, this.token1, this.fee, sqrtRatioX96, liquidity, tickCurrent, this.tickDataProvider)\n    ]\n  }\n\n  /**\n   * Executes a swap\n   * @param zeroForOne Whether the amount in is token0 or token1\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\n   * @returns amountCalculated\n   * @returns sqrtRatioX96\n   * @returns liquidity\n   * @returns tickCurrent\n   */\n  private async swap(\n    zeroForOne: boolean,\n    amountSpecified: JSBI,\n    sqrtPriceLimitX96?: JSBI\n  ): Promise<{ amountCalculated: JSBI; sqrtRatioX96: JSBI; liquidity: JSBI; tickCurrent: number }> {\n    if (!sqrtPriceLimitX96)\n      sqrtPriceLimitX96 = zeroForOne\n        ? JSBI.add(TickMath.MIN_SQRT_RATIO, ONE)\n        : JSBI.subtract(TickMath.MAX_SQRT_RATIO, ONE)\n\n    if (zeroForOne) {\n      invariant(JSBI.greaterThan(sqrtPriceLimitX96, TickMath.MIN_SQRT_RATIO), 'RATIO_MIN')\n      invariant(JSBI.lessThan(sqrtPriceLimitX96, this.sqrtRatioX96), 'RATIO_CURRENT')\n    } else {\n      invariant(JSBI.lessThan(sqrtPriceLimitX96, TickMath.MAX_SQRT_RATIO), 'RATIO_MAX')\n      invariant(JSBI.greaterThan(sqrtPriceLimitX96, this.sqrtRatioX96), 'RATIO_CURRENT')\n    }\n\n    const exactInput = JSBI.greaterThanOrEqual(amountSpecified, ZERO)\n\n    // keep track of swap state\n\n    const state = {\n      amountSpecifiedRemaining: amountSpecified,\n      amountCalculated: ZERO,\n      sqrtPriceX96: this.sqrtRatioX96,\n      tick: this.tickCurrent,\n      liquidity: this.liquidity\n    }\n\n    // start swap while loop\n    while (JSBI.notEqual(state.amountSpecifiedRemaining, ZERO) && state.sqrtPriceX96 != sqrtPriceLimitX96) {\n      let step: Partial<StepComputations> = {}\n      step.sqrtPriceStartX96 = state.sqrtPriceX96\n\n      // because each iteration of the while loop rounds, we can't optimize this code (relative to the smart contract)\n      // by simply traversing to the next available tick, we instead need to exactly replicate\n      // tickBitmap.nextInitializedTickWithinOneWord\n      ;[step.tickNext, step.initialized] = await this.tickDataProvider.nextInitializedTickWithinOneWord(\n        state.tick,\n        zeroForOne,\n        this.tickSpacing\n      )\n\n      if (step.tickNext < TickMath.MIN_TICK) {\n        step.tickNext = TickMath.MIN_TICK\n      } else if (step.tickNext > TickMath.MAX_TICK) {\n        step.tickNext = TickMath.MAX_TICK\n      }\n\n      step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext)\n      ;[state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.computeSwapStep(\n        state.sqrtPriceX96,\n        (zeroForOne\n        ? JSBI.lessThan(step.sqrtPriceNextX96, sqrtPriceLimitX96)\n        : JSBI.greaterThan(step.sqrtPriceNextX96, sqrtPriceLimitX96))\n          ? sqrtPriceLimitX96\n          : step.sqrtPriceNextX96,\n        state.liquidity,\n        state.amountSpecifiedRemaining,\n        this.fee\n      )\n\n      if (exactInput) {\n        state.amountSpecifiedRemaining = JSBI.subtract(\n          state.amountSpecifiedRemaining,\n          JSBI.add(step.amountIn, step.feeAmount)\n        )\n        state.amountCalculated = JSBI.subtract(state.amountCalculated, step.amountOut)\n      } else {\n        state.amountSpecifiedRemaining = JSBI.add(state.amountSpecifiedRemaining, step.amountOut)\n        state.amountCalculated = JSBI.add(state.amountCalculated, JSBI.add(step.amountIn, step.feeAmount))\n      }\n\n      // TODO\n      if (JSBI.equal(state.sqrtPriceX96, step.sqrtPriceNextX96)) {\n        // if the tick is initialized, run the tick transition\n        if (step.initialized) {\n          let liquidityNet = JSBI.BigInt((await this.tickDataProvider.getTick(step.tickNext)).liquidityNet)\n          // if we're moving leftward, we interpret liquidityNet as the opposite sign\n          // safe because liquidityNet cannot be type(int128).min\n          if (zeroForOne) liquidityNet = JSBI.multiply(liquidityNet, NEGATIVE_ONE)\n\n          state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet)\n        }\n\n        state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext\n      } else if (JSBI.notEqual(state.sqrtPriceX96, step.sqrtPriceStartX96)) {\n        // updated comparison function\n        // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\n        state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96)\n      }\n    }\n\n    return {\n      amountCalculated: state.amountCalculated,\n      sqrtRatioX96: state.sqrtPriceX96,\n      liquidity: state.liquidity,\n      tickCurrent: state.tick\n    }\n  }\n\n  public get tickSpacing(): number {\n    return TICK_SPACINGS[this.fee]\n  }\n}\n","import { BigintIsh, MaxUint256, Percent, Price, CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ZERO } from '../internalConstants'\nimport { maxLiquidityForAmounts } from '../utils/maxLiquidityForAmounts'\nimport { tickToPrice } from '../utils/priceTickConversions'\nimport { SqrtPriceMath } from '../utils/sqrtPriceMath'\nimport { TickMath } from '../utils/tickMath'\nimport { encodeSqrtRatioX96 } from '../utils/encodeSqrtRatioX96'\nimport { Pool } from './pool'\n\ninterface PositionConstructorArgs {\n  pool: Pool\n  tickLower: number\n  tickUpper: number\n  liquidity: BigintIsh\n}\n\n/**\n * Represents a position on a Uniswap V3 Pool\n */\nexport class Position {\n  public readonly pool: Pool\n  public readonly tickLower: number\n  public readonly tickUpper: number\n  public readonly liquidity: JSBI\n\n  // cached resuts for the getters\n  private _token0Amount: CurrencyAmount<Token> | null = null\n  private _token1Amount: CurrencyAmount<Token> | null = null\n  private _mintAmounts: Readonly<{ amount0: JSBI; amount1: JSBI }> | null = null\n\n  /**\n   * Constructs a position for a given pool with the given liquidity\n   * @param pool For which pool the liquidity is assigned\n   * @param liquidity The amount of liquidity that is in the position\n   * @param tickLower The lower tick of the position\n   * @param tickUpper The upper tick of the position\n   */\n  public constructor({ pool, liquidity, tickLower, tickUpper }: PositionConstructorArgs) {\n    invariant(tickLower < tickUpper, 'TICK_ORDER')\n    invariant(tickLower >= TickMath.MIN_TICK && tickLower % pool.tickSpacing === 0, 'TICK_LOWER')\n    invariant(tickUpper <= TickMath.MAX_TICK && tickUpper % pool.tickSpacing === 0, 'TICK_UPPER')\n\n    this.pool = pool\n    this.tickLower = tickLower\n    this.tickUpper = tickUpper\n    this.liquidity = JSBI.BigInt(liquidity)\n  }\n\n  /**\n   * Returns the price of token0 at the lower tick\n   */\n  public get token0PriceLower(): Price<Token, Token> {\n    return tickToPrice(this.pool.token0, this.pool.token1, this.tickLower)\n  }\n\n  /**\n   * Returns the price of token0 at the upper tick\n   */\n  public get token0PriceUpper(): Price<Token, Token> {\n    return tickToPrice(this.pool.token0, this.pool.token1, this.tickUpper)\n  }\n\n  /**\n   * Returns the amount of token0 that this position's liquidity could be burned for at the current pool price\n   */\n  public get amount0(): CurrencyAmount<Token> {\n    if (this._token0Amount === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        this._token0Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token0,\n          SqrtPriceMath.getAmount0Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false\n          )\n        )\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        this._token0Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token0,\n          SqrtPriceMath.getAmount0Delta(\n            this.pool.sqrtRatioX96,\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false\n          )\n        )\n      } else {\n        this._token0Amount = CurrencyAmount.fromRawAmount(this.pool.token0, ZERO)\n      }\n    }\n    return this._token0Amount\n  }\n\n  /**\n   * Returns the amount of token1 that this position's liquidity could be burned for at the current pool price\n   */\n  public get amount1(): CurrencyAmount<Token> {\n    if (this._token1Amount === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        this._token1Amount = CurrencyAmount.fromRawAmount(this.pool.token1, ZERO)\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        this._token1Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token1,\n          SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            this.pool.sqrtRatioX96,\n            this.liquidity,\n            false\n          )\n        )\n      } else {\n        this._token1Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token1,\n          SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false\n          )\n        )\n      }\n    }\n    return this._token1Amount\n  }\n\n  /**\n   * Returns the lower and upper sqrt ratios if the price 'slips' up to slippage tolerance percentage\n   * @param slippageTolerance The amount by which the price can 'slip' before the transaction will revert\n   * @returns The sqrt ratios after slippage\n   */\n  private ratiosAfterSlippage(slippageTolerance: Percent): { sqrtRatioX96Lower: JSBI; sqrtRatioX96Upper: JSBI } {\n    const priceLower = this.pool.token0Price.asFraction.multiply(new Percent(1).subtract(slippageTolerance))\n    const priceUpper = this.pool.token0Price.asFraction.multiply(slippageTolerance.add(1))\n    let sqrtRatioX96Lower = encodeSqrtRatioX96(priceLower.numerator, priceLower.denominator)\n    if (JSBI.lessThanOrEqual(sqrtRatioX96Lower, TickMath.MIN_SQRT_RATIO)) {\n      sqrtRatioX96Lower = JSBI.add(TickMath.MIN_SQRT_RATIO, JSBI.BigInt(1))\n    }\n    let sqrtRatioX96Upper = encodeSqrtRatioX96(priceUpper.numerator, priceUpper.denominator)\n    if (JSBI.greaterThanOrEqual(sqrtRatioX96Upper, TickMath.MAX_SQRT_RATIO)) {\n      sqrtRatioX96Upper = JSBI.subtract(TickMath.MAX_SQRT_RATIO, JSBI.BigInt(1))\n    }\n    return {\n      sqrtRatioX96Lower,\n      sqrtRatioX96Upper\n    }\n  }\n\n  /**\n   * Returns the minimum amounts that must be sent in order to safely mint the amount of liquidity held by the position\n   * with the given slippage tolerance\n   * @param slippageTolerance Tolerance of unfavorable slippage from the current price\n   * @returns The amounts, with slippage\n   */\n  public mintAmountsWithSlippage(slippageTolerance: Percent): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    // get lower/upper prices\n    const { sqrtRatioX96Upper, sqrtRatioX96Lower } = this.ratiosAfterSlippage(slippageTolerance)\n\n    // construct counterfactual pools\n    const poolLower = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Lower,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Lower)\n    )\n    const poolUpper = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Upper,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Upper)\n    )\n\n    // because the router is imprecise, we need to calculate the position that will be created (assuming no slippage)\n    const positionThatWillBeCreated = Position.fromAmounts({\n      pool: this.pool,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper,\n      ...this.mintAmounts, // the mint amounts are what will be passed as calldata\n      useFullPrecision: false\n    })\n\n    // we want the smaller amounts...\n    // ...which occurs at the upper price for amount0...\n    const { amount0 } = new Position({\n      pool: poolUpper,\n      liquidity: positionThatWillBeCreated.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper\n    }).mintAmounts\n    // ...and the lower for amount1\n    const { amount1 } = new Position({\n      pool: poolLower,\n      liquidity: positionThatWillBeCreated.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper\n    }).mintAmounts\n\n    return { amount0, amount1 }\n  }\n\n  /**\n   * Returns the minimum amounts that should be requested in order to safely burn the amount of liquidity held by the\n   * position with the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the current price\n   * @returns The amounts, with slippage\n   */\n  public burnAmountsWithSlippage(slippageTolerance: Percent): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    // get lower/upper prices\n    const { sqrtRatioX96Upper, sqrtRatioX96Lower } = this.ratiosAfterSlippage(slippageTolerance)\n\n    // construct counterfactual pools\n    const poolLower = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Lower,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Lower)\n    )\n    const poolUpper = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Upper,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Upper)\n    )\n\n    // we want the smaller amounts...\n    // ...which occurs at the upper price for amount0...\n    const amount0 = new Position({\n      pool: poolUpper,\n      liquidity: this.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper\n    }).amount0\n    // ...and the lower for amount1\n    const amount1 = new Position({\n      pool: poolLower,\n      liquidity: this.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper\n    }).amount1\n\n    return { amount0: amount0.quotient, amount1: amount1.quotient }\n  }\n\n  /**\n   * Returns the minimum amounts that must be sent in order to mint the amount of liquidity held by the position at\n   * the current price for the pool\n   */\n  public get mintAmounts(): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    if (this._mintAmounts === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        return {\n          amount0: SqrtPriceMath.getAmount0Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true\n          ),\n          amount1: ZERO\n        }\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        return {\n          amount0: SqrtPriceMath.getAmount0Delta(\n            this.pool.sqrtRatioX96,\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true\n          ),\n          amount1: SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            this.pool.sqrtRatioX96,\n            this.liquidity,\n            true\n          )\n        }\n      } else {\n        return {\n          amount0: ZERO,\n          amount1: SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true\n          )\n        }\n      }\n    }\n    return this._mintAmounts\n  }\n\n  /**\n   * Computes the maximum amount of liquidity received for a given amount of token0, token1,\n   * and the prices at the tick boundaries.\n   * @param pool The pool for which the position should be created\n   * @param tickLower The lower tick of the position\n   * @param tickUpper The upper tick of the position\n   * @param amount0 token0 amount\n   * @param amount1 token1 amount\n   * @param useFullPrecision If false, liquidity will be maximized according to what the router can calculate,\n   * not what core can theoretically support\n   * @returns The amount of liquidity for the position\n   */\n  public static fromAmounts({\n    pool,\n    tickLower,\n    tickUpper,\n    amount0,\n    amount1,\n    useFullPrecision\n  }: {\n    pool: Pool\n    tickLower: number\n    tickUpper: number\n    amount0: BigintIsh\n    amount1: BigintIsh\n    useFullPrecision: boolean\n  }) {\n    const sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(tickLower)\n    const sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(tickUpper)\n    return new Position({\n      pool,\n      tickLower,\n      tickUpper,\n      liquidity: maxLiquidityForAmounts(\n        pool.sqrtRatioX96,\n        sqrtRatioAX96,\n        sqrtRatioBX96,\n        amount0,\n        amount1,\n        useFullPrecision\n      )\n    })\n  }\n\n  /**\n   * Computes a position with the maximum amount of liquidity received for a given amount of token0, assuming an unlimited amount of token1\n   * @param pool The pool for which the position is created\n   * @param tickLower The lower tick\n   * @param tickUpper The upper tick\n   * @param amount0 The desired amount of token0\n   * @param useFullPrecision If true, liquidity will be maximized according to what the router can calculate,\n   * not what core can theoretically support\n   * @returns The position\n   */\n  public static fromAmount0({\n    pool,\n    tickLower,\n    tickUpper,\n    amount0,\n    useFullPrecision\n  }: {\n    pool: Pool\n    tickLower: number\n    tickUpper: number\n    amount0: BigintIsh\n    useFullPrecision: boolean\n  }) {\n    return Position.fromAmounts({ pool, tickLower, tickUpper, amount0, amount1: MaxUint256, useFullPrecision })\n  }\n\n  /**\n   * Computes a position with the maximum amount of liquidity received for a given amount of token1, assuming an unlimited amount of token0\n   * @param pool The pool for which the position is created\n   * @param tickLower The lower tick\n   * @param tickUpper The upper tick\n   * @param amount1 The desired amount of token1\n   * @returns The position\n   */\n  public static fromAmount1({\n    pool,\n    tickLower,\n    tickUpper,\n    amount1\n  }: {\n    pool: Pool\n    tickLower: number\n    tickUpper: number\n    amount1: BigintIsh\n  }) {\n    // this function always uses full precision,\n    return Position.fromAmounts({ pool, tickLower, tickUpper, amount0: MaxUint256, amount1, useFullPrecision: true })\n  }\n}\n","import { Currency, Fraction, Percent, Price, sortedInsert, CurrencyAmount, TradeType, Token } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../internalConstants'\nimport { Pool } from './pool'\nimport { Route } from './route'\n\n/**\n * Trades comparator, an extension of the input output comparator that also considers other dimensions of the trade in ranking them\n * @template TInput The input token, either Ether or an ERC-20\n * @template TOutput The output token, either Ether or an ERC-20\n * @template TTradeType The trade type, either exact input or exact output\n * @param a The first trade to compare\n * @param b The second trade to compare\n * @returns A sorted ordering for two neighboring elements in a trade array\n */\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      // consider the number of hops since each hop costs gas\n      const aHops = a.swaps.reduce((total, cur) => total + cur.route.tokenPath.length, 0)\n      const bHops = b.swaps.reduce((total, cur) => total + cur.route.tokenPath.length, 0)\n      return aHops - bHops\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a set of routes where some percentage of the input is\n * split across each route.\n *\n * Each route has its own set of pools. Pools can not be re-used across routes.\n *\n * Does not account for slippage, i.e., changes in price environment that can occur between\n * the time the trade is submitted and when it is executed.\n * @template TInput The input token, either Ether or an ERC-20\n * @template TOutput The output token, either Ether or an ERC-20\n * @template TTradeType The trade type, either exact input or exact output\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * @deprecated Deprecated in favor of 'swaps' property. If the trade consists of multiple routes\n   * this will return an error.\n   *\n   * When the trade consists of just a single route, this returns the route of the trade,\n   * i.e. which pools the trade goes through.\n   */\n  public get route(): Route<TInput, TOutput> {\n    invariant(this.swaps.length == 1, 'MULTIPLE_ROUTES')\n    return this.swaps[0].route\n  }\n\n  /**\n   * The swaps of the trade, i.e. which routes and how much is swapped in each that\n   * make up the trade.\n   */\n  public readonly swaps: {\n    route: Route<TInput, TOutput>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n  }[]\n\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n\n  /**\n   * The cached result of the input amount computation\n   * @private\n   */\n  private _inputAmount: CurrencyAmount<TInput> | undefined\n\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public get inputAmount(): CurrencyAmount<TInput> {\n    if (this._inputAmount) {\n      return this._inputAmount\n    }\n\n    const inputCurrency = this.swaps[0].inputAmount.currency\n    const totalInputFromRoutes = this.swaps\n      .map(({ inputAmount }) => inputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(inputCurrency, 0))\n\n    this._inputAmount = totalInputFromRoutes\n    return this._inputAmount\n  }\n\n  /**\n   * The cached result of the output amount computation\n   * @private\n   */\n  private _outputAmount: CurrencyAmount<TOutput> | undefined\n\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public get outputAmount(): CurrencyAmount<TOutput> {\n    if (this._outputAmount) {\n      return this._outputAmount\n    }\n\n    const outputCurrency = this.swaps[0].outputAmount.currency\n    const totalOutputFromRoutes = this.swaps\n      .map(({ outputAmount }) => outputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(outputCurrency, 0))\n\n    this._outputAmount = totalOutputFromRoutes\n    return this._outputAmount\n  }\n\n  /**\n   * The cached result of the computed execution price\n   * @private\n   */\n  private _executionPrice: Price<TInput, TOutput> | undefined\n\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public get executionPrice(): Price<TInput, TOutput> {\n    return (\n      this._executionPrice ??\n      (this._executionPrice = new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.inputAmount.quotient,\n        this.outputAmount.quotient\n      ))\n    )\n  }\n\n  /**\n   * The cached result of the price impact computation\n   * @private\n   */\n  private _priceImpact: Percent | undefined\n\n  /**\n   * Returns the percent difference between the route's mid price and the price impact\n   */\n  public get priceImpact(): Percent {\n    if (this._priceImpact) {\n      return this._priceImpact\n    }\n\n    let spotOutputAmount = CurrencyAmount.fromRawAmount(this.outputAmount.currency, 0)\n    for (const { route, inputAmount } of this.swaps) {\n      const midPrice = route.midPrice\n      spotOutputAmount = spotOutputAmount.add(midPrice.quote(inputAmount))\n    }\n\n    const priceImpact = spotOutputAmount.subtract(this.outputAmount).divide(spotOutputAmount)\n    this._priceImpact = new Percent(priceImpact.numerator, priceImpact.denominator)\n\n    return this._priceImpact\n  }\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @param route The route of the exact in trade\n   * @param amountIn The amount being passed in\n   * @returns The exact in trade\n   */\n  public static async exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_INPUT>> {\n    return Trade.fromRoute(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @param route The route of the exact out trade\n   * @param amountOut The amount returned by the trade\n   * @returns The exact out trade\n   */\n  public static async exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>> {\n    return Trade.fromRoute(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  /**\n   * Constructs a trade by simulating swaps through the given route\n   * @template TInput The input token, either Ether or an ERC-20.\n   * @template TOutput The output token, either Ether or an ERC-20.\n   * @template TTradeType The type of the trade, either exact in or exact out.\n   * @param route route to swap through\n   * @param amount the amount specified, either input or output, depending on tradeType\n   * @param tradeType whether the trade is an exact input or exact output swap\n   * @returns The route\n   */\n  public static async fromRoute<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n    const amounts: CurrencyAmount<Token>[] = new Array(route.tokenPath.length)\n    let inputAmount: CurrencyAmount<TInput>\n    let outputAmount: CurrencyAmount<TOutput>\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      amounts[0] = amount.wrapped\n      for (let i = 0; i < route.tokenPath.length - 1; i++) {\n        const pool = route.pools[i]\n        const [outputAmount] = await pool.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n      }\n      inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        amounts[amounts.length - 1].numerator,\n        amounts[amounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = amount.wrapped\n      for (let i = route.tokenPath.length - 1; i > 0; i--) {\n        const pool = route.pools[i - 1]\n        const [inputAmount] = await pool.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n      }\n      inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amounts[0].numerator, amounts[0].denominator)\n      outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n\n    return new Trade({\n      routes: [{ inputAmount, outputAmount, route }],\n      tradeType\n    })\n  }\n\n  /**\n   * Constructs a trade from routes by simulating swaps\n   *\n   * @template TInput The input token, either Ether or an ERC-20.\n   * @template TOutput The output token, either Ether or an ERC-20.\n   * @template TTradeType The type of the trade, either exact in or exact out.\n   * @param routes the routes to swap through and how much of the amount should be routed through each\n   * @param tradeType whether the trade is an exact input or exact output swap\n   * @returns The trade\n   */\n  public static async fromRoutes<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    routes: {\n      amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>\n      route: Route<TInput, TOutput>\n    }[],\n    tradeType: TTradeType\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n    const populatedRoutes: {\n      route: Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    for (const { route, amount } of routes) {\n      const amounts: CurrencyAmount<Token>[] = new Array(route.tokenPath.length)\n      let inputAmount: CurrencyAmount<TInput>\n      let outputAmount: CurrencyAmount<TOutput>\n\n      if (tradeType === TradeType.EXACT_INPUT) {\n        invariant(amount.currency.equals(route.input), 'INPUT')\n        inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n        amounts[0] = CurrencyAmount.fromFractionalAmount(route.input.wrapped, amount.numerator, amount.denominator)\n\n        for (let i = 0; i < route.tokenPath.length - 1; i++) {\n          const pool = route.pools[i]\n          const [outputAmount] = await pool.getOutputAmount(amounts[i])\n          amounts[i + 1] = outputAmount\n        }\n\n        outputAmount = CurrencyAmount.fromFractionalAmount(\n          route.output,\n          amounts[amounts.length - 1].numerator,\n          amounts[amounts.length - 1].denominator\n        )\n      } else {\n        invariant(amount.currency.equals(route.output), 'OUTPUT')\n        outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n        amounts[amounts.length - 1] = CurrencyAmount.fromFractionalAmount(\n          route.output.wrapped,\n          amount.numerator,\n          amount.denominator\n        )\n\n        for (let i = route.tokenPath.length - 1; i > 0; i--) {\n          const pool = route.pools[i - 1]\n          const [inputAmount] = await pool.getInputAmount(amounts[i])\n          amounts[i - 1] = inputAmount\n        }\n\n        inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amounts[0].numerator, amounts[0].denominator)\n      }\n\n      populatedRoutes.push({ route, inputAmount, outputAmount })\n    }\n\n    return new Trade({\n      routes: populatedRoutes,\n      tradeType\n    })\n  }\n\n  /**\n   * Creates a trade without computing the result of swapping through the route. Useful when you have simulated the trade\n   * elsewhere and do not have any tick data\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @template TTradeType The type of the trade, either exact in or exact out\n   * @param constructorArguments The arguments passed to the trade constructor\n   * @returns The unchecked trade\n   */\n  public static createUncheckedTrade<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType\n  >(constructorArguments: {\n    route: Route<TInput, TOutput>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n    tradeType: TTradeType\n  }): Trade<TInput, TOutput, TTradeType> {\n    return new Trade({\n      ...constructorArguments,\n      routes: [\n        {\n          inputAmount: constructorArguments.inputAmount,\n          outputAmount: constructorArguments.outputAmount,\n          route: constructorArguments.route\n        }\n      ]\n    })\n  }\n\n  /**\n   * Creates a trade without computing the result of swapping through the routes. Useful when you have simulated the trade\n   * elsewhere and do not have any tick data\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @template TTradeType The type of the trade, either exact in or exact out\n   * @param constructorArguments The arguments passed to the trade constructor\n   * @returns The unchecked trade\n   */\n  public static createUncheckedTradeWithMultipleRoutes<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType\n  >(constructorArguments: {\n    routes: {\n      route: Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n  }): Trade<TInput, TOutput, TTradeType> {\n    return new Trade(constructorArguments)\n  }\n\n  /**\n   * Construct a trade by passing in the pre-computed property values\n   * @param routes The routes through which the trade occurs\n   * @param tradeType The type of trade, exact input or exact output\n   */\n  private constructor({\n    routes,\n    tradeType\n  }: {\n    routes: {\n      route: Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n  }) {\n    const inputCurrency = routes[0].inputAmount.currency\n    const outputCurrency = routes[0].outputAmount.currency\n    invariant(\n      routes.every(({ route }) => inputCurrency.wrapped.equals(route.input.wrapped)),\n      'INPUT_CURRENCY_MATCH'\n    )\n    invariant(\n      routes.every(({ route }) => outputCurrency.wrapped.equals(route.output.wrapped)),\n      'OUTPUT_CURRENCY_MATCH'\n    )\n\n    const numPools = routes.map(({ route }) => route.pools.length).reduce((total, cur) => total + cur, 0)\n    const poolAddressSet = new Set<string>()\n    for (const { route } of routes) {\n      for (const pool of route.pools) {\n        poolAddressSet.add(Pool.getAddress(pool.token0, pool.token1, pool.fee))\n      }\n    }\n\n    invariant(numPools == poolAddressSet.size, 'POOLS_DUPLICATED')\n\n    this.swaps = routes\n    this.tradeType = tradeType\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount out\n   */\n  public minimumAmountOut(slippageTolerance: Percent, amountOut = this.outputAmount): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return amountOut\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(amountOut.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountOut.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount in\n   */\n  public maximumAmountIn(slippageTolerance: Percent, amountIn = this.inputAmount): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return amountIn\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(amountIn.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountIn.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   * @returns The execution price\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * Given a list of pools, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param currentPools used in recursion; the current list of pools\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   * @returns The exact in trade\n   */\n  public static async bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pools: Pool[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPools: Pool[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_INPUT>[]> {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPools.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      // pool irrelevant\n      if (!pool.token0.equals(amountIn.currency) && !pool.token1.equals(amountIn.currency)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = await pool.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.isToken && amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          await Trade.fromRoute(\n            new Route([...currentPools, pool], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        await Trade.bestTradeExactIn(\n          poolsExcludingThisPool,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPools, pool],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pools, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the desired currency amount out\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param currentPools used in recursion; the current list of pools\n   * @param bestTrades used in recursion; the current list of best trades\n   * @returns The exact out trade\n   */\n  public static async bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pools: Pool[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPools: Pool[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[]> {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPools.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      // pool irrelevant\n      if (!pool.token0.equals(amountOut.currency) && !pool.token1.equals(amountOut.currency)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = await pool.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pool\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          await Trade.fromRoute(\n            new Route([pool, ...currentPools], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        await Trade.bestTradeExactOut(\n          poolsExcludingThisPool,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pool, ...currentPools],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Interface } from '@ethersproject/abi'\nimport IMulticall from '@uniswap/v3-periphery/artifacts/contracts/interfaces/IMulticall.sol/IMulticall.json'\n\nexport abstract class Multicall {\n  public static INTERFACE: Interface = new Interface(IMulticall.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeMulticall(calldatas: string | string[]): string {\n    if (!Array.isArray(calldatas)) {\n      calldatas = [calldatas]\n    }\n\n    return calldatas.length === 1 ? calldatas[0] : Multicall.INTERFACE.encodeFunctionData('multicall', [calldatas])\n  }\n}\n","import { BigintIsh, Token } from '@uniswap/sdk-core'\nimport { Interface } from '@ethersproject/abi'\nimport ISelfPermit from '@uniswap/v3-periphery/artifacts/contracts/interfaces/ISelfPermit.sol/ISelfPermit.json'\nimport { toHex } from './utils'\n\nexport interface StandardPermitArguments {\n  v: 0 | 1 | 27 | 28\n  r: string\n  s: string\n  amount: BigintIsh\n  deadline: BigintIsh\n}\n\nexport interface AllowedPermitArguments {\n  v: 0 | 1 | 27 | 28\n  r: string\n  s: string\n  nonce: BigintIsh\n  expiry: BigintIsh\n}\n\nexport type PermitOptions = StandardPermitArguments | AllowedPermitArguments\n\nfunction isAllowedPermit(permitOptions: PermitOptions): permitOptions is AllowedPermitArguments {\n  return 'nonce' in permitOptions\n}\n\nexport abstract class SelfPermit {\n  public static INTERFACE: Interface = new Interface(ISelfPermit.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodePermit(token: Token, options: PermitOptions) {\n    return isAllowedPermit(options)\n      ? SelfPermit.INTERFACE.encodeFunctionData('selfPermitAllowed', [\n          token.address,\n          toHex(options.nonce),\n          toHex(options.expiry),\n          options.v,\n          options.r,\n          options.s\n        ])\n      : SelfPermit.INTERFACE.encodeFunctionData('selfPermit', [\n          token.address,\n          toHex(options.amount),\n          toHex(options.deadline),\n          options.v,\n          options.r,\n          options.s\n        ])\n  }\n}\n","import JSBI from 'jsbi'\nimport { Interface } from '@ethersproject/abi'\nimport IPeripheryPaymentsWithFee from '@uniswap/v3-periphery/artifacts/contracts/interfaces/IPeripheryPaymentsWithFee.sol/IPeripheryPaymentsWithFee.json'\nimport { Percent, Token, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { toHex } from './utils/calldata'\n\nexport interface FeeOptions {\n  /**\n   * The percent of the output that will be taken as a fee.\n   */\n  fee: Percent\n\n  /**\n   * The recipient of the fee.\n   */\n  recipient: string\n}\n\nexport abstract class Payments {\n  public static INTERFACE: Interface = new Interface(IPeripheryPaymentsWithFee.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  private static encodeFeeBips(fee: Percent): string {\n    return toHex(fee.multiply(10_000).quotient)\n  }\n\n  public static encodeUnwrapWETH9(amountMinimum: JSBI, recipient: string, feeOptions?: FeeOptions): string {\n    recipient = validateAndParseAddress(recipient)\n\n    if (!!feeOptions) {\n      const feeBips = this.encodeFeeBips(feeOptions.fee)\n      const feeRecipient: string = validateAndParseAddress(feeOptions.recipient)\n\n      return Payments.INTERFACE.encodeFunctionData('unwrapWETH9WithFee', [\n        toHex(amountMinimum),\n        recipient,\n        feeBips,\n        feeRecipient\n      ])\n    } else {\n      return Payments.INTERFACE.encodeFunctionData('unwrapWETH9', [toHex(amountMinimum), recipient])\n    }\n  }\n\n  public static encodeSweepToken(\n    token: Token,\n    amountMinimum: JSBI,\n    recipient: string,\n    feeOptions?: FeeOptions\n  ): string {\n    recipient = validateAndParseAddress(recipient)\n\n    if (!!feeOptions) {\n      const feeBips = this.encodeFeeBips(feeOptions.fee)\n      const feeRecipient: string = validateAndParseAddress(feeOptions.recipient)\n\n      return Payments.INTERFACE.encodeFunctionData('sweepTokenWithFee', [\n        token.address,\n        toHex(amountMinimum),\n        recipient,\n        feeBips,\n        feeRecipient\n      ])\n    } else {\n      return Payments.INTERFACE.encodeFunctionData('sweepToken', [token.address, toHex(amountMinimum), recipient])\n    }\n  }\n\n  public static encodeRefundETH(): string {\n    return Payments.INTERFACE.encodeFunctionData('refundETH')\n  }\n}\n","import {\n  BigintIsh,\n  Percent,\n  Token,\n  CurrencyAmount,\n  validateAndParseAddress,\n  Currency,\n  NativeCurrency\n} from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { Position } from './entities/position'\nimport { ONE, ZERO } from './internalConstants'\nimport { MethodParameters, toHex } from './utils/calldata'\nimport { Interface } from '@ethersproject/abi'\nimport INonfungiblePositionManager from '@uniswap/v3-periphery/artifacts/contracts/NonfungiblePositionManager.sol/NonfungiblePositionManager.json'\nimport { PermitOptions, SelfPermit } from './selfPermit'\nimport { ADDRESS_ZERO } from './constants'\nimport { Pool } from './entities'\nimport { Multicall } from './multicall'\nimport { Payments } from './payments'\n\nconst MaxUint128 = toHex(JSBI.subtract(JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(128)), JSBI.BigInt(1)))\n\nexport interface MintSpecificOptions {\n  /**\n   * The account that should receive the minted NFT.\n   */\n  recipient: string\n\n  /**\n   * Creates pool if not initialized before mint.\n   */\n  createPool?: boolean\n}\n\nexport interface IncreaseSpecificOptions {\n  /**\n   * Indicates the ID of the position to increase liquidity for.\n   */\n  tokenId: BigintIsh\n}\n\n/**\n * Options for producing the calldata to add liquidity.\n */\nexport interface CommonAddLiquidityOptions {\n  /**\n   * How much the pool price is allowed to move.\n   */\n  slippageTolerance: Percent\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh\n\n  /**\n   * Whether to spend ether. If true, one of the pool tokens must be WETH, by default false\n   */\n  useNative?: NativeCurrency\n\n  /**\n   * The optional permit parameters for spending token0\n   */\n  token0Permit?: PermitOptions\n\n  /**\n   * The optional permit parameters for spending token1\n   */\n  token1Permit?: PermitOptions\n}\n\nexport type MintOptions = CommonAddLiquidityOptions & MintSpecificOptions\nexport type IncreaseOptions = CommonAddLiquidityOptions & IncreaseSpecificOptions\n\nexport type AddLiquidityOptions = MintOptions | IncreaseOptions\n\nexport interface SafeTransferOptions {\n  /**\n   * The account sending the NFT.\n   */\n  sender: string\n\n  /**\n   * The account that should receive the NFT.\n   */\n  recipient: string\n\n  /**\n   * The id of the token being sent.\n   */\n  tokenId: BigintIsh\n  /**\n   * The optional parameter that passes data to the `onERC721Received` call for the staker\n   */\n  data?: string\n}\n\n// type guard\nfunction isMint(options: AddLiquidityOptions): options is MintOptions {\n  return Object.keys(options).some(k => k === 'recipient')\n}\n\nexport interface CollectOptions {\n  /**\n   * Indicates the ID of the position to collect for.\n   */\n  tokenId: BigintIsh\n\n  /**\n   * Expected value of tokensOwed0, including as-of-yet-unaccounted-for fees/liquidity value to be burned\n   */\n  expectedCurrencyOwed0: CurrencyAmount<Currency>\n\n  /**\n   * Expected value of tokensOwed1, including as-of-yet-unaccounted-for fees/liquidity value to be burned\n   */\n  expectedCurrencyOwed1: CurrencyAmount<Currency>\n\n  /**\n   * The account that should receive the tokens.\n   */\n  recipient: string\n}\n\nexport interface NFTPermitOptions {\n  v: 0 | 1 | 27 | 28\n  r: string\n  s: string\n  deadline: BigintIsh\n  spender: string\n}\n\n/**\n * Options for producing the calldata to exit a position.\n */\nexport interface RemoveLiquidityOptions {\n  /**\n   * The ID of the token to exit\n   */\n  tokenId: BigintIsh\n\n  /**\n   * The percentage of position liquidity to exit.\n   */\n  liquidityPercentage: Percent\n\n  /**\n   * How much the pool price is allowed to move.\n   */\n  slippageTolerance: Percent\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh\n\n  /**\n   * Whether the NFT should be burned if the entire position is being exited, by default false.\n   */\n  burnToken?: boolean\n\n  /**\n   * The optional permit of the token ID being exited, in case the exit transaction is being sent by an account that does not own the NFT\n   */\n  permit?: NFTPermitOptions\n\n  /**\n   * Parameters to be passed on to collect\n   */\n  collectOptions: Omit<CollectOptions, 'tokenId'>\n}\n\nexport abstract class NonfungiblePositionManager {\n  public static INTERFACE: Interface = new Interface(INonfungiblePositionManager.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  private static encodeCreate(pool: Pool): string {\n    return NonfungiblePositionManager.INTERFACE.encodeFunctionData('createAndInitializePoolIfNecessary', [\n      pool.token0.address,\n      pool.token1.address,\n      pool.fee,\n      toHex(pool.sqrtRatioX96)\n    ])\n  }\n\n  public static createCallParameters(pool: Pool): MethodParameters {\n    return {\n      calldata: this.encodeCreate(pool),\n      value: toHex(0)\n    }\n  }\n\n  public static addCallParameters(position: Position, options: AddLiquidityOptions): MethodParameters {\n    invariant(JSBI.greaterThan(position.liquidity, ZERO), 'ZERO_LIQUIDITY')\n\n    const calldatas: string[] = []\n\n    // get amounts\n    const { amount0: amount0Desired, amount1: amount1Desired } = position.mintAmounts\n\n    // adjust for slippage\n    const minimumAmounts = position.mintAmountsWithSlippage(options.slippageTolerance)\n    const amount0Min = toHex(minimumAmounts.amount0)\n    const amount1Min = toHex(minimumAmounts.amount1)\n\n    const deadline = toHex(options.deadline)\n\n    // create pool if needed\n    if (isMint(options) && options.createPool) {\n      calldatas.push(this.encodeCreate(position.pool))\n    }\n\n    // permits if necessary\n    if (options.token0Permit) {\n      calldatas.push(SelfPermit.encodePermit(position.pool.token0, options.token0Permit))\n    }\n    if (options.token1Permit) {\n      calldatas.push(SelfPermit.encodePermit(position.pool.token1, options.token1Permit))\n    }\n\n    // mint\n    if (isMint(options)) {\n      const recipient: string = validateAndParseAddress(options.recipient)\n\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('mint', [\n          {\n            token0: position.pool.token0.address,\n            token1: position.pool.token1.address,\n            fee: position.pool.fee,\n            tickLower: position.tickLower,\n            tickUpper: position.tickUpper,\n            amount0Desired: toHex(amount0Desired),\n            amount1Desired: toHex(amount1Desired),\n            amount0Min,\n            amount1Min,\n            recipient,\n            deadline\n          }\n        ])\n      )\n    } else {\n      // increase\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('increaseLiquidity', [\n          {\n            tokenId: toHex(options.tokenId),\n            amount0Desired: toHex(amount0Desired),\n            amount1Desired: toHex(amount1Desired),\n            amount0Min,\n            amount1Min,\n            deadline\n          }\n        ])\n      )\n    }\n\n    let value: string = toHex(0)\n\n    if (options.useNative) {\n      const wrapped = options.useNative.wrapped\n      invariant(position.pool.token0.equals(wrapped) || position.pool.token1.equals(wrapped), 'NO_WETH')\n\n      const wrappedValue = position.pool.token0.equals(wrapped) ? amount0Desired : amount1Desired\n\n      // we only need to refund if we're actually sending ETH\n      if (JSBI.greaterThan(wrappedValue, ZERO)) {\n        calldatas.push(Payments.encodeRefundETH())\n      }\n\n      value = toHex(wrappedValue)\n    }\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value\n    }\n  }\n\n  private static encodeCollect(options: CollectOptions): string[] {\n    const calldatas: string[] = []\n\n    const tokenId = toHex(options.tokenId)\n\n    const involvesETH =\n      options.expectedCurrencyOwed0.currency.isNative || options.expectedCurrencyOwed1.currency.isNative\n\n    const recipient = validateAndParseAddress(options.recipient)\n\n    // collect\n    calldatas.push(\n      NonfungiblePositionManager.INTERFACE.encodeFunctionData('collect', [\n        {\n          tokenId,\n          recipient: involvesETH ? ADDRESS_ZERO : recipient,\n          amount0Max: MaxUint128,\n          amount1Max: MaxUint128\n        }\n      ])\n    )\n\n    if (involvesETH) {\n      const ethAmount = options.expectedCurrencyOwed0.currency.isNative\n        ? options.expectedCurrencyOwed0.quotient\n        : options.expectedCurrencyOwed1.quotient\n      const token = options.expectedCurrencyOwed0.currency.isNative\n        ? (options.expectedCurrencyOwed1.currency as Token)\n        : (options.expectedCurrencyOwed0.currency as Token)\n      const tokenAmount = options.expectedCurrencyOwed0.currency.isNative\n        ? options.expectedCurrencyOwed1.quotient\n        : options.expectedCurrencyOwed0.quotient\n\n      calldatas.push(Payments.encodeUnwrapWETH9(ethAmount, recipient))\n      calldatas.push(Payments.encodeSweepToken(token, tokenAmount, recipient))\n    }\n\n    return calldatas\n  }\n\n  public static collectCallParameters(options: CollectOptions): MethodParameters {\n    const calldatas: string[] = NonfungiblePositionManager.encodeCollect(options)\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(0)\n    }\n  }\n\n  /**\n   * Produces the calldata for completely or partially exiting a position\n   * @param position The position to exit\n   * @param options Additional information necessary for generating the calldata\n   * @returns The call parameters\n   */\n  public static removeCallParameters(position: Position, options: RemoveLiquidityOptions): MethodParameters {\n    const calldatas: string[] = []\n\n    const deadline = toHex(options.deadline)\n    const tokenId = toHex(options.tokenId)\n\n    // construct a partial position with a percentage of liquidity\n    const partialPosition = new Position({\n      pool: position.pool,\n      liquidity: options.liquidityPercentage.multiply(position.liquidity).quotient,\n      tickLower: position.tickLower,\n      tickUpper: position.tickUpper\n    })\n    invariant(JSBI.greaterThan(partialPosition.liquidity, ZERO), 'ZERO_LIQUIDITY')\n\n    // slippage-adjusted underlying amounts\n    const { amount0: amount0Min, amount1: amount1Min } = partialPosition.burnAmountsWithSlippage(\n      options.slippageTolerance\n    )\n\n    if (options.permit) {\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('permit', [\n          validateAndParseAddress(options.permit.spender),\n          tokenId,\n          toHex(options.permit.deadline),\n          options.permit.v,\n          options.permit.r,\n          options.permit.s\n        ])\n      )\n    }\n\n    // remove liquidity\n    calldatas.push(\n      NonfungiblePositionManager.INTERFACE.encodeFunctionData('decreaseLiquidity', [\n        {\n          tokenId,\n          liquidity: toHex(partialPosition.liquidity),\n          amount0Min: toHex(amount0Min),\n          amount1Min: toHex(amount1Min),\n          deadline\n        }\n      ])\n    )\n\n    const { expectedCurrencyOwed0, expectedCurrencyOwed1, ...rest } = options.collectOptions\n    calldatas.push(\n      ...NonfungiblePositionManager.encodeCollect({\n        tokenId: toHex(options.tokenId),\n        // add the underlying value to the expected currency already owed\n        expectedCurrencyOwed0: expectedCurrencyOwed0.add(\n          CurrencyAmount.fromRawAmount(expectedCurrencyOwed0.currency, amount0Min)\n        ),\n        expectedCurrencyOwed1: expectedCurrencyOwed1.add(\n          CurrencyAmount.fromRawAmount(expectedCurrencyOwed1.currency, amount1Min)\n        ),\n        ...rest\n      })\n    )\n\n    if (options.liquidityPercentage.equalTo(ONE)) {\n      if (options.burnToken) {\n        calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('burn', [tokenId]))\n      }\n    } else {\n      invariant(options.burnToken !== true, 'CANNOT_BURN')\n    }\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(0)\n    }\n  }\n\n  public static safeTransferFromParameters(options: SafeTransferOptions): MethodParameters {\n    const recipient = validateAndParseAddress(options.recipient)\n    const sender = validateAndParseAddress(options.sender)\n\n    let calldata: string\n    if (options.data) {\n      calldata = NonfungiblePositionManager.INTERFACE.encodeFunctionData(\n        'safeTransferFrom(address,address,uint256,bytes)',\n        [sender, recipient, toHex(options.tokenId), options.data]\n      )\n    } else {\n      calldata = NonfungiblePositionManager.INTERFACE.encodeFunctionData('safeTransferFrom(address,address,uint256)', [\n        sender,\n        recipient,\n        toHex(options.tokenId)\n      ])\n    }\n    return {\n      calldata: calldata,\n      value: toHex(0)\n    }\n  }\n}\n","import { Interface } from '@ethersproject/abi'\nimport { BigintIsh, Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { encodeRouteToPath, MethodParameters, toHex } from './utils'\nimport IQuoter from '@uniswap/v3-periphery/artifacts/contracts/lens/Quoter.sol/Quoter.json'\nimport IQuoterV2 from '@uniswap/swap-router-contracts/artifacts/contracts/lens/QuoterV2.sol/QuoterV2.json'\nimport { Route } from './entities'\nimport invariant from 'tiny-invariant'\nimport { FeeAmount } from './constants'\n\n/**\n * Optional arguments to send to the quoter.\n */\nexport interface QuoteOptions {\n  /**\n   * The optional price limit for the trade.\n   */\n  sqrtPriceLimitX96?: BigintIsh\n\n  /**\n   * The optional quoter interface to use\n   */\n  useQuoterV2?: boolean\n}\n\ninterface BaseQuoteParams {\n  fee: FeeAmount\n  sqrtPriceLimitX96: string\n  tokenIn: string\n  tokenOut: string\n}\n\n/**\n * Represents the Uniswap V3 QuoterV1 contract with a method for returning the formatted\n * calldata needed to call the quoter contract.\n */\nexport abstract class SwapQuoter {\n  public static V1INTERFACE: Interface = new Interface(IQuoter.abi)\n  public static V2INTERFACE: Interface = new Interface(IQuoterV2.abi)\n\n  /**\n   * Produces the on-chain method name of the appropriate function within QuoterV2,\n   * and the relevant hex encoded parameters.\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @param route The swap route, a list of pools through which a swap can occur\n   * @param amount The amount of the quote, either an amount in, or an amount out\n   * @param tradeType The trade type, either exact input or exact output\n   * @param options The optional params including price limit and Quoter contract switch\n   * @returns The formatted calldata\n   */\n  public static quoteCallParameters<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amount: CurrencyAmount<TInput | TOutput>,\n    tradeType: TradeType,\n    options: QuoteOptions = {}\n  ): MethodParameters {\n    const singleHop = route.pools.length === 1\n    const quoteAmount: string = toHex(amount.quotient)\n    let calldata: string\n    const swapInterface: Interface = options.useQuoterV2 ? this.V2INTERFACE : this.V1INTERFACE\n\n    if (singleHop) {\n      const baseQuoteParams: BaseQuoteParams = {\n        tokenIn: route.tokenPath[0].address,\n        tokenOut: route.tokenPath[1].address,\n        fee: route.pools[0].fee,\n        sqrtPriceLimitX96: toHex(options?.sqrtPriceLimitX96 ?? 0)\n      }\n\n      const v2QuoteParams = {\n        ...baseQuoteParams,\n        ...(tradeType == TradeType.EXACT_INPUT ? { amountIn: quoteAmount } : { amount: quoteAmount })\n      }\n\n      const v1QuoteParams = [\n        baseQuoteParams.tokenIn,\n        baseQuoteParams.tokenOut,\n        baseQuoteParams.fee,\n        quoteAmount,\n        baseQuoteParams.sqrtPriceLimitX96\n      ]\n\n      const tradeTypeFunctionName =\n        tradeType === TradeType.EXACT_INPUT ? 'quoteExactInputSingle' : 'quoteExactOutputSingle'\n      calldata = swapInterface.encodeFunctionData(\n        tradeTypeFunctionName,\n        options.useQuoterV2 ? [v2QuoteParams] : v1QuoteParams\n      )\n    } else {\n      invariant(options?.sqrtPriceLimitX96 === undefined, 'MULTIHOP_PRICE_LIMIT')\n      const path: string = encodeRouteToPath(route, tradeType === TradeType.EXACT_OUTPUT)\n      const tradeTypeFunctionName = tradeType === TradeType.EXACT_INPUT ? 'quoteExactInput' : 'quoteExactOutput'\n      calldata = swapInterface.encodeFunctionData(tradeTypeFunctionName, [path, quoteAmount])\n    }\n    return {\n      calldata,\n      value: toHex(0)\n    }\n  }\n}\n","import { BigintIsh, Token, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { MethodParameters, toHex } from './utils/calldata'\nimport { defaultAbiCoder, Interface } from '@ethersproject/abi'\nimport IUniswapV3Staker from '@uniswap/v3-staker/artifacts/contracts/UniswapV3Staker.sol/UniswapV3Staker.json'\nimport { Pool } from './entities'\nimport { Multicall } from './multicall'\n\nexport type FullWithdrawOptions = ClaimOptions & WithdrawOptions\n/**\n * Represents a unique staking program.\n */\nexport interface IncentiveKey {\n  /**\n   * The token rewarded for participating in the staking program.\n   */\n  rewardToken: Token\n  /**\n   * The pool that the staked positions must provide in.\n   */\n  pool: Pool\n  /**\n   * The time when the incentive program begins.\n   */\n  startTime: BigintIsh\n  /**\n   * The time that the incentive program ends.\n   */\n  endTime: BigintIsh\n  /**\n   * The address which receives any remaining reward tokens at `endTime`.\n   */\n  refundee: string\n}\n\n/**\n * Options to specify when claiming rewards.\n */\nexport interface ClaimOptions {\n  /**\n   * The id of the NFT\n   */\n  tokenId: BigintIsh\n\n  /**\n   * Address to send rewards to.\n   */\n  recipient: string\n\n  /**\n   * The amount of `rewardToken` to claim. 0 claims all.\n   */\n  amount?: BigintIsh\n}\n/**\n * Options to specify when withdrawing a position.\n */\nexport interface WithdrawOptions {\n  /**\n   * Set when withdrawing. The position will be sent to `owner` on withdraw.\n   */\n  owner: string\n\n  /**\n   * Set when withdrawing. `data` is passed to `safeTransferFrom` when transferring the position from contract back to owner.\n   */\n  data?: string\n}\n\nexport abstract class Staker {\n  public static INTERFACE: Interface = new Interface(IUniswapV3Staker.abi)\n\n  protected constructor() {}\n  private static INCENTIVE_KEY_ABI =\n    'tuple(address rewardToken, address pool, uint256 startTime, uint256 endTime, address refundee)'\n\n  /**\n   *  To claim rewards, must unstake and then claim.\n   * @param incentiveKey The unique identifier of a staking program.\n   * @param options Options for producing the calldata to claim. Can't claim unless you unstake.\n   * @returns The calldatas for 'unstakeToken' and 'claimReward'.\n   */\n  private static encodeClaim(incentiveKey: IncentiveKey, options: ClaimOptions): string[] {\n    const calldatas: string[] = []\n    calldatas.push(\n      Staker.INTERFACE.encodeFunctionData('unstakeToken', [\n        this._encodeIncentiveKey(incentiveKey),\n        toHex(options.tokenId)\n      ])\n    )\n    const recipient: string = validateAndParseAddress(options.recipient)\n    const amount = options.amount ?? 0\n    calldatas.push(\n      Staker.INTERFACE.encodeFunctionData('claimReward', [incentiveKey.rewardToken.address, recipient, toHex(amount)])\n    )\n    return calldatas\n  }\n\n  /**\n   *\n   * Note:  A `tokenId` can be staked in many programs but to claim rewards and continue the program you must unstake, claim, and then restake.\n   * @param incentiveKeys An IncentiveKey or array of IncentiveKeys that `tokenId` is staked in.\n   * Input an array of IncentiveKeys to claim rewards for each program.\n   * @param options ClaimOptions to specify tokenId, recipient, and amount wanting to collect.\n   * Note that you can only specify one amount and one recipient across the various programs if you are collecting from multiple programs at once.\n   * @returns\n   */\n  public static collectRewards(incentiveKeys: IncentiveKey | IncentiveKey[], options: ClaimOptions): MethodParameters {\n    incentiveKeys = Array.isArray(incentiveKeys) ? incentiveKeys : [incentiveKeys]\n    let calldatas: string[] = []\n\n    for (let i = 0; i < incentiveKeys.length; i++) {\n      // the unique program tokenId is staked in\n      const incentiveKey = incentiveKeys[i]\n      // unstakes and claims for the unique program\n      calldatas = calldatas.concat(this.encodeClaim(incentiveKey, options))\n      // re-stakes the position for the unique program\n      calldatas.push(\n        Staker.INTERFACE.encodeFunctionData('stakeToken', [\n          this._encodeIncentiveKey(incentiveKey),\n          toHex(options.tokenId)\n        ])\n      )\n    }\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(0)\n    }\n  }\n\n  /**\n   *\n   * @param incentiveKeys A list of incentiveKeys to unstake from. Should include all incentiveKeys (unique staking programs) that `options.tokenId` is staked in.\n   * @param withdrawOptions Options for producing claim calldata and withdraw calldata. Can't withdraw without unstaking all programs for `tokenId`.\n   * @returns Calldata for unstaking, claiming, and withdrawing.\n   */\n  public static withdrawToken(\n    incentiveKeys: IncentiveKey | IncentiveKey[],\n    withdrawOptions: FullWithdrawOptions\n  ): MethodParameters {\n    let calldatas: string[] = []\n\n    incentiveKeys = Array.isArray(incentiveKeys) ? incentiveKeys : [incentiveKeys]\n\n    const claimOptions = {\n      tokenId: withdrawOptions.tokenId,\n      recipient: withdrawOptions.recipient,\n      amount: withdrawOptions.amount\n    }\n\n    for (let i = 0; i < incentiveKeys.length; i++) {\n      const incentiveKey = incentiveKeys[i]\n      calldatas = calldatas.concat(this.encodeClaim(incentiveKey, claimOptions))\n    }\n    const owner = validateAndParseAddress(withdrawOptions.owner)\n    calldatas.push(\n      Staker.INTERFACE.encodeFunctionData('withdrawToken', [\n        toHex(withdrawOptions.tokenId),\n        owner,\n        withdrawOptions.data ? withdrawOptions.data : toHex(0)\n      ])\n    )\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(0)\n    }\n  }\n\n  /**\n   *\n   * @param incentiveKeys A single IncentiveKey or array of IncentiveKeys to be encoded and used in the data parameter in `safeTransferFrom`\n   * @returns An IncentiveKey as a string\n   */\n  public static encodeDeposit(incentiveKeys: IncentiveKey | IncentiveKey[]): string {\n    incentiveKeys = Array.isArray(incentiveKeys) ? incentiveKeys : [incentiveKeys]\n    let data: string\n\n    if (incentiveKeys.length > 1) {\n      const keys = []\n      for (let i = 0; i < incentiveKeys.length; i++) {\n        const incentiveKey = incentiveKeys[i]\n        keys.push(this._encodeIncentiveKey(incentiveKey))\n      }\n      data = defaultAbiCoder.encode([`${Staker.INCENTIVE_KEY_ABI}[]`], [keys])\n    } else {\n      data = defaultAbiCoder.encode([Staker.INCENTIVE_KEY_ABI], [this._encodeIncentiveKey(incentiveKeys[0])])\n    }\n    return data\n  }\n  /**\n   *\n   * @param incentiveKey An `IncentiveKey` which represents a unique staking program.\n   * @returns An encoded IncentiveKey to be read by ethers\n   */\n  private static _encodeIncentiveKey(incentiveKey: IncentiveKey): {} {\n    const { token0, token1, fee } = incentiveKey.pool\n    const refundee = validateAndParseAddress(incentiveKey.refundee)\n    return {\n      rewardToken: incentiveKey.rewardToken.address,\n      pool: Pool.getAddress(token0, token1, fee),\n      startTime: toHex(incentiveKey.startTime),\n      endTime: toHex(incentiveKey.endTime),\n      refundee\n    }\n  }\n}\n","import { Interface } from '@ethersproject/abi'\nimport { BigintIsh, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport { Trade } from './entities/trade'\nimport { ADDRESS_ZERO } from './constants'\nimport { PermitOptions, SelfPermit } from './selfPermit'\nimport { encodeRouteToPath } from './utils'\nimport { MethodParameters, toHex } from './utils/calldata'\nimport ISwapRouter from '@uniswap/v3-periphery/artifacts/contracts/SwapRouter.sol/SwapRouter.json'\nimport { Multicall } from './multicall'\nimport { FeeOptions, Payments } from './payments'\n\n/**\n * Options for producing the arguments to send calls to the router.\n */\nexport interface SwapOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  slippageTolerance: Percent\n\n  /**\n   * The account that should receive the output.\n   */\n  recipient: string\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh\n\n  /**\n   * The optional permit parameters for spending the input.\n   */\n  inputTokenPermit?: PermitOptions\n\n  /**\n   * The optional price limit for the trade.\n   */\n  sqrtPriceLimitX96?: BigintIsh\n\n  /**\n   * Optional information for taking a fee on output.\n   */\n  fee?: FeeOptions\n}\n\n/**\n * Represents the Uniswap V3 SwapRouter, and has static methods for helping execute trades.\n */\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(ISwapRouter.abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trades: Trade<Currency, Currency, TradeType> | Trade<Currency, Currency, TradeType>[],\n    options: SwapOptions\n  ): MethodParameters {\n    if (!Array.isArray(trades)) {\n      trades = [trades]\n    }\n\n    const sampleTrade = trades[0]\n    const tokenIn = sampleTrade.inputAmount.currency.wrapped\n    const tokenOut = sampleTrade.outputAmount.currency.wrapped\n\n    // All trades should have the same starting and ending token.\n    invariant(\n      trades.every(trade => trade.inputAmount.currency.wrapped.equals(tokenIn)),\n      'TOKEN_IN_DIFF'\n    )\n    invariant(\n      trades.every(trade => trade.outputAmount.currency.wrapped.equals(tokenOut)),\n      'TOKEN_OUT_DIFF'\n    )\n\n    const calldatas: string[] = []\n\n    const ZERO_IN: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(trades[0].inputAmount.currency, 0)\n    const ZERO_OUT: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(trades[0].outputAmount.currency, 0)\n\n    const totalAmountOut: CurrencyAmount<Currency> = trades.reduce(\n      (sum, trade) => sum.add(trade.minimumAmountOut(options.slippageTolerance)),\n      ZERO_OUT\n    )\n\n    // flag for whether a refund needs to happen\n    const mustRefund = sampleTrade.inputAmount.currency.isNative && sampleTrade.tradeType === TradeType.EXACT_OUTPUT\n    const inputIsNative = sampleTrade.inputAmount.currency.isNative\n    // flags for whether funds should be send first to the router\n    const outputIsNative = sampleTrade.outputAmount.currency.isNative\n    const routerMustCustody = outputIsNative || !!options.fee\n\n    const totalValue: CurrencyAmount<Currency> = inputIsNative\n      ? trades.reduce((sum, trade) => sum.add(trade.maximumAmountIn(options.slippageTolerance)), ZERO_IN)\n      : ZERO_IN\n\n    // encode permit if necessary\n    if (options.inputTokenPermit) {\n      invariant(sampleTrade.inputAmount.currency.isToken, 'NON_TOKEN_PERMIT')\n      calldatas.push(SelfPermit.encodePermit(sampleTrade.inputAmount.currency, options.inputTokenPermit))\n    }\n\n    const recipient: string = validateAndParseAddress(options.recipient)\n    const deadline = toHex(options.deadline)\n\n    for (const trade of trades) {\n      for (const { route, inputAmount, outputAmount } of trade.swaps) {\n        const amountIn: string = toHex(trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient)\n        const amountOut: string = toHex(trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient)\n\n        // flag for whether the trade is single hop or not\n        const singleHop = route.pools.length === 1\n\n        if (singleHop) {\n          if (trade.tradeType === TradeType.EXACT_INPUT) {\n            const exactInputSingleParams = {\n              tokenIn: route.tokenPath[0].address,\n              tokenOut: route.tokenPath[1].address,\n              fee: route.pools[0].fee,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountIn,\n              amountOutMinimum: amountOut,\n              sqrtPriceLimitX96: toHex(options.sqrtPriceLimitX96 ?? 0)\n            }\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInputSingle', [exactInputSingleParams]))\n          } else {\n            const exactOutputSingleParams = {\n              tokenIn: route.tokenPath[0].address,\n              tokenOut: route.tokenPath[1].address,\n              fee: route.pools[0].fee,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountOut,\n              amountInMaximum: amountIn,\n              sqrtPriceLimitX96: toHex(options.sqrtPriceLimitX96 ?? 0)\n            }\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutputSingle', [exactOutputSingleParams]))\n          }\n        } else {\n          invariant(options.sqrtPriceLimitX96 === undefined, 'MULTIHOP_PRICE_LIMIT')\n\n          const path: string = encodeRouteToPath(route, trade.tradeType === TradeType.EXACT_OUTPUT)\n\n          if (trade.tradeType === TradeType.EXACT_INPUT) {\n            const exactInputParams = {\n              path,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountIn,\n              amountOutMinimum: amountOut\n            }\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInput', [exactInputParams]))\n          } else {\n            const exactOutputParams = {\n              path,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountOut,\n              amountInMaximum: amountIn\n            }\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutput', [exactOutputParams]))\n          }\n        }\n      }\n    }\n\n    // unwrap\n    if (routerMustCustody) {\n      if (!!options.fee) {\n        if (outputIsNative) {\n          calldatas.push(Payments.encodeUnwrapWETH9(totalAmountOut.quotient, recipient, options.fee))\n        } else {\n          calldatas.push(\n            Payments.encodeSweepToken(\n              sampleTrade.outputAmount.currency.wrapped,\n              totalAmountOut.quotient,\n              recipient,\n              options.fee\n            )\n          )\n        }\n      } else {\n        calldatas.push(Payments.encodeUnwrapWETH9(totalAmountOut.quotient, recipient))\n      }\n    }\n\n    // refund\n    if (mustRefund) {\n      calldatas.push(Payments.encodeRefundETH())\n    }\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(totalValue.quotient)\n    }\n  }\n}\n","<template>\r\n  <div></div>\r\n</template>\r\n\r\n<script>\r\nimport * as univ3 from \"@uniswap/v3-sdk\";\r\nimport * as unisdk from \"@uniswap/sdk-core\";\r\nexport default {\r\n  name: \"uni\",\r\n  data() {\r\n    return {};\r\n  },\r\n  props: [],\r\n  components: {},\r\n  created() {},\r\n  mounted() {\r\n    console.log(unisdk);\r\n    // const currentPoolAddress = univ3.computePoolAddress({\r\n    //   factoryAddress: unisdk.POOL_FACTORY_CONTRACT_ADDRESS,\r\n    //   tokenA: unisdk.CurrentConfig.tokens.in,\r\n    //   tokenB: unisdk.CurrentConfig.tokens.out,\r\n    //   fee: unisdk.CurrentConfig.tokens.poolFee,\r\n    // });\r\n    // console.log(currentPoolAddress);\r\n\r\n    // const poolContract = new this.$ethers.Contract(\r\n    //   currentPoolAddress,\r\n    //   IUniswapV3PoolABI.abi,\r\n    //   getProvider()\r\n    // );\r\n    // console.log(poolContract);\r\n  },\r\n  methods: {},\r\n};\r\n</script>\r\n\r\n<style lang=\"css\" scoped></style>\r\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./uni.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./uni.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./uni.vue?vue&type=template&id=67809a60&scoped=true&\"\nimport script from \"./uni.vue?vue&type=script&lang=js&\"\nexport * from \"./uni.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"67809a60\",\n  null\n  \n)\n\nexport default component.exports","/*\r\n *  big.js v5.2.2\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  https://github.com/MikeMcl/big.js/LICENCE\r\n */\r\n;(function (GLOBAL) {\r\n  'use strict';\r\n  var Big,\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n    // The default values below must be integers within the stated ranges.\r\n\r\n    /*\r\n     * The maximum number of decimal places (DP) of the results of operations involving division:\r\n     * div and sqrt, and pow with negative exponents.\r\n     */\r\n    DP = 20,          // 0 to MAX_DP\r\n\r\n    /*\r\n     * The rounding mode (RM) used when rounding to the above decimal places.\r\n     *\r\n     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n     *  3  Away from zero.                                  (ROUND_UP)\r\n     */\r\n    RM = 1,             // 0, 1, 2 or 3\r\n\r\n    // The maximum value of DP and Big.DP.\r\n    MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n    // The maximum magnitude of the exponent argument to the pow method.\r\n    MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n    /*\r\n     * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n     * (JavaScript numbers: -7)\r\n     * -1000000 is the minimum recommended exponent value of a Big.\r\n     */\r\n    NE = -7,            // 0 to -1000000\r\n\r\n    /*\r\n     * The positive exponent (PE) at and above which toString returns exponential notation.\r\n     * (JavaScript numbers: 21)\r\n     * 1000000 is the maximum recommended exponent value of a Big.\r\n     * (This limit is not enforced or checked.)\r\n     */\r\n    PE = 21,            // 0 to 1000000\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n    // Error messages.\r\n    NAME = '[big.js] ',\r\n    INVALID = NAME + 'Invalid ',\r\n    INVALID_DP = INVALID + 'decimal places',\r\n    INVALID_RM = INVALID + 'rounding mode',\r\n    DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n    // The shared prototype object.\r\n    P = {},\r\n    UNDEFINED = void 0,\r\n    NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n  /*\r\n   * Create and return a Big constructor.\r\n   *\r\n   */\r\n  function _Big_() {\r\n\r\n    /*\r\n     * The Big constructor and exported function.\r\n     * Create and return a new instance of a Big number object.\r\n     *\r\n     * n {number|string|Big} A numeric value.\r\n     */\r\n    function Big(n) {\r\n      var x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n      // Duplicate.\r\n      if (n instanceof Big) {\r\n        x.s = n.s;\r\n        x.e = n.e;\r\n        x.c = n.c.slice();\r\n      } else {\r\n        parse(x, n);\r\n      }\r\n\r\n      /*\r\n       * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\r\n       * points to Object.\r\n       */\r\n      x.constructor = Big;\r\n    }\r\n\r\n    Big.prototype = P;\r\n    Big.DP = DP;\r\n    Big.RM = RM;\r\n    Big.NE = NE;\r\n    Big.PE = PE;\r\n    Big.version = '5.2.2';\r\n\r\n    return Big;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the number or string value passed to a Big constructor.\r\n   *\r\n   * x {Big} A Big number instance.\r\n   * n {number|string} A numeric value.\r\n   */\r\n  function parse(x, n) {\r\n    var e, i, nl;\r\n\r\n    // Minus zero?\r\n    if (n === 0 && 1 / n < 0) n = '-0';\r\n    else if (!NUMERIC.test(n += '')) throw Error(INVALID + 'number');\r\n\r\n    // Determine sign.\r\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n    // Decimal point?\r\n    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = n.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +n.slice(i + 1);\r\n      n = n.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = n.length;\r\n    }\r\n\r\n    nl = n.length;\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n    if (i == nl) {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    } else {\r\n\r\n      // Determine trailing zeros.\r\n      for (; nl > 0 && n.charAt(--nl) == '0';);\r\n      x.e = e - i - 1;\r\n      x.c = [];\r\n\r\n      // Convert string to array of digits without leading/trailing zeros.\r\n      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round Big x to a maximum of dp decimal places using rounding mode rm.\r\n   * Called by stringify, P.div, P.round and P.sqrt.\r\n   *\r\n   * x {Big} The Big to round.\r\n   * dp {number} Integer, 0 to MAX_DP inclusive.\r\n   * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\r\n   * [more] {boolean} Whether the result of division was truncated.\r\n   */\r\n  function round(x, dp, rm, more) {\r\n    var xc = x.c,\r\n      i = x.e + dp + 1;\r\n\r\n    if (i < xc.length) {\r\n      if (rm === 1) {\r\n\r\n        // xc[i] is the digit after the digit that may be rounded up.\r\n        more = xc[i] >= 5;\r\n      } else if (rm === 2) {\r\n        more = xc[i] > 5 || xc[i] == 5 &&\r\n          (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\r\n      } else if (rm === 3) {\r\n        more = more || !!xc[0];\r\n      } else {\r\n        more = false;\r\n        if (rm !== 0) throw Error(INVALID_RM);\r\n      }\r\n\r\n      if (i < 1) {\r\n        xc.length = 1;\r\n\r\n        if (more) {\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          x.e = -dp;\r\n          xc[0] = 1;\r\n        } else {\r\n\r\n          // Zero.\r\n          xc[0] = x.e = 0;\r\n        }\r\n      } else {\r\n\r\n        // Remove any digits after the required decimal places.\r\n        xc.length = i--;\r\n\r\n        // Round up?\r\n        if (more) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up.\r\n          for (; ++xc[i] > 9;) {\r\n            xc[i] = 0;\r\n            if (!i--) {\r\n              ++x.e;\r\n              xc.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; !xc[--i];) xc.pop();\r\n      }\r\n    } else if (rm < 0 || rm > 3 || rm !== ~~rm) {\r\n      throw Error(INVALID_RM);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of Big x in normal or exponential notation.\r\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n   *\r\n   * x {Big}\r\n   * id? {number} Caller id.\r\n   *         1 toExponential\r\n   *         2 toFixed\r\n   *         3 toPrecision\r\n   *         4 valueOf\r\n   * n? {number|undefined} Caller's argument.\r\n   * k? {number|undefined}\r\n   */\r\n  function stringify(x, id, n, k) {\r\n    var e, s,\r\n      Big = x.constructor,\r\n      z = !x.c[0];\r\n\r\n    if (n !== UNDEFINED) {\r\n      if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\r\n        throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\r\n      }\r\n\r\n      x = new Big(x);\r\n\r\n      // The index of the digit that may be rounded up.\r\n      n = k - x.e;\r\n\r\n      // Round?\r\n      if (x.c.length > ++k) round(x, n, Big.RM);\r\n\r\n      // toFixed: recalculate k as x.e may have changed if value rounded up.\r\n      if (id == 2) k = x.e + n + 1;\r\n\r\n      // Append zeros?\r\n      for (; x.c.length < k;) x.c.push(0);\r\n    }\r\n\r\n    e = x.e;\r\n    s = x.c.join('');\r\n    n = s.length;\r\n\r\n    // Exponential notation?\r\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\r\n      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n    // Normal notation.\r\n    } else if (e < 0) {\r\n      for (; ++e;) s = '0' + s;\r\n      s = '0.' + s;\r\n    } else if (e > 0) {\r\n      if (++e > n) for (e -= n; e--;) s += '0';\r\n      else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);\r\n    } else if (n > 1) {\r\n      s = s.charAt(0) + '.' + s.slice(1);\r\n    }\r\n\r\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\r\n  }\r\n\r\n\r\n  // Prototype/instance methods\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the absolute value of this Big.\r\n   */\r\n  P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return 1 if the value of this Big is greater than the value of Big y,\r\n   *       -1 if the value of this Big is less than the value of Big y, or\r\n   *        0 if they have the same value.\r\n  */\r\n  P.cmp = function (y) {\r\n    var isneg,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new x.constructor(y)).c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    isneg = i < 0;\r\n\r\n    // Compare exponents.\r\n    if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = -1; ++i < j;) {\r\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.div = function (y) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      a = x.c,                  // dividend\r\n      b = (y = new Big(y)).c,   // divisor\r\n      k = x.s == y.s ? 1 : -1,\r\n      dp = Big.DP;\r\n\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\r\n\r\n    // Divisor is zero?\r\n    if (!b[0]) throw Error(DIV_BY_ZERO);\r\n\r\n    // Dividend is 0? Return +-0.\r\n    if (!a[0]) return new Big(k * 0);\r\n\r\n    var bl, bt, n, cmp, ri,\r\n      bz = b.slice(),\r\n      ai = bl = b.length,\r\n      al = a.length,\r\n      r = a.slice(0, bl),   // remainder\r\n      rl = r.length,\r\n      q = y,                // quotient\r\n      qc = q.c = [],\r\n      qi = 0,\r\n      d = dp + (q.e = x.e - y.e) + 1;    // number of digits of the result\r\n\r\n    q.s = k;\r\n    k = d < 0 ? 0 : d;\r\n\r\n    // Create version of divisor with leading zero.\r\n    bz.unshift(0);\r\n\r\n    // Add zeros to make remainder as long as divisor.\r\n    for (; rl++ < bl;) r.push(0);\r\n\r\n    do {\r\n\r\n      // n is how many times the divisor goes into current remainder.\r\n      for (n = 0; n < 10; n++) {\r\n\r\n        // Compare divisor and remainder.\r\n        if (bl != (rl = r.length)) {\r\n          cmp = bl > rl ? 1 : -1;\r\n        } else {\r\n          for (ri = -1, cmp = 0; ++ri < bl;) {\r\n            if (b[ri] != r[ri]) {\r\n              cmp = b[ri] > r[ri] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        // If divisor < remainder, subtract divisor from remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Remainder can't be more than 1 digit longer than divisor.\r\n          // Equalise lengths using divisor with extra leading zero?\r\n          for (bt = rl == bl ? b : bz; rl;) {\r\n            if (r[--rl] < bt[rl]) {\r\n              ri = rl;\r\n              for (; ri && !r[--ri];) r[ri] = 9;\r\n              --r[ri];\r\n              r[rl] += 10;\r\n            }\r\n            r[rl] -= bt[rl];\r\n          }\r\n\r\n          for (; !r[0];) r.shift();\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Add the digit n to the result array.\r\n      qc[qi++] = cmp ? n : ++n;\r\n\r\n      // Update the remainder.\r\n      if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n      else r = [a[ai]];\r\n\r\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n    if (!qc[0] && qi != 1) {\r\n\r\n      // There can't be more than one zero.\r\n      qc.shift();\r\n      q.e--;\r\n    }\r\n\r\n    // Round?\r\n    if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);\r\n\r\n    return q;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n   */\r\n  P.eq = function (y) {\r\n    return !this.cmp(y);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n   * false.\r\n   */\r\n  P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.gte = function (y) {\r\n    return this.cmp(y) > -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n   */\r\n  P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var i, j, t, xlty,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xc = x.c.slice(),\r\n      xe = x.e,\r\n      yc = y.c,\r\n      ye = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n\r\n      // y is non-zero? x is non-zero? Or both are zero.\r\n      return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\r\n    }\r\n\r\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n    if (a = xe - ye) {\r\n\r\n      if (xlty = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (b = a; b--;) t.push(0);\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n        if (xc[b] != yc[b]) {\r\n          xlty = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xlty) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    /*\r\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n     * needs to start at yc.length.\r\n     */\r\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n    // Subtract yc from xc.\r\n    for (b = i; j > a;) {\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i];) xc[i] = 9;\r\n        --xc[i];\r\n        xc[j] += 10;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xc[--b] === 0;) xc.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] === 0;) {\r\n      xc.shift();\r\n      --ye;\r\n    }\r\n\r\n    if (!xc[0]) {\r\n\r\n      // n - n = +0\r\n      y.s = 1;\r\n\r\n      // Result must be zero.\r\n      xc = [ye = 0];\r\n    }\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n   */\r\n  P.mod = function (y) {\r\n    var ygtx,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    if (!y.c[0]) throw Error(DIV_BY_ZERO);\r\n\r\n    x.s = y.s = 1;\r\n    ygtx = y.cmp(x) == 1;\r\n    x.s = a;\r\n    y.s = b;\r\n\r\n    if (ygtx) return new Big(x);\r\n\r\n    a = Big.DP;\r\n    b = Big.RM;\r\n    Big.DP = Big.RM = 0;\r\n    x = x.div(y);\r\n    Big.DP = a;\r\n    Big.RM = b;\r\n\r\n    return this.minus(x.times(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e,\r\n      xc = x.c,\r\n      ye = y.e,\r\n      yc = y.c;\r\n\r\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\r\n    if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);\r\n\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    // Note: reverse faster than unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--;) t.push(0);\r\n      t.reverse();\r\n    }\r\n\r\n    // Point xc to the longer array.\r\n    if (xc.length - yc.length < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n    }\r\n\r\n    a = yc.length;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n    for (b = 0; a; xc[a] %= 10) b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n    if (b) {\r\n      xc.unshift(b);\r\n      ++ye;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (a = xc.length; xc[--a] === 0;) xc.pop();\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a Big whose value is the value of this Big raised to the power n.\r\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n   * mode Big.RM.\r\n   *\r\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n   */\r\n  P.pow = function (n) {\r\n    var x = this,\r\n      one = new x.constructor(1),\r\n      y = one,\r\n      isneg = n < 0;\r\n\r\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');\r\n    if (isneg) n = -n;\r\n\r\n    for (;;) {\r\n      if (n & 1) y = y.times(x);\r\n      n >>= 1;\r\n      if (!n) break;\r\n      x = x.times(x);\r\n    }\r\n\r\n    return isneg ? one.div(y) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded using rounding mode rm\r\n   * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\r\n   * multiple of 10**-dp.\r\n   * If dp is not specified, round to 0 decimal places.\r\n   * If rm is not specified, use Big.RM.\r\n   *\r\n   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n   * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\r\n   */\r\n  P.round = function (dp, rm) {\r\n    var Big = this.constructor;\r\n    if (dp === UNDEFINED) dp = 0;\r\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);\r\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.sqrt = function () {\r\n    var r, c, t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      s = x.s,\r\n      e = x.e,\r\n      half = new Big(0.5);\r\n\r\n    // Zero?\r\n    if (!x.c[0]) return new Big(x);\r\n\r\n    // Negative?\r\n    if (s < 0) throw Error(NAME + 'No square root');\r\n\r\n    // Estimate.\r\n    s = Math.sqrt(x + '');\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n    if (s === 0 || s === 1 / 0) {\r\n      c = x.c.join('');\r\n      if (!(c.length + e & 1)) c += '0';\r\n      s = Math.sqrt(c);\r\n      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n      r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n    } else {\r\n      r = new Big(s);\r\n    }\r\n\r\n    e = r.e + (Big.DP += 4);\r\n\r\n    // Newton-Raphson iteration.\r\n    do {\r\n      t = r;\r\n      r = half.times(t.plus(x.div(t)));\r\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n    return round(r, Big.DP -= 4, Big.RM);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big times the value of Big y.\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var c,\r\n      x = this,\r\n      Big = x.constructor,\r\n      xc = x.c,\r\n      yc = (y = new Big(y)).c,\r\n      a = xc.length,\r\n      b = yc.length,\r\n      i = x.e,\r\n      j = y.e;\r\n\r\n    // Determine sign of result.\r\n    y.s = x.s == y.s ? 1 : -1;\r\n\r\n    // Return signed 0 if either 0.\r\n    if (!xc[0] || !yc[0]) return new Big(y.s * 0);\r\n\r\n    // Initialise exponent of result as x.e + y.e.\r\n    y.e = i + j;\r\n\r\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n    if (a < b) {\r\n      c = xc;\r\n      xc = yc;\r\n      yc = c;\r\n      j = a;\r\n      a = b;\r\n      b = j;\r\n    }\r\n\r\n    // Initialise coefficient array of result with zeros.\r\n    for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n    // Multiply.\r\n\r\n    // i is initially xc.length.\r\n    for (i = b; i--;) {\r\n      b = 0;\r\n\r\n      // a is yc.length.\r\n      for (j = a + i; j > i;) {\r\n\r\n        // Current sum of products at this digit position, plus carry.\r\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n        c[j--] = b % 10;\r\n\r\n        // carry\r\n        b = b / 10 | 0;\r\n      }\r\n\r\n      c[j] = (c[j] + b) % 10;\r\n    }\r\n\r\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n    if (b) ++y.e;\r\n    else c.shift();\r\n\r\n    // Remove trailing zeros.\r\n    for (i = c.length; !c[--i];) c.pop();\r\n    y.c = c;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in exponential notation to dp fixed decimal\r\n   * places and rounded using Big.RM.\r\n   *\r\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n   */\r\n  P.toExponential = function (dp) {\r\n    return stringify(this, 1, dp, dp);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in normal notation to dp fixed decimal\r\n   * places and rounded using Big.RM.\r\n   *\r\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   */\r\n  P.toFixed = function (dp) {\r\n    return stringify(this, 2, dp, this.e + dp);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big rounded to sd significant digits using\r\n   * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * sd {number} Integer, 1 to MAX_DP inclusive.\r\n   */\r\n  P.toPrecision = function (sd) {\r\n    return stringify(this, 3, sd, sd - 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Omit the sign for negative zero.\r\n   */\r\n  P.toString = function () {\r\n    return stringify(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Include the sign for negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return stringify(this, 4);\r\n  };\r\n\r\n\r\n  // Export\r\n\r\n\r\n  Big = _Big_();\r\n\r\n  Big['default'] = Big.Big = Big;\r\n\r\n  //AMD.\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function () { return Big; });\r\n\r\n  // Node and other CommonJS-like environments that support module.exports.\r\n  } else if (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = Big;\r\n\r\n  //Browser.\r\n  } else {\r\n    GLOBAL.Big = Big;\r\n  }\r\n})(this);\r\n","/*! decimal.js-light v2.5.1 https://github.com/MikeMcl/decimal.js-light/LICENCE */\r\n;(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*\r\n   *  decimal.js-light v2.5.1\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js-light\r\n   *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Expat Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  var MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    Decimal = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed during run-time using `Decimal.config`.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,\r\n      // `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -MAX_E\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to MAX_E\r\n\r\n      // The natural logarithm of 10.\r\n      // 115 digits\r\n      LN10: '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286'\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    exponentOutOfRange = decimalError + 'Exponent out of range: ',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    ONE,\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n    MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE),    // 1286742750677284\r\n\r\n    // Decimal.prototype object\r\n    P = {};\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue                       abs\r\n   *  comparedTo                          cmp\r\n   *  decimalPlaces                       dp\r\n   *  dividedBy                           div\r\n   *  dividedToIntegerBy                  idiv\r\n   *  equals                              eq\r\n   *  exponent\r\n   *  greaterThan                         gt\r\n   *  greaterThanOrEqualTo                gte\r\n   *  isInteger                           isint\r\n   *  isNegative                          isneg\r\n   *  isPositive                          ispos\r\n   *  isZero\r\n   *  lessThan                            lt\r\n   *  lessThanOrEqualTo                   lte\r\n   *  logarithm                           log\r\n   *  minus                               sub\r\n   *  modulo                              mod\r\n   *  naturalExponential                  exp\r\n   *  naturalLogarithm                    ln\r\n   *  negated                             neg\r\n   *  plus                                add\r\n   *  precision                           sd\r\n   *  squareRoot                          sqrt\r\n   *  times                               mul\r\n   *  toDecimalPlaces                     todp\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toInteger                           toint\r\n   *  toNumber\r\n   *  toPower                             pow\r\n   *  toPrecision\r\n   *  toSignificantDigits                 tosd\r\n   *  toString\r\n   *  valueOf                             val\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this;\r\n\r\n    y = new x.constructor(y);\r\n\r\n    // Signs differ?\r\n    if (x.s !== y.s) return x.s || -y.s;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ x.s < 0 ? 1 : -1;\r\n\r\n    xdL = x.d.length;\r\n    ydL = y.d.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (x.d[i] !== y.d[i]) return x.d[i] > y.d[i] ^ x.s < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ x.s < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var x = this,\r\n      w = x.d.length - 1,\r\n      dp = (w - x.e) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = x.d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) dp--;\r\n\r\n    return dp < 0 ? 0 : dp;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, truncated to `precision` significant digits.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return round(divide(x, new Ctor(y), 0, 1), Ctor.precision);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return !this.cmp(y);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the (base 10) exponent value of this Decimal (this.e is the base 10000000 exponent).\r\n   *\r\n   */\r\n  P.exponent = function () {\r\n    return getBase10Exponent(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    return this.cmp(y) >= 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isint = function () {\r\n    return this.e > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isneg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.ispos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return this.s === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   * If no base is specified, return log[10](x).\r\n   *\r\n   * log[base](x) = ln(x) / ln(base)\r\n   *\r\n   * The maximum error of the result is 1 ulp (unit in the last place).\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var r,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      wpr = pr + 5;\r\n\r\n    // Default base is 10.\r\n    if (base === void 0) {\r\n      base = new Ctor(10);\r\n    } else {\r\n      base = new Ctor(base);\r\n\r\n      // log[-b](x) = NaN\r\n      // log[0](x)  = NaN\r\n      // log[1](x)  = NaN\r\n      if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + 'NaN');\r\n    }\r\n\r\n    // log[b](-x) = NaN\r\n    // log[b](0) = -Infinity\r\n    if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n    // log[b](1) = 0\r\n    if (x.eq(ONE)) return new Ctor(0);\r\n\r\n    external = false;\r\n    r = divide(ln(x, wpr), ln(base, wpr), wpr);\r\n    external = true;\r\n\r\n    return round(r, pr);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var x = this;\r\n    y = new x.constructor(y);\r\n    return x.s == y.s ? subtract(x, y) : add(x, (y.s = -y.s, y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // x % 0 = NaN\r\n    if (!y.s) throw Error(decimalError + 'NaN');\r\n\r\n    // Return x if x is 0.\r\n    if (!x.s) return round(new Ctor(x), pr);\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n    q = divide(x, y, 0, 1).times(y);\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, truncated to `precision`\r\n   * significant digits.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return exp(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * truncated to `precision` significant digits.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return ln(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s || 0;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var x = this;\r\n    y = new x.constructor(y);\r\n    return x.s == y.s ? add(x, y) : subtract(x, (y.s = -y.s, y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var e, sd, w,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    e = getBase10Exponent(x) + 1;\r\n    w = x.d.length - 1;\r\n    sd = w * LOG_BASE + 1;\r\n    w = x.d[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) sd--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = x.d[0]; w >= 10; w /= 10) sd++;\r\n    }\r\n\r\n    return z && e > sd ? e : sd;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, truncated to `precision`\r\n   * significant digits.\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var e, n, pr, r, s, t, wpr,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative or zero?\r\n    if (x.s < 1) {\r\n      if (!x.s) return new Ctor(0);\r\n\r\n      // sqrt(-x) = NaN\r\n      throw Error(decimalError + 'NaN');\r\n    }\r\n\r\n    e = getBase10Exponent(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    pr = Ctor.precision;\r\n    s = wpr = pr + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, wpr + 2)).times(0.5);\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === (n = digitsToString(r.d)).slice(0, wpr)) {\r\n        n = n.slice(wpr - 3, wpr + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (s == wpr && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          round(t, pr + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        } else if (n != '9999') {\r\n          break;\r\n        }\r\n\r\n        wpr += 4;\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return round(r, pr);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal times `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    // Return 0 if either is 0.\r\n    if (!x.s || !y.s) return new Ctor(0);\r\n\r\n    y.s *= x.s;\r\n    e = x.e + y.e;\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = e;\r\n\r\n    return external ? round(y, Ctor.precision) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.todp = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return round(x, dp + getBase10Exponent(x) + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = toString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = round(new Ctor(x), dp + 1, rm);\r\n      str = toString(x, true, dp + 1);\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) return toString(x);\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = round(new Ctor(x), dp + getBase10Exponent(x) + 1, rm);\r\n    str = toString(y.abs(), false, dp + getBase10Exponent(y) + 1);\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isneg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.toInteger = P.toint = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return round(new Ctor(x), getBase10Exponent(x) + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`,\r\n   * truncated to `precision` significant digits.\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * The maximum error is 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, sign, yIsInt,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      guard = 12,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // pow(x, 0) = 1\r\n    if (!y.s) return new Ctor(ONE);\r\n\r\n    x = new Ctor(x);\r\n\r\n    // pow(0, y > 0) = 0\r\n    // pow(0, y < 0) = Infinity\r\n    if (!x.s) {\r\n      if (y.s < 1) throw Error(decimalError + 'Infinity');\r\n      return x;\r\n    }\r\n\r\n    // pow(1, y) = 1\r\n    if (x.eq(ONE)) return x;\r\n\r\n    pr = Ctor.precision;\r\n\r\n    // pow(x, 1) = x\r\n    if (y.eq(ONE)) return round(x, pr);\r\n\r\n    e = y.e;\r\n    k = y.d.length - 1;\r\n    yIsInt = e >= k;\r\n    sign = x.s;\r\n\r\n    if (!yIsInt) {\r\n\r\n      // pow(x < 0, y non-integer) = NaN\r\n      if (sign < 0) throw Error(decimalError + 'NaN');\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = new Ctor(ONE);\r\n\r\n      // Max k of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      e = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n      external = false;\r\n\r\n      for (;;) {\r\n        if (k % 2) {\r\n          r = r.times(x);\r\n          truncate(r.d, e);\r\n        }\r\n\r\n        k = mathfloor(k / 2);\r\n        if (k === 0) break;\r\n\r\n        x = x.times(x);\r\n        truncate(x.d, e);\r\n      }\r\n\r\n      external = true;\r\n\r\n      return y.s < 0 ? new Ctor(ONE).div(r) : round(r, pr);\r\n    }\r\n\r\n    // Result is negative if x is negative and the last digit of integer y is odd.\r\n    sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;\r\n\r\n    x.s = 1;\r\n    external = false;\r\n    r = y.times(ln(x, pr + guard));\r\n    external = true;\r\n    r = exp(r);\r\n    r.s = sign;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var e, str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      e = getBase10Exponent(x);\r\n      str = toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = round(new Ctor(x), sd, rm);\r\n      e = getBase10Exponent(x);\r\n      str = toString(x, sd <= e || e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.tosd = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return round(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = P.valueOf = P.val = P.toJSON = function () {\r\n    var x = this,\r\n      e = getBase10Exponent(x),\r\n      Ctor = x.constructor;\r\n\r\n    return toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n  };\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  add                 P.minus, P.plus\r\n   *  checkInt32          P.todp, P.toExponential, P.toFixed, P.toPrecision, P.tosd\r\n   *  digitsToString      P.log, P.sqrt, P.pow, toString, exp, ln\r\n   *  divide              P.div, P.idiv, P.log, P.mod, P.sqrt, exp, ln\r\n   *  exp                 P.exp, P.pow\r\n   *  getBase10Exponent   P.exponent, P.sd, P.toint, P.sqrt, P.todp, P.toFixed, P.toPrecision,\r\n   *                      P.toString, divide, round, toString, exp, ln\r\n   *  getLn10             P.log, ln\r\n   *  getZeroString       digitsToString, toString\r\n   *  ln                  P.log, P.ln, P.pow, exp\r\n   *  parseDecimal        Decimal\r\n   *  round               P.abs, P.idiv, P.log, P.minus, P.mod, P.neg, P.plus, P.toint, P.sqrt,\r\n   *                      P.times, P.todp, P.toExponential, P.toFixed, P.pow, P.toPrecision, P.tosd,\r\n   *                      divide, getLn10, exp, ln\r\n   *  subtract            P.minus, P.plus\r\n   *  toString            P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf\r\n   *  truncate            P.pow\r\n   *\r\n   *  Throws:             P.log, P.mod, P.sd, P.sqrt, P.pow,  checkInt32, divide, round,\r\n   *                      getLn10, exp, ln, parseDecimal, Decimal, config\r\n   */\r\n\r\n\r\n  function add(x, y) {\r\n    var carry, d, e, i, k, len, xd, yd,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    // If either is zero...\r\n    if (!x.s || !y.s) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!y.s) y = new Ctor(x);\r\n      return external ? round(y, pr) : y;\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    k = x.e;\r\n    e = y.e;\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = e;\r\n\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % BASE | 0;\r\n        carry = temp / BASE | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * BASE + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, dp) {\r\n      var cmp, e, i, k, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either 0?\r\n      if (!x.s) return new Ctor(x);\r\n      if (!y.s) throw Error(decimalError + 'Division by zero');\r\n\r\n      e = x.e - y.e;\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      for (i = 0; yd[i] == (xd[i] || 0); ) ++i;\r\n      if (yd[i] > (xd[i] || 0)) --e;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n      } else if (dp) {\r\n        sd = pr + (getBase10Exponent(x) - getBase10Exponent(y)) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) return new Ctor(0);\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / LOG_BASE + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * BASE + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= BASE/2\r\n        k = BASE / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k);\r\n          xd = multiplyInteger(xd, k);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= BASE / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= BASE) k = BASE - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n\r\n      q.e = e;\r\n\r\n      return round(q, dp ? pr + getBase10Exponent(q) + 1 : pr);\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` truncated to `sd`\r\n   * significant digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   */\r\n  function exp(x, sd) {\r\n    var denominator, guard, pow, sum, t, wpr,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    if (getBase10Exponent(x) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n\r\n    // exp(0) = 1\r\n    if (!x.s) return new Ctor(ONE);\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    while (x.abs().gte(0.1)) {\r\n      x = x.times(t);    // x = x / 2^5\r\n      k += 5;\r\n    }\r\n\r\n    // Estimate the precision increase necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(ONE);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = round(pow.times(x), wpr);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        while (k--) sum = round(sum.times(sum), wpr);\r\n        Ctor.precision = pr;\r\n        return sd == null ? (external = true, round(sum, pr)) : sum;\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(x) {\r\n    var e = x.e * LOG_BASE,\r\n      w = x.d[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for (; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n\r\n    if (sd > Ctor.LN10.sd()) {\r\n\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(decimalError + 'LN10 precision limit exceeded');\r\n    }\r\n\r\n    return round(new Ctor(Ctor.LN10), sd);\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` truncated to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(n) is non-terminating (n != 1)\r\n   *\r\n   */\r\n  function ln(y, sd) {\r\n    var c, c0, denominator, e, numerator, sum, t, wpr, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    // ln(-x) = NaN\r\n    // ln(0) = -Infinity\r\n    if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n    // ln(1) = 0\r\n    if (x.eq(ONE)) return new Ctor(0);\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    if (x.eq(10)) {\r\n      if (sd == null) external = true;\r\n      return getLn10(Ctor, wpr);\r\n    }\r\n\r\n    wpr += guard;\r\n    Ctor.precision = wpr;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n    e = getBase10Exponent(x);\r\n\r\n    if (Math.abs(e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = getBase10Exponent(x);\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = ln(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n\r\n      Ctor.precision = pr;\r\n      return sd == null ? (external = true, round(x, pr)) : x;\r\n    }\r\n\r\n    // x is reduced to a value near 1.\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(ONE), x.plus(ONE), wpr);\r\n    x2 = round(x.times(x), wpr);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = round(numerator.times(x2), wpr);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr);\r\n\r\n        Ctor.precision = pr;\r\n        return sd == null ? (external = true, round(sum, pr)) : sum;\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48;) ++i;\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48;) --len;\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      e = e - i - 1;\r\n      x.e = mathfloor(e / LOG_BASE);\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external && (x.e > MAX_E || x.e < -MAX_E)) throw Error(exponentOutOfRange + e);\r\n    } else {\r\n\r\n      // Zero.\r\n      x.s = 0;\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits, using rounding mode `rm` if present (truncate otherwise).\r\n   */\r\n   function round(x, sd, rm) {\r\n    var i, j, k, n, rd, doRound, w, xdi,\r\n      xd = x.d;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd which contains the rounding digit, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // n: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (n = 1, k = xd[0]; k >= 10; k /= 10) n++;\r\n    i = sd - n;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) return x;\r\n      w = k = xd[xdi];\r\n\r\n      // Get the number of digits of w.\r\n      for (n = 1; k >= 10; k /= 10) n++;\r\n\r\n      // Get the index of rd within w.\r\n      i %= LOG_BASE;\r\n\r\n      // Get the index of rd within w, adjusted for leading zeros.\r\n      // The number of leading zeros of w is given by LOG_BASE - n.\r\n      j = i - LOG_BASE + n;\r\n    }\r\n\r\n    if (rm !== void 0) {\r\n      k = mathpow(10, n - j - 1);\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / k % 10 | 0;\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k;\r\n\r\n      // The expression `w % mathpow(10, n - j - 1)` returns all the digits of w to the right of the\r\n      // digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression will give\r\n      // 714.\r\n\r\n      doRound = rm < 4\r\n        ? (rd || doRound) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, n - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n    }\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      if (doRound) {\r\n        k = getBase10Exponent(x);\r\n        xd.length = 1;\r\n\r\n        // Convert sd to decimal places.\r\n        sd = sd - k - 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = mathfloor(-sd / LOG_BASE) || 0;\r\n      } else {\r\n        xd.length = 1;\r\n\r\n        // Zero.\r\n        xd[0] = x.e = x.s = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, n - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (doRound) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n          if ((xd[0] += k) == BASE) {\r\n            xd[0] = 1;\r\n            ++x.e;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n\r\n    if (external && (x.e > MAX_E || x.e < -MAX_E)) {\r\n      throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function subtract(x, y) {\r\n    var d, e, i, j, k, len, xd, xe, xLTy, yd,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    // Return y negated if x is zero.\r\n    // Return x if y is zero and x is non-zero.\r\n    if (!x.s || !y.s) {\r\n      if (y.s) y.s = -y.s;\r\n      else y = new Ctor(x);\r\n      return external ? round(y, pr) : y;\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n\r\n    // x and y are non-zero numbers with the same sign.\r\n\r\n    e = y.e;\r\n    xe = x.e;\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of zeros\r\n      // needing to be prepended, but this can be avoided while still ensuring correct rounding by\r\n      // limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to xd if shorter.\r\n    // Don't add zeros to yd if shorter as subtraction only needs to start at yd length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(0);\r\n\r\n    y.d = xd;\r\n    y.e = e;\r\n\r\n    //return external && xd.length >= pr / LOG_BASE ? round(y, pr) : y;\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n\r\n  function toString(x, isExp, sd) {\r\n    var k,\r\n      e = getBase10Exponent(x),\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (e < 0 ? 'e' : 'e+') + e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  clone\r\n   *  config/set\r\n   */\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * value {number|string|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(value) {\r\n      var x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(value);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      // Duplicate.\r\n      if (value instanceof Decimal) {\r\n        x.s = value.s;\r\n        x.e = value.e;\r\n        x.d = (value = value.d) ? value.slice() : value;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'number') {\r\n\r\n        // Reject Infinity/NaN.\r\n        if (value * 0 !== 0) {\r\n          throw Error(invalidArgument + value);\r\n        }\r\n\r\n        if (value > 0) {\r\n          x.s = 1;\r\n        } else if (value < 0) {\r\n          value = -value;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 0;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (value === ~~value && value < 1e7) {\r\n          x.e = 0;\r\n          x.d = [value];\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, value.toString());\r\n      } else if (typeof value !== 'string') {\r\n        throw Error(invalidArgument + value);\r\n      }\r\n\r\n      // Minus sign?\r\n      if (value.charCodeAt(0) === 45) {\r\n        value = value.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      if (isDecimal.test(value)) parseDecimal(x, value);\r\n      else throw Error(invalidArgument + value);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n\r\n    Decimal.clone = clone;\r\n    Decimal.config = Decimal.set = config;\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'LN10'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') {\r\n      throw Error(decimalError + 'Object expected');\r\n    }\r\n    var i, p, v,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -1 / 0, 0,\r\n        'toExpPos', 0, 1 / 0\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if ((v = obj[p = ps[i]]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if ((v = obj[p = 'LN10']) !== void 0) {\r\n        if (v == Math.LN10) this[p] = new this(v);\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(Decimal);\r\n\r\n  Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Internal constant.\r\n  ONE = new Decimal(1);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () {\r\n      return Decimal;\r\n    });\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = Decimal;\r\n\r\n    // Browser.\r\n  } else {\r\n    if (!globalScope) {\r\n      globalScope = typeof self != 'undefined' && self && self.self == self\r\n        ? self : Function('return this')();\r\n    }\r\n\r\n    globalScope.Decimal = Decimal;\r\n  }\r\n})(this);\r\n",null,"/*\r\n *  toFormat v2.0.0\r\n *  Adds a toFormat instance method to big.js or decimal.js\r\n *  Copyright (c) 2017 Michael Mclaughlin\r\n *  MIT Licence\r\n */\r\n\r\n /*\r\n * Adds a `toFormat` method to `Ctor.prototype` and a `format` object to `Ctor`, where `Ctor` is\r\n * a big number constructor such as `Decimal` (decimal.js) or `Big` (big.js).\r\n */\r\nfunction toFormat(Ctor) {\r\n  'use strict';\r\n\r\n  /*\r\n   *  Returns a string representing the value of this big number in fixed-point notation to `dp`\r\n   *  decimal places using rounding mode `rm`, and formatted according to the properties of the\r\n   * `fmt`, `this.format` and `this.constructor.format` objects, in that order of precedence.\r\n   *\r\n   *  Example:\r\n   *\r\n   *  x = new Decimal('123456789.987654321')\r\n   *\r\n   *  // Add a format object to the constructor...\r\n   *  Decimal.format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ',',\r\n   *    groupSize: 3,\r\n   *    secondaryGroupSize: 0,\r\n   *    fractionGroupSeparator: '',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 0\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123,456,789.987654321\r\n   *  x.toFormat(2, 1);            // 123,456,789.98\r\n   *\r\n   *  // And/or add a format object to the big number itself...\r\n   *  x.format = {\r\n   *    decimalSeparator: ',',\r\n   *    groupSeparator: '',\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123456789,987654321\r\n   *\r\n   *  format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ' ',\r\n   *    groupSize: 3,\r\n   *    fractionGroupSeparator: ' ',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 5\r\n   *  }\r\n\r\n   *  // And/or pass a format object to the method call.\r\n   *  x.toFormat(format);          // 123 456 789.98765 4321\r\n   *  x.toFormat(4, format);       // 123 456 789.9877\r\n   *  x.toFormat(2, 1, format);    // 123 456 789.98\r\n   *\r\n   *  [dp] {number} Decimal places. Integer.\r\n   *  [rm] {number} Rounding mode. Integer, 0 to 8. (Ignored if using big.js.)\r\n   *  [fmt] {Object} A format object.\r\n   *\r\n   */\r\n  Ctor.prototype.toFormat = function toFormat(dp, rm, fmt) {\r\n\r\n    if (!this.e && this.e !== 0) return this.toString();   // Infinity/NaN\r\n\r\n    var arr, g1, g2, i,\r\n      u,                             // undefined\r\n      nd,                            // number of integer digits\r\n      intd,                          // integer digits\r\n      intp,                          // integer part\r\n      fracp,                         // fraction part\r\n      dsep,                          // decimalSeparator\r\n      gsep,                          // groupSeparator\r\n      gsize,                         // groupSize\r\n      sgsize,                        // secondaryGroupSize\r\n      fgsep,                         // fractionGroupSeparator\r\n      fgsize,                        // fractionGroupSize\r\n      tfmt = this.format || {},\r\n      cfmt = this.constructor.format || {};\r\n\r\n    if (dp != u) {\r\n      if (typeof dp == 'object') {\r\n        fmt = dp;\r\n        dp = u;\r\n      } else if (rm != u) {\r\n        if (typeof rm == 'object') {\r\n          fmt = rm;\r\n          rm = u;\r\n        } else if (typeof fmt != 'object') {\r\n          fmt = {};\r\n        }\r\n      } else {\r\n        fmt = {};\r\n      }\r\n    } else {\r\n      fmt = {};\r\n    }\r\n\r\n    arr = this.toFixed(dp, rm).split('.');\r\n    intp = arr[0];\r\n    fracp = arr[1];\r\n    intd = this.s < 0 ? intp.slice(1) : intp;\r\n    nd = intd.length;\r\n\r\n    dsep = fmt.decimalSeparator;\r\n    if (dsep == u) {\r\n      dsep = tfmt.decimalSeparator;\r\n      if (dsep == u) {\r\n        dsep = cfmt.decimalSeparator;\r\n        if (dsep == u) dsep = '.';\r\n      }\r\n    }\r\n\r\n    gsep = fmt.groupSeparator;\r\n    if (gsep == u) {\r\n      gsep = tfmt.groupSeparator;\r\n      if (gsep == u) gsep = cfmt.groupSeparator;\r\n    }\r\n\r\n    if (gsep) {\r\n      gsize = fmt.groupSize;\r\n      if (gsize == u) {\r\n        gsize = tfmt.groupSize;\r\n        if (gsize == u) {\r\n          gsize = cfmt.groupSize;\r\n          if (gsize == u) gsize = 0;\r\n        }\r\n      }\r\n\r\n      sgsize = fmt.secondaryGroupSize;\r\n      if (sgsize == u) {\r\n        sgsize = tfmt.secondaryGroupSize;\r\n        if (sgsize == u) {\r\n          sgsize = cfmt.secondaryGroupSize;\r\n          if (sgsize == u) sgsize = 0;\r\n        }\r\n      }\r\n\r\n      if (sgsize) {\r\n        g1 = +sgsize;\r\n        g2 = +gsize;\r\n        nd -= g2;\r\n      } else {\r\n        g1 = +gsize;\r\n        g2 = +sgsize;\r\n      }\r\n\r\n      if (g1 > 0 && nd > 0) {\r\n        i = nd % g1 || g1;\r\n        intp = intd.substr(0, i);\r\n        for (; i < nd; i += g1) intp += gsep + intd.substr(i, g1);\r\n        if (g2 > 0) intp += gsep + intd.slice(i);\r\n        if (this.s < 0) intp = '-' + intp;\r\n      }\r\n    }\r\n\r\n    if (fracp) {\r\n      fgsep = fmt.fractionGroupSeparator;\r\n      if (fgsep == u) {\r\n        fgsep = tfmt.fractionGroupSeparator;\r\n        if (fgsep == u) fgsep = cfmt.fractionGroupSeparator;\r\n      }\r\n\r\n      if (fgsep) {\r\n        fgsize = fmt.fractionGroupSize;\r\n        if (fgsize == u) {\r\n          fgsize = tfmt.fractionGroupSize;\r\n          if (fgsize == u) {\r\n            fgsize = cfmt.fractionGroupSize;\r\n            if (fgsize == u) fgsize = 0;\r\n          }\r\n        }\r\n\r\n        fgsize = +fgsize;\r\n\r\n        if (fgsize) {\r\n          fracp = fracp.replace(new RegExp('\\\\d{' + fgsize + '}\\\\B', 'g'), '$&' + fgsep);\r\n        }\r\n      }\r\n\r\n      return intp + dsep + fracp;\r\n    } else {\r\n\r\n      return intp;\r\n    }\r\n  };\r\n\r\n  Ctor.format = {\r\n    decimalSeparator: '.',\r\n    groupSeparator: ',',\r\n    groupSize: 3,\r\n    secondaryGroupSize: 0,\r\n    fractionGroupSeparator: '',\r\n    fractionGroupSize: 0\r\n  };\r\n\r\n  return Ctor;\r\n}\r\n\r\nif (typeof module !== 'undefined' && module.exports) module.exports = toFormat;\r\n"],"names":["render","_vm","this","_c","_self","staticRenderFns","isProduction","process","prefix","invariant","condition","message","Error","provided","value","concat","ChainId","NativeCurrencyName","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","ARBITRUM_ONE","ARBITRUM_GOERLI","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","reduce","memo","chainId","TradeType","Rounding","UNI_ADDRESSES","UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS","V2_FACTORY_ADDRESS","V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESS","V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","_extends","v1MixedRouteQuoterAddress","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","BNB_ADDRESSES","swapRouter02Address","OPTIMISM_GOERLI_ADDRESSES","ARBITRUM_GOERLI_ADDRESSES","SEPOLIA_ADDRESSES","AVALANCHE_ADDRESSES","BASE_ADDRESSES","BASE_GOERLI_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","_CHAIN_TO_ADDRESSES_M","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","_GOVERNANCE_ALPHA_V1_","GOVERNANCE_BRAVO_ADDRESSES","_GOVERNANCE_BRAVO_ADD","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","_MERKLE_DISTRIBUTOR_A","ARGENT_WALLET_DETECTOR_ADDRESS","_ARGENT_WALLET_DETECT","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","_SOCKS_CONTROLLER_ADD","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","SWAP_ROUTER_02_ADDRESSES","MaxUint256","JSBI","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","_proto","prototype","invert","add","other","otherParsed","subtract","lessThan","equalTo","greaterThan","multiply","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","Big$1","CurrencyAmount","_Fraction","currency","_this","call","decimalScale","decimals","_inheritsLoose","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","isPercent","Price","baseCurrency","quoteCurrency","args","Array","_len","_key","arguments","length","result","quoteAmount","baseAmount","_ref","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","_BaseCurrency","isNative","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","toLowerCase","sortsBefore","WETH9","_WETH","Ether","_NativeCurrency","onChain","_this$_etherCache$cha","_etherCache","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","Math","floor","z","x","id","text","keccak256","toUtf8Bytes","logger","Logger","version","LogDescription","Description","TransactionDescription","ErrorDescription","Indexed","isIndexed","_isIndexed","BuiltinErrors","signature","inputs","reason","wrapAccessError","property","wrap","Interface","constructor","fragments","abi","JSON","parse","defineReadOnly","map","fragment","Fragment","from","filter","getStatic","forEach","bucket","type","deploy","warn","functions","events","errors","ConstructorFragment","payable","FormatTypes","full","sighash","throwArgumentError","json","stringify","j","getAbiCoder","defaultAbiCoder","getSighash","hexDataSlice","getEventTopic","eventFragment","getFunction","nameOrSignatureOrSighash","isHexString","indexOf","trim","matching","Object","keys","f","split","FunctionFragment","fromString","getEvent","nameOrSignatureOrTopic","topichash","EventFragment","getError","_","_decodeParams","params","data","_abiCoder","decode","_encodeParams","values","encode","encodeDeploy","decodeErrorResult","bytes","arrayify","hexlify","slice","encodeErrorResult","decodeFunctionData","functionFragment","encodeFunctionData","decodeFunctionResult","errorArgs","errorName","errorSignature","_getWordSize","outputs","selector","builtin","throwError","CALL_EXCEPTION","method","encodeFunctionResult","encodeFilterTopics","UNEXPECTED_ARGUMENT","argument","topics","anonymous","encodeTopic","param","match","BigNumber","toHexString","hexZeroPad","index","indexed","baseType","isArray","encodeEventLog","dataTypes","dataValues","decodeEventLog","topicHash","INVALID_ARGUMENT","expected","nonIndexed","dynamic","ParamType","fromObject","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","defineProperty","enumerable","i","freeze","parseTransaction","tx","substring","parseLog","log","topic","parseError","hexData","errorFragment","isInterface","_isInterface","regexBytes","RegExp","regexNumber","regexArray","Zeros","_pack","zeroPad","size","parseInt","String","toTwos","byteLength","count","pack","types","tight","hashKeccak256","FeeAmount","runtime","exports","undefined$1","Op","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","configurable","writable","err","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","makeInvokeMethod","tryCatch","fn","arg","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","__await","then","unwrapped","previousPromise","enqueue","callInvokeWithMethodAndArg","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","object","reverse","skipTempReset","prev","charAt","stop","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","FACTORY_ADDRESS","ADDRESS_ZERO","POOL_INIT_CODE_HASH","TICK_SPACINGS","_TICK_SPACINGS","LOWEST","LOW","MEDIUM","HIGH","NEGATIVE_ONE","Q96","Q192","computePoolAddress","factoryAddress","tokenA","tokenB","fee","initCodeHashManualOverride","token0","_ref2","token1","getCreate2Address","LiquidityMath","addDelta","y","FullMath","mulDivRoundingUp","a","b","product","MaxUint160","multiplyIn256","addIn256","sum","SqrtPriceMath","getAmount0Delta","sqrtRatioAX96","sqrtRatioBX96","liquidity","roundUp","numerator1","numerator2","getAmount1Delta","getNextSqrtPriceFromInput","sqrtPX96","amountIn","zeroForOne","getNextSqrtPriceFromAmount0RoundingUp","getNextSqrtPriceFromAmount1RoundingDown","getNextSqrtPriceFromOutput","amountOut","amount","_product","_denominator","_quotient","MAX_FEE","SwapMath","computeSwapStep","sqrtRatioCurrentX96","sqrtRatioTargetX96","amountRemaining","feePips","returnValues","exactIn","amountRemainingLessFee","sqrtRatioNextX96","max","feeAmount","POWERS_OF_2","pow","mostSignificantBit","_step","msb","_iterator","_createForOfIteratorHelperLoose","_step$value","power","min","mulShift","val","mulBy","Q32","TickMath","getSqrtRatioAtTick","tick","MIN_TICK","MAX_TICK","absTick","ratio","getTickAtSqrtRatio","sqrtRatioX96","MIN_SQRT_RATIO","MAX_SQRT_RATIO","r","sqrtRatioX128","log_2","log_sqrt10001","tickLow","tickHigh","NoTickDataProvider","getTick","_getTick","_asyncToGenerator","runtime_1","_callee","_tick","_context","ERROR_MESSAGE","_x","apply","nextInitializedTickWithinOneWord","_nextInitializedTickWithinOneWord","_callee2","_lte","_tickSpacing","_context2","_x2","_x3","_x4","isSorted","list","tickComparator","TickList","validateList","ticks","tickSpacing","every","accumulator","liquidityNet","isBelowSmallest","isAtOrAboveLargest","binarySearch","l","nextInitializedTick","lte","_index","compressed","wordPos","minimum","_wordPos","maximum","_index2","_nextInitializedTick","toHex","bigintIsh","bigInt","hex","encodeRouteToPath","route","exactOutput","firstInputToken","input","pools","pool","inputToken","path","outputToken","_route$pools$reduce","encodeSqrtRatioX96","amount1","amount0","ratioX192","maxLiquidityForAmount0Imprecise","intermediate","maxLiquidityForAmount0Precise","maxLiquidityForAmount1","_ref3","maxLiquidityForAmounts","useFullPrecision","_ref4","maxLiquidityForAmount0","liquidity0","liquidity1","tickToPrice","baseToken","quoteToken","Tick","liquidityGross","TickListDataProvider","ticksMapped","t","NO_TICK_DATA_PROVIDER_DEFAULT","Pool","tickCurrent","tickCurrentSqrtRatioX96","nextTickSqrtRatioX96","tickDataProvider","factoryAddressOverride","involvesToken","token","priceOf","token0Price","token1Price","getOutputAmount","_getOutputAmount","sqrtPriceLimitX96","_yield$this$swap","swap","amountCalculated","getInputAmount","_getInputAmount","_yield$this$swap2","_swap","_callee3","amountSpecified","exactInput","step","_yield$this$tickDataP","_SwapMath$computeSwap","_context3","amountSpecifiedRemaining","sqrtPriceX96","sqrtPriceStartX96","tickNext","initialized","sqrtPriceNextX96","t0","t1","BigInt","_x5","_x6","_x7","_this$_token0Price","_token0Price","_this$_token1Price","_token1Price","Position","tickLower","tickUpper","_token0Amount","_token1Amount","_mintAmounts","ratiosAfterSlippage","slippageTolerance","priceLower","asFraction","priceUpper","sqrtRatioX96Lower","sqrtRatioX96Upper","mintAmountsWithSlippage","_this$ratiosAfterSlip","poolLower","poolUpper","positionThatWillBeCreated","fromAmounts","mintAmounts","burnAmountsWithSlippage","_this$ratiosAfterSlip2","fromAmount0","fromAmount1","Multicall","encodeMulticall","calldatas","INTERFACE","isAllowedPermit","permitOptions","IMulticall","SelfPermit","encodePermit","options","nonce","expiry","v","s","deadline","ISelfPermit","Payments","encodeFeeBips","encodeUnwrapWETH9","amountMinimum","recipient","feeOptions","feeBips","feeRecipient","encodeSweepToken","encodeRefundETH","IPeripheryPaymentsWithFee","MaxUint128","isMint","some","k","NonfungiblePositionManager","encodeCreate","createCallParameters","calldata","addCallParameters","position","amount0Desired","_position$mintAmounts","amount1Desired","minimumAmounts","amount0Min","amount1Min","createPool","token0Permit","token1Permit","tokenId","useNative","wrappedValue","encodeCollect","involvesETH","expectedCurrencyOwed0","expectedCurrencyOwed1","amount0Max","amount1Max","ethAmount","tokenAmount","collectCallParameters","removeCallParameters","partialPosition","liquidityPercentage","_partialPosition$burn","permit","spender","collectOptions","_options$collectOptio","rest","_objectWithoutPropertiesLoose","burnToken","safeTransferFromParameters","sender","INonfungiblePositionManager","SwapQuoter","quoteCallParameters","tradeType","singleHop","swapInterface","useQuoterV2","V2INTERFACE","V1INTERFACE","_options$sqrtPriceLim","_options","baseQuoteParams","tokenIn","tokenPath","tokenOut","v2QuoteParams","EXACT_INPUT","v1QuoteParams","tradeTypeFunctionName","_options2","undefined","EXACT_OUTPUT","_tradeTypeFunctionName","IQuoter","IQuoterV2","Staker","encodeClaim","incentiveKey","_encodeIncentiveKey","_options$amount","rewardToken","collectRewards","incentiveKeys","withdrawToken","withdrawOptions","claimOptions","owner","encodeDeposit","INCENTIVE_KEY_ABI","_incentiveKey$pool","refundee","startTime","endTime","IUniswapV3Staker","SwapRouter","swapCallParameters","trades","sampleTrade","trade","ZERO_IN","ZERO_OUT","totalAmountOut","minimumAmountOut","mustRefund","inputIsNative","outputIsNative","routerMustCustody","totalValue","maximumAmountIn","inputTokenPermit","_step2","_iterator2","swaps","_step2$value","exactInputSingleParams","amountOutMinimum","_options$sqrtPriceLim2","exactOutputSingleParams","amountInMaximum","exactInputParams","exactOutputParams","ISwapRouter","props","components","created","mounted","console","unisdk","methods","component","GLOBAL","MAX_DP","MAX_POWER","NE","PE","NAME","INVALID","INVALID_DP","INVALID_RM","DIV_BY_ZERO","P","UNDEFINED","NUMERIC","_Big_","n","e","c","nl","replace","search","round","dp","rm","more","xc","unshift","join","abs","cmp","isneg","yc","bl","bt","ri","bz","ai","al","rl","q","qc","qi","d","shift","eq","gt","gte","lt","minus","sub","xlty","plus","xe","ye","mod","ygtx","times","one","half","toExponential","mul","toPrecision","sd","valueOf","toJSON","globalScope","MAX_DIGITS","toExpNeg","toExpPos","LN10","external","decimalError","invalidArgument","exponentOutOfRange","mathfloor","mathpow","isDecimal","LOG_BASE","MAX_E","carry","len","xd","yd","Ctor","pr","ceil","checkInt32","digitsToString","ws","indexOfLastWord","str","w","getZeroString","absoluteValue","comparedTo","xdL","ydL","dividedBy","dividedToIntegerBy","idiv","exponent","getBase10Exponent","greaterThanOrEqualTo","isint","isNegative","isPositive","ispos","isZero","lessThanOrEqualTo","logarithm","base","wpr","ln","modulo","naturalExponential","exp","naturalLogarithm","negated","neg","squareRoot","rL","toDecimalPlaces","todp","toInteger","toint","toNumber","toPower","sign","yIsInt","guard","yn","truncate","tosd","multiplyInteger","temp","compare","aL","bL","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","getLn10","zs","c0","x2","parseDecimal","charCodeAt","rd","doRound","xdi","xLTy","isExp","arr","clone","p","ps","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","config","imul","clz32","g","o","__kMaxLength","RangeError","isFinite","__zero","__isOneDigitInt","__oneDigit","__fromDouble","__fromString","SyntaxError","__toPrimitive","toDebugString","__toStringBasePowerOfTwo","__toStringGeneric","__unsignedDigit","__digit","__clz30","Infinity","u","h","m","__decideRounding","__kBitConversionInts","__kBitConversionDouble","unaryMinus","__copy","bitwiseNot","__absoluteSubOne","__trim","__absoluteAddOne","exponentiate","__kMaxLengthBits","__initializeDigits","__setDigit","__clzmsd","__multiplyAccumulate","__absoluteCompare","__absoluteDivSmall","__absoluteDivLarge","remainder","__absoluteModSmall","__absoluteAdd","__absoluteSub","leftShift","__rightShiftByAbsolute","__leftShiftByAbsolute","signedRightShift","unsignedRightShift","__compareToBigInt","lessThanOrEqual","greaterThanOrEqual","equal","notEqual","bitwiseAnd","__absoluteAnd","__absoluteOr","__absoluteAndNot","bitwiseXor","__absoluteXor","bitwiseOr","asIntN","__truncateToNBits","__truncateAndSubFromPowerOfTwo","asUintN","ADD","__toNumeric","__isBigInt","LT","__compare","LE","GT","GE","EQ","__equalToNumber","__isWhitespace","__kMaxBitsPerChar","__kBitsPerCharTableMultiplier","__kBitsPerCharTableShift","__fillFromParts","D","__inplaceMultiplyAdd","__kConversionChars","__halfDigit","__setHalfDigit","__unequalSign","__absoluteGreater","__absoluteLess","__compareToNumber","__compareToDouble","__comparisonResultToBool","__setDigitGrow","__imul","__internalMultiplyAdd","__halfDigitLength","__clz15","__specialLeftShift","__inplaceSub","__inplaceAdd","__inplaceRightShift","__toShiftAmount","__rightShiftByMaximum","toPrimitive","__digitPow","__kBitConversionBuffer","ArrayBuffer","Float64Array","Int32Array","LN2","fmt","g1","g2","nd","intd","intp","fracp","dsep","gsep","gsize","sgsize","fgsep","fgsize","tfmt","cfmt","decimalSeparator","groupSize","secondaryGroupSize","substr","fractionGroupSeparator","fractionGroupSize"],"sourceRoot":""}